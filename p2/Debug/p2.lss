
p2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000670  00800200  00001a4e  00001ae2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000140f  00800870  00800870  00002152  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002152  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000021f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002124  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097f  00000000  00000000  0000450c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014ec  00000000  00000000  00004e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  00006378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086d  00000000  00000000  00006828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000146f  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00008504  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	9d c0       	rjmp	.+314    	; 0x140 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c0       	rjmp	.+310    	; 0x140 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c0       	rjmp	.+306    	; 0x140 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c0       	rjmp	.+302    	; 0x140 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c0       	rjmp	.+298    	; 0x140 <__bad_interrupt>
      16:	00 00       	nop
      18:	93 c0       	rjmp	.+294    	; 0x140 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	91 c0       	rjmp	.+290    	; 0x140 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c0       	rjmp	.+286    	; 0x140 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c0       	rjmp	.+282    	; 0x140 <__bad_interrupt>
      26:	00 00       	nop
      28:	8b c0       	rjmp	.+278    	; 0x140 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	89 c0       	rjmp	.+274    	; 0x140 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c0       	rjmp	.+270    	; 0x140 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c0       	rjmp	.+266    	; 0x140 <__bad_interrupt>
      36:	00 00       	nop
      38:	83 c0       	rjmp	.+262    	; 0x140 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	81 c0       	rjmp	.+258    	; 0x140 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7f c0       	rjmp	.+254    	; 0x140 <__bad_interrupt>
      42:	00 00       	nop
      44:	d4 c1       	rjmp	.+936    	; 0x3ee <__vector_17>
      46:	00 00       	nop
      48:	7b c0       	rjmp	.+246    	; 0x140 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c0       	rjmp	.+242    	; 0x140 <__bad_interrupt>
      4e:	00 00       	nop
      50:	77 c0       	rjmp	.+238    	; 0x140 <__bad_interrupt>
      52:	00 00       	nop
      54:	75 c0       	rjmp	.+234    	; 0x140 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c0       	rjmp	.+230    	; 0x140 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c0       	rjmp	.+226    	; 0x140 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c0       	rjmp	.+222    	; 0x140 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c0       	rjmp	.+218    	; 0x140 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c0       	rjmp	.+214    	; 0x140 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c0       	rjmp	.+210    	; 0x140 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c0       	rjmp	.+206    	; 0x140 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c0       	rjmp	.+202    	; 0x140 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c0       	rjmp	.+198    	; 0x140 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c0       	rjmp	.+194    	; 0x140 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c0       	rjmp	.+190    	; 0x140 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c0       	rjmp	.+186    	; 0x140 <__bad_interrupt>
      86:	00 00       	nop
      88:	5b c0       	rjmp	.+182    	; 0x140 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	59 c0       	rjmp	.+178    	; 0x140 <__bad_interrupt>
      8e:	00 00       	nop
      90:	57 c0       	rjmp	.+174    	; 0x140 <__bad_interrupt>
      92:	00 00       	nop
      94:	55 c0       	rjmp	.+170    	; 0x140 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c0       	rjmp	.+166    	; 0x140 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c0       	rjmp	.+162    	; 0x140 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c0       	rjmp	.+158    	; 0x140 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c0       	rjmp	.+154    	; 0x140 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c0       	rjmp	.+150    	; 0x140 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c0       	rjmp	.+146    	; 0x140 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c0       	rjmp	.+142    	; 0x140 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c0       	rjmp	.+138    	; 0x140 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c0       	rjmp	.+134    	; 0x140 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c0       	rjmp	.+130    	; 0x140 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c0       	rjmp	.+126    	; 0x140 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c0       	rjmp	.+122    	; 0x140 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c0       	rjmp	.+118    	; 0x140 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c0       	rjmp	.+114    	; 0x140 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c0       	rjmp	.+110    	; 0x140 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c0       	rjmp	.+106    	; 0x140 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c0       	rjmp	.+102    	; 0x140 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c0       	rjmp	.+98     	; 0x140 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c0       	rjmp	.+94     	; 0x140 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d2 08       	sbc	r13, r2
      e6:	a3 05       	cpc	r26, r3
      e8:	d2 08       	sbc	r13, r2
      ea:	ad 05       	cpc	r26, r13
      ec:	86 06       	cpc	r8, r22
      ee:	b0 06       	cpc	r11, r16
      f0:	e0 06       	cpc	r14, r16
      f2:	e5 06       	cpc	r14, r21
      f4:	e7 06       	cpc	r14, r23
      f6:	3c 07       	cpc	r19, r28
      f8:	84 07       	cpc	r24, r20
      fa:	86 07       	cpc	r24, r22
      fc:	12 08       	sbc	r1, r2

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	18 e0       	ldi	r17, 0x08	; 8
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	ee e4       	ldi	r30, 0x4E	; 78
     116:	fa e1       	ldi	r31, 0x1A	; 26
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a0 37       	cpi	r26, 0x70	; 112
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	2c e1       	ldi	r18, 0x1C	; 28
     12a:	a0 e7       	ldi	r26, 0x70	; 112
     12c:	b8 e0       	ldi	r27, 0x08	; 8
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	af 37       	cpi	r26, 0x7F	; 127
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 a6 09 	call	0x134c	; 0x134c <main>
     13c:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <_exit>

00000140 <__bad_interrupt>:
     140:	5f cf       	rjmp	.-322    	; 0x0 <__vectors>

00000142 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     142:	0f 92       	push	r0
     144:	1f 92       	push	r1
     146:	2f 92       	push	r2
     148:	3f 92       	push	r3
     14a:	4f 92       	push	r4
     14c:	5f 92       	push	r5
     14e:	6f 92       	push	r6
     150:	7f 92       	push	r7
     152:	8f 92       	push	r8
     154:	9f 92       	push	r9
     156:	af 92       	push	r10
     158:	bf 92       	push	r11
     15a:	cf 92       	push	r12
     15c:	df 92       	push	r13
     15e:	ef 92       	push	r14
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
     182:	fc b7       	in	r31, 0x3c	; 60
     184:	ff 93       	push	r31
     186:	ff b7       	in	r31, 0x3f	; 63
     188:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     18a:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18c:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18e:	e0 93 6f 1c 	sts	0x1C6F, r30
        sts  KernelSp+1, r31
     192:	f0 93 70 1c 	sts	0x1C70, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     196:	e0 91 69 1c 	lds	r30, 0x1C69
        lds  r31, CurrentSp+1
     19a:	f0 91 6a 1c 	lds	r31, 0x1C6A
        out  SPL, r30
     19e:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     1a0:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a2:	ff 91       	pop	r31
     1a4:	ff bf       	out	0x3f, r31	; 63
     1a6:	ff 91       	pop	r31
     1a8:	fc bf       	out	0x3c, r31	; 60
     1aa:	ff 91       	pop	r31
     1ac:	ef 91       	pop	r30
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	bf 91       	pop	r27
     1b4:	af 91       	pop	r26
     1b6:	9f 91       	pop	r25
     1b8:	8f 91       	pop	r24
     1ba:	7f 91       	pop	r23
     1bc:	6f 91       	pop	r22
     1be:	5f 91       	pop	r21
     1c0:	4f 91       	pop	r20
     1c2:	3f 91       	pop	r19
     1c4:	2f 91       	pop	r18
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	cf 90       	pop	r12
     1d2:	bf 90       	pop	r11
     1d4:	af 90       	pop	r10
     1d6:	9f 90       	pop	r9
     1d8:	8f 90       	pop	r8
     1da:	7f 90       	pop	r7
     1dc:	6f 90       	pop	r6
     1de:	5f 90       	pop	r5
     1e0:	4f 90       	pop	r4
     1e2:	3f 90       	pop	r3
     1e4:	2f 90       	pop	r2
     1e6:	1f 90       	pop	r1
     1e8:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1ea:	18 95       	reti

000001ec <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ec:	0f 92       	push	r0
     1ee:	1f 92       	push	r1
     1f0:	2f 92       	push	r2
     1f2:	3f 92       	push	r3
     1f4:	4f 92       	push	r4
     1f6:	5f 92       	push	r5
     1f8:	6f 92       	push	r6
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	2f 93       	push	r18
     212:	3f 93       	push	r19
     214:	4f 93       	push	r20
     216:	5f 93       	push	r21
     218:	6f 93       	push	r22
     21a:	7f 93       	push	r23
     21c:	8f 93       	push	r24
     21e:	9f 93       	push	r25
     220:	af 93       	push	r26
     222:	bf 93       	push	r27
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	fc b7       	in	r31, 0x3c	; 60
     22e:	ff 93       	push	r31
     230:	ff b7       	in	r31, 0x3f	; 63
     232:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     234:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     236:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     238:	e0 93 69 1c 	sts	0x1C69, r30
        sts  CurrentSp+1, r31
     23c:	f0 93 6a 1c 	sts	0x1C6A, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     240:	e0 91 6f 1c 	lds	r30, 0x1C6F
        lds  r31, KernelSp+1
     244:	f0 91 70 1c 	lds	r31, 0x1C70
        out  SPL, r30
     248:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     24a:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24c:	ff 91       	pop	r31
     24e:	ff bf       	out	0x3f, r31	; 63
     250:	ff 91       	pop	r31
     252:	fc bf       	out	0x3c, r31	; 60
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	1f 91       	pop	r17
     272:	0f 91       	pop	r16
     274:	ff 90       	pop	r15
     276:	ef 90       	pop	r14
     278:	df 90       	pop	r13
     27a:	cf 90       	pop	r12
     27c:	bf 90       	pop	r11
     27e:	af 90       	pop	r10
     280:	9f 90       	pop	r9
     282:	8f 90       	pop	r8
     284:	7f 90       	pop	r7
     286:	6f 90       	pop	r6
     288:	5f 90       	pop	r5
     28a:	4f 90       	pop	r4
     28c:	3f 90       	pop	r3
     28e:	2f 90       	pop	r2
     290:	1f 90       	pop	r1
     292:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     294:	08 95       	ret

00000296 <findProcessByPID>:
	
	if(e1 == NULL) 
		return 0;
		
	return e1->count;	
}
     296:	18 16       	cp	r1, r24
     298:	19 06       	cpc	r1, r25
     29a:	84 f5       	brge	.+96     	; 0x2fc <findProcessByPID+0x66>
     29c:	20 91 82 0b 	lds	r18, 0x0B82
     2a0:	30 91 83 0b 	lds	r19, 0x0B83
     2a4:	28 17       	cp	r18, r24
     2a6:	39 07       	cpc	r19, r25
     2a8:	99 f0       	breq	.+38     	; 0x2d0 <findProcessByPID+0x3a>
     2aa:	21 e0       	ldi	r18, 0x01	; 1
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	6e e0       	ldi	r22, 0x0E	; 14
     2b0:	71 e0       	ldi	r23, 0x01	; 1
     2b2:	26 9f       	mul	r18, r22
     2b4:	f0 01       	movw	r30, r0
     2b6:	27 9f       	mul	r18, r23
     2b8:	f0 0d       	add	r31, r0
     2ba:	36 9f       	mul	r19, r22
     2bc:	f0 0d       	add	r31, r0
     2be:	11 24       	eor	r1, r1
     2c0:	ee 57       	subi	r30, 0x7E	; 126
     2c2:	f4 4f       	sbci	r31, 0xF4	; 244
     2c4:	40 81       	ld	r20, Z
     2c6:	51 81       	ldd	r21, Z+1	; 0x01
     2c8:	48 17       	cp	r20, r24
     2ca:	59 07       	cpc	r21, r25
     2cc:	79 f4       	brne	.+30     	; 0x2ec <findProcessByPID+0x56>
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <findProcessByPID+0x3e>
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	4e e0       	ldi	r20, 0x0E	; 14
     2d6:	51 e0       	ldi	r21, 0x01	; 1
     2d8:	24 9f       	mul	r18, r20
     2da:	c0 01       	movw	r24, r0
     2dc:	25 9f       	mul	r18, r21
     2de:	90 0d       	add	r25, r0
     2e0:	34 9f       	mul	r19, r20
     2e2:	90 0d       	add	r25, r0
     2e4:	11 24       	eor	r1, r1
     2e6:	8e 57       	subi	r24, 0x7E	; 126
     2e8:	94 4f       	sbci	r25, 0xF4	; 244
     2ea:	08 95       	ret
     2ec:	2f 5f       	subi	r18, 0xFF	; 255
     2ee:	3f 4f       	sbci	r19, 0xFF	; 255
     2f0:	20 31       	cpi	r18, 0x10	; 16
     2f2:	31 05       	cpc	r19, r1
     2f4:	f1 f6       	brne	.-68     	; 0x2b2 <findProcessByPID+0x1c>
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	08 95       	ret
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	08 95       	ret

00000302 <findEventByEventID>:
     302:	00 97       	sbiw	r24, 0x00	; 0
     304:	51 f0       	breq	.+20     	; 0x31a <findEventByEventID+0x18>
     306:	20 91 52 0b 	lds	r18, 0x0B52
     30a:	30 91 53 0b 	lds	r19, 0x0B53
     30e:	28 17       	cp	r18, r24
     310:	39 07       	cpc	r19, r25
     312:	e1 f0       	breq	.+56     	; 0x34c <findEventByEventID+0x4a>
     314:	21 e0       	ldi	r18, 0x01	; 1
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	0a c0       	rjmp	.+20     	; 0x32e <findEventByEventID+0x2c>
     31a:	8c e1       	ldi	r24, 0x1C	; 28
     31c:	92 e0       	ldi	r25, 0x02	; 2
     31e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <puts>
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	80 93 68 1c 	sts	0x1C68, r24
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	08 95       	ret
     32e:	f9 01       	movw	r30, r18
     330:	ee 0f       	add	r30, r30
     332:	ff 1f       	adc	r31, r31
     334:	e2 0f       	add	r30, r18
     336:	f3 1f       	adc	r31, r19
     338:	ee 0f       	add	r30, r30
     33a:	ff 1f       	adc	r31, r31
     33c:	ee 5a       	subi	r30, 0xAE	; 174
     33e:	f4 4f       	sbci	r31, 0xF4	; 244
     340:	40 81       	ld	r20, Z
     342:	51 81       	ldd	r21, Z+1	; 0x01
     344:	48 17       	cp	r20, r24
     346:	59 07       	cpc	r21, r25
     348:	69 f4       	brne	.+26     	; 0x364 <findEventByEventID+0x62>
     34a:	02 c0       	rjmp	.+4      	; 0x350 <findEventByEventID+0x4e>
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	c9 01       	movw	r24, r18
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	82 0f       	add	r24, r18
     358:	93 1f       	adc	r25, r19
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	8e 5a       	subi	r24, 0xAE	; 174
     360:	94 4f       	sbci	r25, 0xF4	; 244
     362:	08 95       	ret
     364:	2f 5f       	subi	r18, 0xFF	; 255
     366:	3f 4f       	sbci	r19, 0xFF	; 255
     368:	28 30       	cpi	r18, 0x08	; 8
     36a:	31 05       	cpc	r19, r1
     36c:	01 f7       	brne	.-64     	; 0x32e <findEventByEventID+0x2c>
     36e:	89 e0       	ldi	r24, 0x09	; 9
     370:	80 93 68 1c 	sts	0x1C68, r24
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	08 95       	ret

0000037a <findMutexByMutexID>:
     37a:	00 97       	sbiw	r24, 0x00	; 0
     37c:	59 f0       	breq	.+22     	; 0x394 <findMutexByMutexID+0x1a>
     37e:	20 91 7a 08 	lds	r18, 0x087A
     382:	30 91 7b 08 	lds	r19, 0x087B
     386:	28 17       	cp	r18, r24
     388:	39 07       	cpc	r19, r25
     38a:	d9 f0       	breq	.+54     	; 0x3c2 <findMutexByMutexID+0x48>
     38c:	21 e0       	ldi	r18, 0x01	; 1
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	6b e5       	ldi	r22, 0x5B	; 91
     392:	0a c0       	rjmp	.+20     	; 0x3a8 <findMutexByMutexID+0x2e>
     394:	8e e4       	ldi	r24, 0x4E	; 78
     396:	92 e0       	ldi	r25, 0x02	; 2
     398:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <puts>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	80 93 68 1c 	sts	0x1C68, r24
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	08 95       	ret
     3a8:	62 9f       	mul	r22, r18
     3aa:	f0 01       	movw	r30, r0
     3ac:	63 9f       	mul	r22, r19
     3ae:	f0 0d       	add	r31, r0
     3b0:	11 24       	eor	r1, r1
     3b2:	e6 58       	subi	r30, 0x86	; 134
     3b4:	f7 4f       	sbci	r31, 0xF7	; 247
     3b6:	40 81       	ld	r20, Z
     3b8:	51 81       	ldd	r21, Z+1	; 0x01
     3ba:	48 17       	cp	r20, r24
     3bc:	59 07       	cpc	r21, r25
     3be:	61 f4       	brne	.+24     	; 0x3d8 <findMutexByMutexID+0x5e>
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <findMutexByMutexID+0x4c>
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	4b e5       	ldi	r20, 0x5B	; 91
     3c8:	42 9f       	mul	r20, r18
     3ca:	c0 01       	movw	r24, r0
     3cc:	43 9f       	mul	r20, r19
     3ce:	90 0d       	add	r25, r0
     3d0:	11 24       	eor	r1, r1
     3d2:	86 58       	subi	r24, 0x86	; 134
     3d4:	97 4f       	sbci	r25, 0xF7	; 247
     3d6:	08 95       	ret
     3d8:	2f 5f       	subi	r18, 0xFF	; 255
     3da:	3f 4f       	sbci	r19, 0xFF	; 255
     3dc:	28 30       	cpi	r18, 0x08	; 8
     3de:	31 05       	cpc	r19, r1
     3e0:	19 f7       	brne	.-58     	; 0x3a8 <findMutexByMutexID+0x2e>
     3e2:	8d e0       	ldi	r24, 0x0D	; 13
     3e4:	80 93 68 1c 	sts	0x1C68, r24
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	08 95       	ret

000003ee <__vector_17>:
/*                  ISR FOR HANDLING SLEEP TICKS                        */
/************************************************************************/

//Timer tick ISR
ISR(TIMER1_COMPA_vect)
{
     3ee:	1f 92       	push	r1
     3f0:	0f 92       	push	r0
     3f2:	0f b6       	in	r0, 0x3f	; 63
     3f4:	0f 92       	push	r0
     3f6:	11 24       	eor	r1, r1
     3f8:	8f 93       	push	r24
     3fa:	9f 93       	push	r25
	++Tick_Count;
     3fc:	80 91 70 08 	lds	r24, 0x0870
     400:	90 91 71 08 	lds	r25, 0x0871
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	90 93 71 08 	sts	0x0871, r25
     40a:	80 93 70 08 	sts	0x0870, r24
}
     40e:	9f 91       	pop	r25
     410:	8f 91       	pop	r24
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti

0000041c <Kernel_Tick_Handler>:
void Kernel_Tick_Handler()
{
	int i;
	
	//No ticks has been issued yet, skipping...
	if(Tick_Count == 0)
     41c:	80 91 70 08 	lds	r24, 0x0870
     420:	90 91 71 08 	lds	r25, 0x0871
     424:	89 2b       	or	r24, r25
     426:	09 f4       	brne	.+2      	; 0x42a <Kernel_Tick_Handler+0xe>
     428:	6f c0       	rjmp	.+222    	; 0x508 <Kernel_Tick_Handler+0xec>
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
		return;
	
	for(i=0; i<MAXTHREAD; i++)
	{
		//Process any active tasks that are sleeping
		if(Process[i].state == SLEEPING)
     42e:	2e e0       	ldi	r18, 0x0E	; 14
     430:	31 e0       	ldi	r19, 0x01	; 1
		{
			//When task_resume is called again, the task will be back into its READY state instead if its sleep ticks expired.
			Process[i].request_arg -= Tick_Count;
			if(Process[i].request_arg <= 0)
			{
				Process[i].last_state = READY;
     432:	61 e0       	ldi	r22, 0x01	; 1
		return;
	
	for(i=0; i<MAXTHREAD; i++)
	{
		//Process any active tasks that are sleeping
		if(Process[i].state == SLEEPING)
     434:	82 9f       	mul	r24, r18
     436:	f0 01       	movw	r30, r0
     438:	83 9f       	mul	r24, r19
     43a:	f0 0d       	add	r31, r0
     43c:	92 9f       	mul	r25, r18
     43e:	f0 0d       	add	r31, r0
     440:	11 24       	eor	r1, r1
     442:	ee 57       	subi	r30, 0x7E	; 126
     444:	f4 4f       	sbci	r31, 0xF4	; 244
     446:	43 81       	ldd	r20, Z+3	; 0x03
     448:	44 30       	cpi	r20, 0x04	; 4
     44a:	29 f5       	brne	.+74     	; 0x496 <Kernel_Tick_Handler+0x7a>
		{
			//If the current sleeping task's tick count expires, put it back into its READY state
			Process[i].request_arg -= Tick_Count;
     44c:	a0 91 70 08 	lds	r26, 0x0870
     450:	b0 91 71 08 	lds	r27, 0x0871
     454:	82 9f       	mul	r24, r18
     456:	f0 01       	movw	r30, r0
     458:	83 9f       	mul	r24, r19
     45a:	f0 0d       	add	r31, r0
     45c:	92 9f       	mul	r25, r18
     45e:	f0 0d       	add	r31, r0
     460:	11 24       	eor	r1, r1
     462:	ee 57       	subi	r30, 0x7E	; 126
     464:	f4 4f       	sbci	r31, 0xF4	; 244
     466:	46 81       	ldd	r20, Z+6	; 0x06
     468:	57 81       	ldd	r21, Z+7	; 0x07
     46a:	4a 1b       	sub	r20, r26
     46c:	5b 0b       	sbc	r21, r27
     46e:	57 83       	std	Z+7, r21	; 0x07
     470:	46 83       	std	Z+6, r20	; 0x06
			if(Process[i].request_arg <= 0)
     472:	46 81       	ldd	r20, Z+6	; 0x06
     474:	57 81       	ldd	r21, Z+7	; 0x07
     476:	14 16       	cp	r1, r20
     478:	15 06       	cpc	r1, r21
     47a:	ec f1       	brlt	.+122    	; 0x4f6 <Kernel_Tick_Handler+0xda>
			{
				Process[i].state = READY;
     47c:	82 9f       	mul	r24, r18
     47e:	f0 01       	movw	r30, r0
     480:	83 9f       	mul	r24, r19
     482:	f0 0d       	add	r31, r0
     484:	92 9f       	mul	r25, r18
     486:	f0 0d       	add	r31, r0
     488:	11 24       	eor	r1, r1
     48a:	ee 57       	subi	r30, 0x7E	; 126
     48c:	f4 4f       	sbci	r31, 0xF4	; 244
     48e:	63 83       	std	Z+3, r22	; 0x03
				Process[i].request_arg = 0;
     490:	17 82       	std	Z+7, r1	; 0x07
     492:	16 82       	std	Z+6, r1	; 0x06
     494:	30 c0       	rjmp	.+96     	; 0x4f6 <Kernel_Tick_Handler+0xda>
			}
		}
		
		//Process any SUSPENDED tasks that were previously sleeping
		else if(Process[i].last_state == SLEEPING)
     496:	82 9f       	mul	r24, r18
     498:	f0 01       	movw	r30, r0
     49a:	83 9f       	mul	r24, r19
     49c:	f0 0d       	add	r31, r0
     49e:	92 9f       	mul	r25, r18
     4a0:	f0 0d       	add	r31, r0
     4a2:	11 24       	eor	r1, r1
     4a4:	ee 57       	subi	r30, 0x7E	; 126
     4a6:	f4 4f       	sbci	r31, 0xF4	; 244
     4a8:	44 81       	ldd	r20, Z+4	; 0x04
     4aa:	44 30       	cpi	r20, 0x04	; 4
     4ac:	21 f5       	brne	.+72     	; 0x4f6 <Kernel_Tick_Handler+0xda>
		{
			//When task_resume is called again, the task will be back into its READY state instead if its sleep ticks expired.
			Process[i].request_arg -= Tick_Count;
     4ae:	a0 91 70 08 	lds	r26, 0x0870
     4b2:	b0 91 71 08 	lds	r27, 0x0871
     4b6:	82 9f       	mul	r24, r18
     4b8:	f0 01       	movw	r30, r0
     4ba:	83 9f       	mul	r24, r19
     4bc:	f0 0d       	add	r31, r0
     4be:	92 9f       	mul	r25, r18
     4c0:	f0 0d       	add	r31, r0
     4c2:	11 24       	eor	r1, r1
     4c4:	ee 57       	subi	r30, 0x7E	; 126
     4c6:	f4 4f       	sbci	r31, 0xF4	; 244
     4c8:	46 81       	ldd	r20, Z+6	; 0x06
     4ca:	57 81       	ldd	r21, Z+7	; 0x07
     4cc:	4a 1b       	sub	r20, r26
     4ce:	5b 0b       	sbc	r21, r27
     4d0:	57 83       	std	Z+7, r21	; 0x07
     4d2:	46 83       	std	Z+6, r20	; 0x06
			if(Process[i].request_arg <= 0)
     4d4:	46 81       	ldd	r20, Z+6	; 0x06
     4d6:	57 81       	ldd	r21, Z+7	; 0x07
     4d8:	14 16       	cp	r1, r20
     4da:	15 06       	cpc	r1, r21
     4dc:	64 f0       	brlt	.+24     	; 0x4f6 <Kernel_Tick_Handler+0xda>
			{
				Process[i].last_state = READY;
     4de:	82 9f       	mul	r24, r18
     4e0:	f0 01       	movw	r30, r0
     4e2:	83 9f       	mul	r24, r19
     4e4:	f0 0d       	add	r31, r0
     4e6:	92 9f       	mul	r25, r18
     4e8:	f0 0d       	add	r31, r0
     4ea:	11 24       	eor	r1, r1
     4ec:	ee 57       	subi	r30, 0x7E	; 126
     4ee:	f4 4f       	sbci	r31, 0xF4	; 244
     4f0:	64 83       	std	Z+4, r22	; 0x04
				Process[i].request_arg = 0;
     4f2:	17 82       	std	Z+7, r1	; 0x07
     4f4:	16 82       	std	Z+6, r1	; 0x06
	
	//No ticks has been issued yet, skipping...
	if(Tick_Count == 0)
		return;
	
	for(i=0; i<MAXTHREAD; i++)
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	80 31       	cpi	r24, 0x10	; 16
     4fa:	91 05       	cpc	r25, r1
     4fc:	09 f0       	breq	.+2      	; 0x500 <Kernel_Tick_Handler+0xe4>
     4fe:	9a cf       	rjmp	.-204    	; 0x434 <Kernel_Tick_Handler+0x18>
				Process[i].last_state = READY;
				Process[i].request_arg = 0;
			}
		}
	}
	Tick_Count = 0;
     500:	10 92 71 08 	sts	0x0871, r1
     504:	10 92 70 08 	sts	0x0870, r1
     508:	08 95       	ret

0000050a <Dispatch>:
/*                     KERNEL SCHEDULING FUNCTIONS                      */
/************************************************************************/

/* This internal kernel function is a part of the "scheduler". It chooses the next task to run, i.e., Cp. */
static void Dispatch()
{
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	20 e1       	ldi	r18, 0x10	; 16
     510:	30 e0       	ldi	r19, 0x00	; 0
	unsigned int i = 0;
	int highest_pri = LOWEST_PRIORITY + 1;
	int highest_pri_index = -1;
     512:	af ef       	ldi	r26, 0xFF	; 255
     514:	bf ef       	ldi	r27, 0xFF	; 255

/* This internal kernel function is a part of the "scheduler". It chooses the next task to run, i.e., Cp. */
static void Dispatch()
{
	unsigned int i = 0;
	int highest_pri = LOWEST_PRIORITY + 1;
     516:	6b e0       	ldi	r22, 0x0B	; 11
     518:	70 e0       	ldi	r23, 0x00	; 0
	{
		//Increment process index
		NextP = (NextP + 1) % MAXTHREAD;
		
		//Select the READY process with the highest priority
		if(Process[NextP].state == READY && Process[NextP].pri < highest_pri)
     51a:	4e e0       	ldi	r20, 0x0E	; 14
     51c:	51 e0       	ldi	r21, 0x01	; 1
	
	//Find the next READY task with the highest priority by iterating through the process list ONCE
	for(i=0; i<MAXTHREAD; i++)
	{
		//Increment process index
		NextP = (NextP + 1) % MAXTHREAD;
     51e:	80 91 78 08 	lds	r24, 0x0878
     522:	90 91 79 08 	lds	r25, 0x0879
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	8f 70       	andi	r24, 0x0F	; 15
     52a:	99 27       	eor	r25, r25
     52c:	90 93 79 08 	sts	0x0879, r25
     530:	80 93 78 08 	sts	0x0878, r24
		
		//Select the READY process with the highest priority
		if(Process[NextP].state == READY && Process[NextP].pri < highest_pri)
     534:	80 91 78 08 	lds	r24, 0x0878
     538:	90 91 79 08 	lds	r25, 0x0879
     53c:	84 9f       	mul	r24, r20
     53e:	f0 01       	movw	r30, r0
     540:	85 9f       	mul	r24, r21
     542:	f0 0d       	add	r31, r0
     544:	94 9f       	mul	r25, r20
     546:	f0 0d       	add	r31, r0
     548:	11 24       	eor	r1, r1
     54a:	ee 57       	subi	r30, 0x7E	; 126
     54c:	f4 4f       	sbci	r31, 0xF4	; 244
     54e:	83 81       	ldd	r24, Z+3	; 0x03
     550:	81 30       	cpi	r24, 0x01	; 1
     552:	29 f5       	brne	.+74     	; 0x59e <Dispatch+0x94>
     554:	80 91 78 08 	lds	r24, 0x0878
     558:	90 91 79 08 	lds	r25, 0x0879
     55c:	84 9f       	mul	r24, r20
     55e:	f0 01       	movw	r30, r0
     560:	85 9f       	mul	r24, r21
     562:	f0 0d       	add	r31, r0
     564:	94 9f       	mul	r25, r20
     566:	f0 0d       	add	r31, r0
     568:	11 24       	eor	r1, r1
     56a:	ee 57       	subi	r30, 0x7E	; 126
     56c:	f4 4f       	sbci	r31, 0xF4	; 244
     56e:	82 81       	ldd	r24, Z+2	; 0x02
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	86 17       	cp	r24, r22
     574:	97 07       	cpc	r25, r23
     576:	9c f4       	brge	.+38     	; 0x59e <Dispatch+0x94>
		{
			highest_pri = Process[NextP].pri;
     578:	80 91 78 08 	lds	r24, 0x0878
     57c:	90 91 79 08 	lds	r25, 0x0879
     580:	84 9f       	mul	r24, r20
     582:	f0 01       	movw	r30, r0
     584:	85 9f       	mul	r24, r21
     586:	f0 0d       	add	r31, r0
     588:	94 9f       	mul	r25, r20
     58a:	f0 0d       	add	r31, r0
     58c:	11 24       	eor	r1, r1
     58e:	ee 57       	subi	r30, 0x7E	; 126
     590:	f4 4f       	sbci	r31, 0xF4	; 244
     592:	62 81       	ldd	r22, Z+2	; 0x02
     594:	70 e0       	ldi	r23, 0x00	; 0
			highest_pri_index = NextP;
     596:	a0 91 78 08 	lds	r26, 0x0878
     59a:	b0 91 79 08 	lds	r27, 0x0879
     59e:	21 50       	subi	r18, 0x01	; 1
     5a0:	31 09       	sbc	r19, r1
	unsigned int i = 0;
	int highest_pri = LOWEST_PRIORITY + 1;
	int highest_pri_index = -1;
	
	//Find the next READY task with the highest priority by iterating through the process list ONCE
	for(i=0; i<MAXTHREAD; i++)
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <Dispatch+0x9c>
     5a4:	bc cf       	rjmp	.-136    	; 0x51e <Dispatch+0x14>
			highest_pri_index = NextP;
		}
	}
		
	//When none of the tasks in the process list is ready
	if(highest_pri_index == -1)
     5a6:	af 3f       	cpi	r26, 0xFF	; 255
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
     5aa:	b8 07       	cpc	r27, r24
     5ac:	11 f5       	brne	.+68     	; 0x5f2 <Dispatch+0xe8>
	{
		//We'll temporarily re-enable interrupt in case if one or more task is waiting on events/interrupts or sleeping
		Enable_Interrupt();
     5ae:	78 94       	sei
		
		//Looping through the process list until any process becomes ready
		while(Process[NextP].state != READY)
     5b0:	ce e0       	ldi	r28, 0x0E	; 14
     5b2:	d1 e0       	ldi	r29, 0x01	; 1
     5b4:	0c c0       	rjmp	.+24     	; 0x5ce <Dispatch+0xc4>
		{
			//Increment process index
			NextP = (NextP + 1) % MAXTHREAD;
     5b6:	80 91 78 08 	lds	r24, 0x0878
     5ba:	90 91 79 08 	lds	r25, 0x0879
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	8f 70       	andi	r24, 0x0F	; 15
     5c2:	99 27       	eor	r25, r25
     5c4:	90 93 79 08 	sts	0x0879, r25
     5c8:	80 93 78 08 	sts	0x0878, r24
			
			//Check if any timer ticks came in
			Kernel_Tick_Handler();	
     5cc:	27 df       	rcall	.-434    	; 0x41c <Kernel_Tick_Handler>
	{
		//We'll temporarily re-enable interrupt in case if one or more task is waiting on events/interrupts or sleeping
		Enable_Interrupt();
		
		//Looping through the process list until any process becomes ready
		while(Process[NextP].state != READY)
     5ce:	80 91 78 08 	lds	r24, 0x0878
     5d2:	90 91 79 08 	lds	r25, 0x0879
     5d6:	8c 9f       	mul	r24, r28
     5d8:	f0 01       	movw	r30, r0
     5da:	8d 9f       	mul	r24, r29
     5dc:	f0 0d       	add	r31, r0
     5de:	9c 9f       	mul	r25, r28
     5e0:	f0 0d       	add	r31, r0
     5e2:	11 24       	eor	r1, r1
     5e4:	ee 57       	subi	r30, 0x7E	; 126
     5e6:	f4 4f       	sbci	r31, 0xF4	; 244
     5e8:	83 81       	ldd	r24, Z+3	; 0x03
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	21 f7       	brne	.-56     	; 0x5b6 <Dispatch+0xac>
			//Check if any timer ticks came in
			Kernel_Tick_Handler();	
		}
		
		//Now that we have a ready task, interrupts must be disabled for the kernel to function properly again.
		Disable_Interrupt();
     5ee:	f8 94       	cli
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <Dispatch+0xf0>
	}
	else
		NextP = highest_pri_index;
     5f2:	b0 93 79 08 	sts	0x0879, r27
     5f6:	a0 93 78 08 	sts	0x0878, r26

	//Load the next selected task's process descriptor into Cp
	Cp = &(Process[NextP]);
     5fa:	20 91 78 08 	lds	r18, 0x0878
     5fe:	30 91 79 08 	lds	r19, 0x0879
     602:	8e e0       	ldi	r24, 0x0E	; 14
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	28 9f       	mul	r18, r24
     608:	f0 01       	movw	r30, r0
     60a:	29 9f       	mul	r18, r25
     60c:	f0 0d       	add	r31, r0
     60e:	38 9f       	mul	r19, r24
     610:	f0 0d       	add	r31, r0
     612:	11 24       	eor	r1, r1
     614:	ee 57       	subi	r30, 0x7E	; 126
     616:	f4 4f       	sbci	r31, 0xF4	; 244
     618:	f0 93 6c 1c 	sts	0x1C6C, r31
     61c:	e0 93 6b 1c 	sts	0x1C6B, r30
	CurrentSp = Cp->sp;
     620:	82 85       	ldd	r24, Z+10	; 0x0a
     622:	93 85       	ldd	r25, Z+11	; 0x0b
     624:	90 93 6a 1c 	sts	0x1C6A, r25
     628:	80 93 69 1c 	sts	0x1C69, r24
	Cp->state = RUNNING;
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	83 83       	std	Z+3, r24	; 0x03
}
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	08 95       	ret

00000636 <Kernel_Create_Task>:
/*                   TASK RELATED KERNEL FUNCTIONS                      */
/************************************************************************/

/* Handles all low level operations for creating a new task */
void Kernel_Create_Task(voidfuncptr f, PRIORITY py, int arg)
{
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	dc 01       	movw	r26, r24
	#ifdef DEBUG
	int counter = 0;
	#endif
	
	//Make sure the system can still have enough resources to create more tasks
	if (Task_Count == MAXTHREAD)
     648:	80 91 76 08 	lds	r24, 0x0876
     64c:	90 91 77 08 	lds	r25, 0x0877
     650:	40 97       	sbiw	r24, 0x10	; 16
     652:	49 f0       	breq	.+18     	; 0x666 <Kernel_Create_Task+0x30>
		return;
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
	if (Process[x].state == DEAD) break;
     654:	80 91 85 0b 	lds	r24, 0x0B85
     658:	88 23       	and	r24, r24
     65a:	f1 f0       	breq	.+60     	; 0x698 <Kernel_Create_Task+0x62>
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	ce e0       	ldi	r28, 0x0E	; 14
     662:	d1 e0       	ldi	r29, 0x01	; 1
     664:	07 c0       	rjmp	.+14     	; 0x674 <Kernel_Create_Task+0x3e>
	
	//Make sure the system can still have enough resources to create more tasks
	if (Task_Count == MAXTHREAD)
	{
		#ifdef DEBUG
		printf("Task_Create: Failed to create task. The system is at its process threshold.\n");
     666:	80 e8       	ldi	r24, 0x80	; 128
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	25 d7       	rcall	.+3658   	; 0x14b6 <puts>
		#endif
		
		err = MAX_PROCESS_ERR;
     66c:	84 e0       	ldi	r24, 0x04	; 4
     66e:	80 93 68 1c 	sts	0x1C68, r24
		return;
     672:	6e c0       	rjmp	.+220    	; 0x750 <Kernel_Create_Task+0x11a>
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
	if (Process[x].state == DEAD) break;
     674:	2c 9f       	mul	r18, r28
     676:	f0 01       	movw	r30, r0
     678:	2d 9f       	mul	r18, r29
     67a:	f0 0d       	add	r31, r0
     67c:	3c 9f       	mul	r19, r28
     67e:	f0 0d       	add	r31, r0
     680:	11 24       	eor	r1, r1
     682:	ee 57       	subi	r30, 0x7E	; 126
     684:	f4 4f       	sbci	r31, 0xF4	; 244
     686:	93 81       	ldd	r25, Z+3	; 0x03
     688:	99 23       	and	r25, r25
     68a:	41 f0       	breq	.+16     	; 0x69c <Kernel_Create_Task+0x66>
		err = MAX_PROCESS_ERR;
		return;
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
     68c:	2f 5f       	subi	r18, 0xFF	; 255
     68e:	3f 4f       	sbci	r19, 0xFF	; 255
     690:	20 31       	cpi	r18, 0x10	; 16
     692:	31 05       	cpc	r19, r1
     694:	79 f7       	brne	.-34     	; 0x674 <Kernel_Create_Task+0x3e>
     696:	02 c0       	rjmp	.+4      	; 0x69c <Kernel_Create_Task+0x66>
	if (Process[x].state == DEAD) break;
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
	
	++Task_Count;
     69c:	80 91 76 08 	lds	r24, 0x0876
     6a0:	90 91 77 08 	lds	r25, 0x0877
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	90 93 77 08 	sts	0x0877, r25
     6aa:	80 93 76 08 	sts	0x0876, r24
	p = &(Process[x]);
	
	/*The code below was agglomerated from Kernel_Create_Task_At;*/
	
	//Initializing the workspace memory for the new task
	sp = (unsigned char *) &(p->workSpace[WORKSPACE-1]);
     6ae:	ee e0       	ldi	r30, 0x0E	; 14
     6b0:	f1 e0       	ldi	r31, 0x01	; 1
     6b2:	2e 9f       	mul	r18, r30
     6b4:	c0 01       	movw	r24, r0
     6b6:	2f 9f       	mul	r18, r31
     6b8:	90 0d       	add	r25, r0
     6ba:	3e 9f       	mul	r19, r30
     6bc:	90 0d       	add	r25, r0
     6be:	11 24       	eor	r1, r1
     6c0:	ec 01       	movw	r28, r24
     6c2:	c3 57       	subi	r28, 0x73	; 115
     6c4:	d3 4f       	sbci	r29, 0xF3	; 243
	memset(&(p->workSpace),0,WORKSPACE);
     6c6:	8c 01       	movw	r16, r24
     6c8:	02 57       	subi	r16, 0x72	; 114
     6ca:	14 4f       	sbci	r17, 0xF4	; 244
     6cc:	c1 2c       	mov	r12, r1
     6ce:	dd 24       	eor	r13, r13
     6d0:	d3 94       	inc	r13
     6d2:	f8 01       	movw	r30, r16
     6d4:	86 01       	movw	r16, r12
     6d6:	11 92       	st	Z+, r1
     6d8:	01 50       	subi	r16, 0x01	; 1
     6da:	10 40       	sbci	r17, 0x00	; 0
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <Kernel_Create_Task+0xa0>

	//Store terminate at the bottom of stack to protect against stack underrun.
	*(unsigned char *)sp-- = ((unsigned int)Task_Terminate) & 0xff;
     6de:	ce 01       	movw	r24, r28
     6e0:	06 e2       	ldi	r16, 0x26	; 38
     6e2:	19 e0       	ldi	r17, 0x09	; 9
     6e4:	08 83       	st	Y, r16
	*(unsigned char *)sp-- = (((unsigned int)Task_Terminate) >> 8) & 0xff;
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	fc 01       	movw	r30, r24
     6ea:	10 83       	st	Z, r17
	*(unsigned char *)sp-- = 0x00;
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	10 82       	st	Z, r1

	//Place return address of function at bottom of stack
	*(unsigned char *)sp-- = ((unsigned int)f) & 0xff;
     6f0:	31 97       	sbiw	r30, 0x01	; 1
     6f2:	a0 83       	st	Z, r26
	*(unsigned char *)sp-- = (((unsigned int)f) >> 8) & 0xff;
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	b0 83       	st	Z, r27
	*(unsigned char *)sp-- = 0x00;
     6f8:	31 97       	sbiw	r30, 0x01	; 1
     6fa:	10 82       	st	Z, r1
     6fc:	90 e0       	ldi	r25, 0x00	; 0
	//Allocate the stack with enough memory spaces to save the registers needed for ctxswitch
	#ifdef DEBUG
	 //Fill stack with initial values for development debugging
	 for (counter = 0; counter < 34; counter++)
	 {
		 *(unsigned char *)sp-- = counter;
     6fe:	92 93       	st	-Z, r25
     700:	9f 5f       	subi	r25, 0xFF	; 255
	*(unsigned char *)sp-- = 0x00;

	//Allocate the stack with enough memory spaces to save the registers needed for ctxswitch
	#ifdef DEBUG
	 //Fill stack with initial values for development debugging
	 for (counter = 0; counter < 34; counter++)
     702:	92 32       	cpi	r25, 0x22	; 34
     704:	e1 f7       	brne	.-8      	; 0x6fe <Kernel_Create_Task+0xc8>
	 //Place stack pointer at top of stack
	 sp = sp - 34;
	#endif
	
	//Build the process descriptor for the new task
	p->pid = ++Last_PID;
     706:	80 91 62 1c 	lds	r24, 0x1C62
     70a:	90 91 63 1c 	lds	r25, 0x1C63
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	90 93 63 1c 	sts	0x1C63, r25
     714:	80 93 62 1c 	sts	0x1C62, r24
     718:	0e e0       	ldi	r16, 0x0E	; 14
     71a:	11 e0       	ldi	r17, 0x01	; 1
     71c:	20 9f       	mul	r18, r16
     71e:	f0 01       	movw	r30, r0
     720:	21 9f       	mul	r18, r17
     722:	f0 0d       	add	r31, r0
     724:	30 9f       	mul	r19, r16
     726:	f0 0d       	add	r31, r0
     728:	11 24       	eor	r1, r1
     72a:	ee 57       	subi	r30, 0x7E	; 126
     72c:	f4 4f       	sbci	r31, 0xF4	; 244
     72e:	91 83       	std	Z+1, r25	; 0x01
     730:	80 83       	st	Z, r24
	p->pri = py;
     732:	62 83       	std	Z+2, r22	; 0x02
	p->arg = arg;
     734:	51 87       	std	Z+9, r21	; 0x09
     736:	40 87       	std	Z+8, r20	; 0x08
	p->request = NONE;
     738:	15 82       	std	Z+5, r1	; 0x05
	p->state = READY;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	83 83       	std	Z+3, r24	; 0x03
     73e:	a8 97       	sbiw	r28, 0x28	; 40
	p->sp = sp;					/* stack pointer into the "workSpace" */
     740:	d3 87       	std	Z+11, r29	; 0x0b
     742:	c2 87       	std	Z+10, r28	; 0x0a
	p->code = f;				/* function to be executed as a task */
     744:	e4 5f       	subi	r30, 0xF4	; 244
     746:	fe 4f       	sbci	r31, 0xFE	; 254
     748:	b1 83       	std	Z+1, r27	; 0x01
     74a:	a0 83       	st	Z, r26
	
	//No errors occured
	err = NO_ERR;
     74c:	10 92 68 1c 	sts	0x1C68, r1
}
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	df 90       	pop	r13
     75e:	cf 90       	pop	r12
     760:	08 95       	ret

00000762 <Kernel_Create_Event>:
void Kernel_Create_Event(void)
{
	int i;
	
	//Make sure the system's events are not at max
	if(Event_Count >= MAXEVENT)
     762:	80 91 74 08 	lds	r24, 0x0874
     766:	90 91 75 08 	lds	r25, 0x0875
     76a:	08 97       	sbiw	r24, 0x08	; 8
     76c:	48 f4       	brcc	.+18     	; 0x780 <Kernel_Create_Event+0x1e>
		return;
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
		if(Event[i].id == 0) break;
     76e:	80 91 52 0b 	lds	r24, 0x0B52
     772:	90 91 53 0b 	lds	r25, 0x0B53
     776:	89 2b       	or	r24, r25
     778:	e1 f0       	breq	.+56     	; 0x7b2 <Kernel_Create_Event+0x50>
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	07 c0       	rjmp	.+14     	; 0x78e <Kernel_Create_Event+0x2c>
	
	//Make sure the system's events are not at max
	if(Event_Count >= MAXEVENT)
	{
		#ifdef DEBUG
		printf("Event_Init: Failed to create Event. The system is at its max event threshold.\n");
     780:	8c ec       	ldi	r24, 0xCC	; 204
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	98 d6       	rcall	.+3376   	; 0x14b6 <puts>
		#endif
		err = MAX_EVENT_ERR;
     786:	88 e0       	ldi	r24, 0x08	; 8
     788:	80 93 68 1c 	sts	0x1C68, r24
		return;
     78c:	08 95       	ret
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
		if(Event[i].id == 0) break;
     78e:	fc 01       	movw	r30, r24
     790:	ee 0f       	add	r30, r30
     792:	ff 1f       	adc	r31, r31
     794:	e8 0f       	add	r30, r24
     796:	f9 1f       	adc	r31, r25
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	ee 5a       	subi	r30, 0xAE	; 174
     79e:	f4 4f       	sbci	r31, 0xF4	; 244
     7a0:	20 81       	ld	r18, Z
     7a2:	31 81       	ldd	r19, Z+1	; 0x01
     7a4:	23 2b       	or	r18, r19
     7a6:	39 f0       	breq	.+14     	; 0x7b6 <Kernel_Create_Event+0x54>
		err = MAX_EVENT_ERR;
		return;
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	88 30       	cpi	r24, 0x08	; 8
     7ac:	91 05       	cpc	r25, r1
     7ae:	79 f7       	brne	.-34     	; 0x78e <Kernel_Create_Event+0x2c>
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <Kernel_Create_Event+0x54>
		if(Event[i].id == 0) break;
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
	
	//Assign a new unique ID to the event. Note that the smallest valid Event ID is 1.
	Event[i].id = ++Last_EventID;
     7b6:	20 91 66 1c 	lds	r18, 0x1C66
     7ba:	30 91 67 1c 	lds	r19, 0x1C67
     7be:	2f 5f       	subi	r18, 0xFF	; 255
     7c0:	3f 4f       	sbci	r19, 0xFF	; 255
     7c2:	30 93 67 1c 	sts	0x1C67, r19
     7c6:	20 93 66 1c 	sts	0x1C66, r18
     7ca:	fc 01       	movw	r30, r24
     7cc:	ee 0f       	add	r30, r30
     7ce:	ff 1f       	adc	r31, r31
     7d0:	df 01       	movw	r26, r30
     7d2:	a8 0f       	add	r26, r24
     7d4:	b9 1f       	adc	r27, r25
     7d6:	aa 0f       	add	r26, r26
     7d8:	bb 1f       	adc	r27, r27
     7da:	ae 5a       	subi	r26, 0xAE	; 174
     7dc:	b4 4f       	sbci	r27, 0xF4	; 244
     7de:	11 96       	adiw	r26, 0x01	; 1
     7e0:	3c 93       	st	X, r19
     7e2:	2e 93       	st	-X, r18
	Event[i].owner = 0;
     7e4:	fd 01       	movw	r30, r26
     7e6:	13 82       	std	Z+3, r1	; 0x03
     7e8:	12 82       	std	Z+2, r1	; 0x02
	++Event_Count;
     7ea:	80 91 74 08 	lds	r24, 0x0874
     7ee:	90 91 75 08 	lds	r25, 0x0875
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	90 93 75 08 	sts	0x0875, r25
     7f8:	80 93 74 08 	sts	0x0874, r24
	err = NO_ERR;
     7fc:	10 92 68 1c 	sts	0x1C68, r1
	
	#ifdef DEBUG
	printf("Event_Init: Created Event %d!\n", Last_EventID);
     800:	80 91 66 1c 	lds	r24, 0x1C66
     804:	90 91 67 1c 	lds	r25, 0x1C67
     808:	9f 93       	push	r25
     80a:	8f 93       	push	r24
     80c:	8a e1       	ldi	r24, 0x1A	; 26
     80e:	93 e0       	ldi	r25, 0x03	; 3
     810:	9f 93       	push	r25
     812:	8f 93       	push	r24
     814:	3d d6       	rcall	.+3194   	; 0x1490 <printf>
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	08 95       	ret

00000820 <Kernel_Create_Mutex>:
/************************************************************************/
/*                  MUTEX RELATED KERNEL FUNCTIONS                      */
/************************************************************************/

void Kernel_Create_Mutex(void)
{
     820:	cf 93       	push	r28
	int i;
	
	//Make sure the system's mutexes are not at max
	if(Mutex_Count >= MAXMUTEX)
     822:	80 91 72 08 	lds	r24, 0x0872
     826:	90 91 73 08 	lds	r25, 0x0873
     82a:	08 97       	sbiw	r24, 0x08	; 8
     82c:	50 f4       	brcc	.+20     	; 0x842 <Kernel_Create_Mutex+0x22>
		return;
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
		if(Mutex[i].id == 0) break;
     82e:	80 91 7a 08 	lds	r24, 0x087A
     832:	90 91 7b 08 	lds	r25, 0x087B
     836:	89 2b       	or	r24, r25
     838:	e1 f0       	breq	.+56     	; 0x872 <Kernel_Create_Mutex+0x52>
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	2b e5       	ldi	r18, 0x5B	; 91
     840:	07 c0       	rjmp	.+14     	; 0x850 <Kernel_Create_Mutex+0x30>
	
	//Make sure the system's mutexes are not at max
	if(Mutex_Count >= MAXMUTEX)
	{
		#ifdef DEBUG
		printf("Kernel_Create_Mutex: Failed to create Mutex. The system is at its max mutex threshold.\n");
     842:	89 e3       	ldi	r24, 0x39	; 57
     844:	93 e0       	ldi	r25, 0x03	; 3
     846:	37 d6       	rcall	.+3182   	; 0x14b6 <puts>
		#endif
		err = MAX_MUTEX_ERR;
     848:	8c e0       	ldi	r24, 0x0C	; 12
     84a:	80 93 68 1c 	sts	0x1C68, r24
		return;
     84e:	7a c0       	rjmp	.+244    	; 0x944 <Kernel_Create_Mutex+0x124>
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
		if(Mutex[i].id == 0) break;
     850:	24 9f       	mul	r18, r20
     852:	f0 01       	movw	r30, r0
     854:	25 9f       	mul	r18, r21
     856:	f0 0d       	add	r31, r0
     858:	11 24       	eor	r1, r1
     85a:	e6 58       	subi	r30, 0x86	; 134
     85c:	f7 4f       	sbci	r31, 0xF7	; 247
     85e:	80 81       	ld	r24, Z
     860:	91 81       	ldd	r25, Z+1	; 0x01
     862:	89 2b       	or	r24, r25
     864:	41 f0       	breq	.+16     	; 0x876 <Kernel_Create_Mutex+0x56>
		err = MAX_MUTEX_ERR;
		return;
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
     866:	4f 5f       	subi	r20, 0xFF	; 255
     868:	5f 4f       	sbci	r21, 0xFF	; 255
     86a:	48 30       	cpi	r20, 0x08	; 8
     86c:	51 05       	cpc	r21, r1
     86e:	81 f7       	brne	.-32     	; 0x850 <Kernel_Create_Mutex+0x30>
     870:	02 c0       	rjmp	.+4      	; 0x876 <Kernel_Create_Mutex+0x56>
		if(Mutex[i].id == 0) break;
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	50 e0       	ldi	r21, 0x00	; 0
	
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
     876:	80 91 6d 1c 	lds	r24, 0x1C6D
     87a:	90 91 6e 1c 	lds	r25, 0x1C6E
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	90 93 6e 1c 	sts	0x1C6E, r25
     884:	80 93 6d 1c 	sts	0x1C6D, r24
     888:	2b e5       	ldi	r18, 0x5B	; 91
     88a:	24 9f       	mul	r18, r20
     88c:	f0 01       	movw	r30, r0
     88e:	25 9f       	mul	r18, r21
     890:	f0 0d       	add	r31, r0
     892:	11 24       	eor	r1, r1
     894:	e6 58       	subi	r30, 0x86	; 134
     896:	f7 4f       	sbci	r31, 0xF7	; 247
     898:	91 83       	std	Z+1, r25	; 0x01
     89a:	80 83       	st	Z, r24
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
     89c:	13 82       	std	Z+3, r1	; 0x03
     89e:	12 82       	std	Z+2, r1	; 0x02
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
     8a4:	6b e5       	ldi	r22, 0x5B	; 91
     8a6:	64 9f       	mul	r22, r20
     8a8:	90 01       	movw	r18, r0
     8aa:	65 9f       	mul	r22, r21
     8ac:	30 0d       	add	r19, r0
     8ae:	11 24       	eor	r1, r1
     8b0:	df 01       	movw	r26, r30
     8b2:	cb e0       	ldi	r28, 0x0B	; 11
		Mutex[i].blocked_stack[j] = -1;
     8b4:	6f ef       	ldi	r22, 0xFF	; 255
     8b6:	7f ef       	ldi	r23, 0xFF	; 255
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
     8b8:	fd 01       	movw	r30, r26
     8ba:	e8 0f       	add	r30, r24
     8bc:	f9 1f       	adc	r31, r25
     8be:	c6 a3       	std	Z+38, r28	; 0x26
		Mutex[i].blocked_stack[j] = -1;
     8c0:	fc 01       	movw	r30, r24
     8c2:	33 96       	adiw	r30, 0x03	; 3
     8c4:	ee 0f       	add	r30, r30
     8c6:	ff 1f       	adc	r31, r31
     8c8:	e2 0f       	add	r30, r18
     8ca:	f3 1f       	adc	r31, r19
     8cc:	e6 58       	subi	r30, 0x86	; 134
     8ce:	f7 4f       	sbci	r31, 0xF7	; 247
     8d0:	71 83       	std	Z+1, r23	; 0x01
     8d2:	60 83       	st	Z, r22
		Mutex[i].order[j] = 0;
     8d4:	fc 01       	movw	r30, r24
     8d6:	7b 96       	adiw	r30, 0x1b	; 27
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	e2 0f       	add	r30, r18
     8de:	f3 1f       	adc	r31, r19
     8e0:	e6 58       	subi	r30, 0x86	; 134
     8e2:	f7 4f       	sbci	r31, 0xF7	; 247
     8e4:	11 82       	std	Z+1, r1	; 0x01
     8e6:	10 82       	st	Z, r1
	
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	80 31       	cpi	r24, 0x10	; 16
     8ec:	91 05       	cpc	r25, r1
     8ee:	21 f7       	brne	.-56     	; 0x8b8 <Kernel_Create_Mutex+0x98>
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
		Mutex[i].blocked_stack[j] = -1;
		Mutex[i].order[j] = 0;
	}
	Mutex[i].num_of_process = 0;
     8f0:	2b e5       	ldi	r18, 0x5B	; 91
     8f2:	24 9f       	mul	r18, r20
     8f4:	c0 01       	movw	r24, r0
     8f6:	25 9f       	mul	r18, r21
     8f8:	90 0d       	add	r25, r0
     8fa:	11 24       	eor	r1, r1
     8fc:	86 58       	subi	r24, 0x86	; 134
     8fe:	97 4f       	sbci	r25, 0xF7	; 247
     900:	fc 01       	movw	r30, r24
     902:	ea 5a       	subi	r30, 0xAA	; 170
     904:	ff 4f       	sbci	r31, 0xFF	; 255
     906:	11 82       	std	Z+1, r1	; 0x01
     908:	10 82       	st	Z, r1
	Mutex[i].total_num = 0;
     90a:	32 96       	adiw	r30, 0x02	; 2
     90c:	11 82       	std	Z+1, r1	; 0x01
     90e:	10 82       	st	Z, r1
	++Mutex_Count;
     910:	80 91 72 08 	lds	r24, 0x0872
     914:	90 91 73 08 	lds	r25, 0x0873
     918:	01 96       	adiw	r24, 0x01	; 1
     91a:	90 93 73 08 	sts	0x0873, r25
     91e:	80 93 72 08 	sts	0x0872, r24
	err = NO_ERR;
     922:	10 92 68 1c 	sts	0x1C68, r1
	
	#ifdef DEBUG
	printf("Kernel_Create_Mutex: Created Mutex %d!\n", Last_MutexID);
     926:	80 91 6d 1c 	lds	r24, 0x1C6D
     92a:	90 91 6e 1c 	lds	r25, 0x1C6E
     92e:	9f 93       	push	r25
     930:	8f 93       	push	r24
     932:	80 e9       	ldi	r24, 0x90	; 144
     934:	93 e0       	ldi	r25, 0x03	; 3
     936:	9f 93       	push	r25
     938:	8f 93       	push	r24
     93a:	aa d5       	rcall	.+2900   	; 0x1490 <printf>
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
	#endif
}
     944:	cf 91       	pop	r28
     946:	08 95       	ret

00000948 <Timer_init>:
void Timer_init()
{
	/*Timer1 is configured for the task*/
	
	//Use Prescaler = 1024
	TCCR1B |= (1<<CS12)|(1<<CS10);
     948:	e1 e8       	ldi	r30, 0x81	; 129
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	85 60       	ori	r24, 0x05	; 5
     950:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS11);
     952:	80 81       	ld	r24, Z
     954:	8d 7f       	andi	r24, 0xFD	; 253
     956:	80 83       	st	Z, r24
	
	//Use CTC mode (mode 4)
	TCCR1B |= (1<<WGM12);
     958:	80 81       	ld	r24, Z
     95a:	88 60       	ori	r24, 0x08	; 8
     95c:	80 83       	st	Z, r24
	TCCR1B &= ~((1<<WGM13)|(1<<WGM11)|(1<<WGM10));
     95e:	80 81       	ld	r24, Z
     960:	8c 7e       	andi	r24, 0xEC	; 236
     962:	80 83       	st	Z, r24
	
	OCR1A = TICK_LENG;			//Set timer top comparison value to ~10ms
     964:	8d e9       	ldi	r24, 0x9D	; 157
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	90 93 89 00 	sts	0x0089, r25
     96c:	80 93 88 00 	sts	0x0088, r24
	TCNT1 = 0;					//Load initial value for timer
     970:	10 92 85 00 	sts	0x0085, r1
     974:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 |= (1<<OCIE1A);      //enable match for OCR1A interrupt
     978:	ef e6       	ldi	r30, 0x6F	; 111
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	82 60       	ori	r24, 0x02	; 2
     980:	80 83       	st	Z, r24
	
	#ifdef DEBUG
	printf("Timer initialized!\n");
     982:	88 eb       	ldi	r24, 0xB8	; 184
     984:	93 e0       	ldi	r25, 0x03	; 3
     986:	97 c5       	rjmp	.+2862   	; 0x14b6 <puts>
     988:	08 95       	ret

0000098a <OS_Init>:
/*This function initializes the RTOS and must be called before any othersystem calls.*/
void OS_Init()
{
	int x;
	
	Task_Count = 0;
     98a:	10 92 77 08 	sts	0x0877, r1
     98e:	10 92 76 08 	sts	0x0876, r1
	Event_Count = 0;
     992:	10 92 75 08 	sts	0x0875, r1
     996:	10 92 74 08 	sts	0x0874, r1
	KernelActive = 0;
     99a:	10 92 65 1c 	sts	0x1C65, r1
     99e:	10 92 64 1c 	sts	0x1C64, r1
	Tick_Count = 0;
     9a2:	10 92 71 08 	sts	0x0871, r1
     9a6:	10 92 70 08 	sts	0x0870, r1
	NextP = 0;
     9aa:	10 92 79 08 	sts	0x0879, r1
     9ae:	10 92 78 08 	sts	0x0878, r1
	Last_PID = 0;
     9b2:	10 92 63 1c 	sts	0x1C63, r1
     9b6:	10 92 62 1c 	sts	0x1C62, r1
	Last_EventID = 0;
     9ba:	10 92 67 1c 	sts	0x1C67, r1
     9be:	10 92 66 1c 	sts	0x1C66, r1
	Last_MutexID = 0;
     9c2:	10 92 6e 1c 	sts	0x1C6E, r1
     9c6:	10 92 6d 1c 	sts	0x1C6D, r1
	err = NO_ERR;
     9ca:	10 92 68 1c 	sts	0x1C68, r1
	
	//Clear and initialize the memory used for tasks
	memset(Process, 0, MAXTHREAD*sizeof(PD));
     9ce:	80 ee       	ldi	r24, 0xE0	; 224
     9d0:	90 e1       	ldi	r25, 0x10	; 16
     9d2:	e2 e8       	ldi	r30, 0x82	; 130
     9d4:	fb e0       	ldi	r31, 0x0B	; 11
     9d6:	df 01       	movw	r26, r30
     9d8:	9c 01       	movw	r18, r24
     9da:	1d 92       	st	X+, r1
     9dc:	21 50       	subi	r18, 0x01	; 1
     9de:	30 40       	sbci	r19, 0x00	; 0
     9e0:	e1 f7       	brne	.-8      	; 0x9da <OS_Init+0x50>
	for (x = 0; x < MAXTHREAD; x++) {
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
		Process[x].state = DEAD;
     9e6:	2e e0       	ldi	r18, 0x0E	; 14
     9e8:	31 e0       	ldi	r19, 0x01	; 1
     9ea:	82 9f       	mul	r24, r18
     9ec:	f0 01       	movw	r30, r0
     9ee:	83 9f       	mul	r24, r19
     9f0:	f0 0d       	add	r31, r0
     9f2:	92 9f       	mul	r25, r18
     9f4:	f0 0d       	add	r31, r0
     9f6:	11 24       	eor	r1, r1
     9f8:	ee 57       	subi	r30, 0x7E	; 126
     9fa:	f4 4f       	sbci	r31, 0xF4	; 244
     9fc:	13 82       	std	Z+3, r1	; 0x03
	Last_MutexID = 0;
	err = NO_ERR;
	
	//Clear and initialize the memory used for tasks
	memset(Process, 0, MAXTHREAD*sizeof(PD));
	for (x = 0; x < MAXTHREAD; x++) {
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	80 31       	cpi	r24, 0x10	; 16
     a02:	91 05       	cpc	r25, r1
     a04:	91 f7       	brne	.-28     	; 0x9ea <OS_Init+0x60>
		Process[x].state = DEAD;
	}
	
	//Clear and initialize the memory used for Events
	memset(Event, 0, MAXEVENT*sizeof(EVENT_TYPE));
     a06:	80 e3       	ldi	r24, 0x30	; 48
     a08:	e2 e5       	ldi	r30, 0x52	; 82
     a0a:	fb e0       	ldi	r31, 0x0B	; 11
     a0c:	df 01       	movw	r26, r30
     a0e:	1d 92       	st	X+, r1
     a10:	8a 95       	dec	r24
     a12:	e9 f7       	brne	.-6      	; 0xa0e <OS_Init+0x84>
	for (x = 0; x < MAXEVENT; x++) {
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
		Event[x].id = 0;
     a18:	fc 01       	movw	r30, r24
     a1a:	ee 0f       	add	r30, r30
     a1c:	ff 1f       	adc	r31, r31
     a1e:	e8 0f       	add	r30, r24
     a20:	f9 1f       	adc	r31, r25
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	ee 5a       	subi	r30, 0xAE	; 174
     a28:	f4 4f       	sbci	r31, 0xF4	; 244
     a2a:	11 82       	std	Z+1, r1	; 0x01
     a2c:	10 82       	st	Z, r1
		Process[x].state = DEAD;
	}
	
	//Clear and initialize the memory used for Events
	memset(Event, 0, MAXEVENT*sizeof(EVENT_TYPE));
	for (x = 0; x < MAXEVENT; x++) {
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	88 30       	cpi	r24, 0x08	; 8
     a32:	91 05       	cpc	r25, r1
     a34:	89 f7       	brne	.-30     	; 0xa18 <OS_Init+0x8e>
		Event[x].id = 0;
	}
	
	//Clear and initialize the memory used for Mutex
	memset(Mutex, 0, MAXMUTEX*sizeof(MUTEX_TYPE));
     a36:	88 ed       	ldi	r24, 0xD8	; 216
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	ea e7       	ldi	r30, 0x7A	; 122
     a3c:	f8 e0       	ldi	r31, 0x08	; 8
     a3e:	df 01       	movw	r26, r30
     a40:	9c 01       	movw	r18, r24
     a42:	1d 92       	st	X+, r1
     a44:	21 50       	subi	r18, 0x01	; 1
     a46:	30 40       	sbci	r19, 0x00	; 0
     a48:	e1 f7       	brne	.-8      	; 0xa42 <OS_Init+0xb8>
	for (x = 0; x < MAXMUTEX; x++) {
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
		Event[x].id = 0;
     a4e:	fc 01       	movw	r30, r24
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	e8 0f       	add	r30, r24
     a56:	f9 1f       	adc	r31, r25
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ee 5a       	subi	r30, 0xAE	; 174
     a5e:	f4 4f       	sbci	r31, 0xF4	; 244
     a60:	11 82       	std	Z+1, r1	; 0x01
     a62:	10 82       	st	Z, r1
		Event[x].id = 0;
	}
	
	//Clear and initialize the memory used for Mutex
	memset(Mutex, 0, MAXMUTEX*sizeof(MUTEX_TYPE));
	for (x = 0; x < MAXMUTEX; x++) {
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	88 30       	cpi	r24, 0x08	; 8
     a68:	91 05       	cpc	r25, r1
     a6a:	89 f7       	brne	.-30     	; 0xa4e <OS_Init+0xc4>
		Event[x].id = 0;
	}
	
	#ifdef DEBUG
	printf("OS initialized!\n");
     a6c:	8b ec       	ldi	r24, 0xCB	; 203
     a6e:	93 e0       	ldi	r25, 0x03	; 3
     a70:	22 c5       	rjmp	.+2628   	; 0x14b6 <puts>
     a72:	08 95       	ret

00000a74 <OS_Start>:
	#endif
}

/* This function starts the RTOS after creating a few tasks.*/
void OS_Start()
{
     a74:	2f 92       	push	r2
     a76:	3f 92       	push	r3
     a78:	4f 92       	push	r4
     a7a:	5f 92       	push	r5
     a7c:	6f 92       	push	r6
     a7e:	7f 92       	push	r7
     a80:	8f 92       	push	r8
     a82:	9f 92       	push	r9
     a84:	af 92       	push	r10
     a86:	bf 92       	push	r11
     a88:	cf 92       	push	r12
     a8a:	df 92       	push	r13
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	00 d0       	rcall	.+0      	; 0xa9a <OS_Start+0x26>
     a9a:	00 d0       	rcall	.+0      	; 0xa9c <OS_Start+0x28>
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
	if ( (! KernelActive) && (Task_Count > 0))
     aa0:	80 91 64 1c 	lds	r24, 0x1C64
     aa4:	90 91 65 1c 	lds	r25, 0x1C65
     aa8:	89 2b       	or	r24, r25
     aaa:	09 f0       	breq	.+2      	; 0xaae <OS_Start+0x3a>
     aac:	83 c3       	rjmp	.+1798   	; 0x11b4 <OS_Start+0x740>
     aae:	80 91 76 08 	lds	r24, 0x0876
     ab2:	90 91 77 08 	lds	r25, 0x0877
     ab6:	89 2b       	or	r24, r25
     ab8:	09 f4       	brne	.+2      	; 0xabc <OS_Start+0x48>
     aba:	7c c3       	rjmp	.+1784   	; 0x11b4 <OS_Start+0x740>
	{
		Disable_Interrupt();
     abc:	f8 94       	cli
		
		/* we may have to initialize the interrupt vector for Enter_Kernel() here. */
			/* here we go...  */
		KernelActive = 1;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	90 93 65 1c 	sts	0x1C65, r25
     ac6:	80 93 64 1c 	sts	0x1C64, r24
		
		/*Initialize and start Timer needed for sleep*/
		Timer_init();
     aca:	3e df       	rcall	.-388    	; 0x948 <Timer_init>
		
		#ifdef DEBUG
		printf("OS begins!\n");
     acc:	8b ed       	ldi	r24, 0xDB	; 219
     ace:	93 e0       	ldi	r25, 0x03	; 3
     ad0:	f2 d4       	rcall	.+2532   	; 0x14b6 <puts>
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() 
{
	Dispatch();	//Select an initial task to run
     ad2:	1b dd       	rcall	.-1482   	; 0x50a <Dispatch>
			//Does this need dispatch under any circumstances?
			break;
		   
			case YIELD:
			case NONE:					// NONE could be caused by a timer interrupt
			Cp->state = READY;
     ad4:	99 24       	eor	r9, r9
     ad6:	93 94       	inc	r9
		// M is locked more than once
		--(m->count);
	} else if (m->num_of_process > 0) {
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
     ad8:	41 2c       	mov	r4, r1
     ada:	d1 2c       	mov	r13, r1
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			}
		}
		//dequeue index i
		m->blocked_stack[i] = -1;
     adc:	22 24       	eor	r2, r2
     ade:	2a 94       	dec	r2
     ae0:	32 2c       	mov	r3, r2
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
     ae2:	66 24       	eor	r6, r6
     ae4:	63 94       	inc	r6
     ae6:	51 2c       	mov	r5, r1
{
	MUTEX_TYPE* m;
	// go through all mutex check if it owns a mutex
	int index;
	for (index=0; index<MAXMUTEX; index++) {
		if (Mutex[index].owner == Cp->pid) {
     ae8:	0f 2e       	mov	r0, r31
     aea:	fb e5       	ldi	r31, 0x5B	; 91
     aec:	cf 2e       	mov	r12, r31
     aee:	f0 2d       	mov	r31, r0
			// it owns a mutex unlock the mutex
			if (Mutex[index].num_of_process > 0) {
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
     af0:	84 2c       	mov	r8, r4
     af2:	7d 2c       	mov	r7, r13
	//After OS initialization, THIS WILL BE KERNEL'S MAIN LOOP!
	//NOTE: When another task makes a syscall and enters the loop, it's still in the RUNNING state!
	while(1) 
	{
		//Clears the process' request fields
		Cp->request = NONE;
     af4:	e0 91 6b 1c 	lds	r30, 0x1C6B
     af8:	f0 91 6c 1c 	lds	r31, 0x1C6C
     afc:	15 82       	std	Z+5, r1	; 0x05
		//Cp->request_arg is not reset, because task_sleep uses it to keep track of remaining ticks

		//Load the current task's stack pointer and switch to its context
		CurrentSp = Cp->sp;
     afe:	82 85       	ldd	r24, Z+10	; 0x0a
     b00:	93 85       	ldd	r25, Z+11	; 0x0b
     b02:	90 93 6a 1c 	sts	0x1C6A, r25
     b06:	80 93 69 1c 	sts	0x1C69, r24
		Exit_Kernel();
     b0a:	1b db       	rcall	.-2506   	; 0x142 <CSwitch>

		/* if this task makes a system call, it will return to here! */

		//Save the current task's stack pointer and proceed to handle its request
		Cp->sp = CurrentSp;
     b0c:	e0 91 6b 1c 	lds	r30, 0x1C6B
     b10:	f0 91 6c 1c 	lds	r31, 0x1C6C
     b14:	80 91 69 1c 	lds	r24, 0x1C69
     b18:	90 91 6a 1c 	lds	r25, 0x1C6A
     b1c:	93 87       	std	Z+11, r25	; 0x0b
     b1e:	82 87       	std	Z+10, r24	; 0x0a
		
		//Check if any timer ticks came in
		Kernel_Tick_Handler();
     b20:	7d dc       	rcall	.-1798   	; 0x41c <Kernel_Tick_Handler>

		switch(Cp->request)
     b22:	20 91 6b 1c 	lds	r18, 0x1C6B
     b26:	30 91 6c 1c 	lds	r19, 0x1C6C
     b2a:	d9 01       	movw	r26, r18
     b2c:	15 96       	adiw	r26, 0x05	; 5
     b2e:	8c 91       	ld	r24, X
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	8d 30       	cpi	r24, 0x0D	; 13
     b34:	91 05       	cpc	r25, r1
     b36:	08 f0       	brcs	.+2      	; 0xb3a <OS_Start+0xc6>
     b38:	39 c3       	rjmp	.+1650   	; 0x11ac <OS_Start+0x738>
     b3a:	fc 01       	movw	r30, r24
     b3c:	88 27       	eor	r24, r24
     b3e:	ee 58       	subi	r30, 0x8E	; 142
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	8f 4f       	sbci	r24, 0xFF	; 255
     b44:	9d c4       	rjmp	.+2362   	; 0x1480 <__tablejump2__>
		{
			case CREATE_T:
			Kernel_Create_Task(Cp->code, Cp->pri, Cp->arg);
     b46:	f9 01       	movw	r30, r18
     b48:	40 85       	ldd	r20, Z+8	; 0x08
     b4a:	51 85       	ldd	r21, Z+9	; 0x09
     b4c:	62 81       	ldd	r22, Z+2	; 0x02
     b4e:	e4 5f       	subi	r30, 0xF4	; 244
     b50:	fe 4f       	sbci	r31, 0xFE	; 254
     b52:	80 81       	ld	r24, Z
     b54:	91 81       	ldd	r25, Z+1	; 0x01
     b56:	6f dd       	rcall	.-1314   	; 0x636 <Kernel_Create_Task>
     b58:	cd cf       	rjmp	.-102    	; 0xaf4 <OS_Start+0x80>
		Cp->sp = CurrentSp;
		
		//Check if any timer ticks came in
		Kernel_Tick_Handler();

		switch(Cp->request)
     b5a:	e4 2c       	mov	r14, r4
     b5c:	fd 2c       	mov	r15, r13
			// it owns a mutex unlock the mutex
			if (Mutex[index].num_of_process > 0) {
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
				unsigned int temp_order = Mutex[index].total_num + 1;
				PRIORITY temp_pri = LOWEST_PRIORITY + 1;
     b5e:	0b e0       	ldi	r16, 0x0B	; 11
     b60:	fa 82       	std	Y+2, r15	; 0x02
     b62:	e9 82       	std	Y+1, r14	; 0x01
{
	MUTEX_TYPE* m;
	// go through all mutex check if it owns a mutex
	int index;
	for (index=0; index<MAXMUTEX; index++) {
		if (Mutex[index].owner == Cp->pid) {
     b64:	29 81       	ldd	r18, Y+1	; 0x01
     b66:	3a 81       	ldd	r19, Y+2	; 0x02
     b68:	c2 9e       	mul	r12, r18
     b6a:	f0 01       	movw	r30, r0
     b6c:	c3 9e       	mul	r12, r19
     b6e:	f0 0d       	add	r31, r0
     b70:	11 24       	eor	r1, r1
     b72:	e6 58       	subi	r30, 0x86	; 134
     b74:	f7 4f       	sbci	r31, 0xF7	; 247
     b76:	22 81       	ldd	r18, Z+2	; 0x02
     b78:	33 81       	ldd	r19, Z+3	; 0x03
     b7a:	e0 91 6b 1c 	lds	r30, 0x1C6B
     b7e:	f0 91 6c 1c 	lds	r31, 0x1C6C
     b82:	80 81       	ld	r24, Z
     b84:	91 81       	ldd	r25, Z+1	; 0x01
     b86:	28 17       	cp	r18, r24
     b88:	39 07       	cpc	r19, r25
     b8a:	09 f0       	breq	.+2      	; 0xb8e <OS_Start+0x11a>
     b8c:	a7 c0       	rjmp	.+334    	; 0xcdc <OS_Start+0x268>
			// it owns a mutex unlock the mutex
			if (Mutex[index].num_of_process > 0) {
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	9a 81       	ldd	r25, Y+2	; 0x02
     b92:	c8 9e       	mul	r12, r24
     b94:	f0 01       	movw	r30, r0
     b96:	c9 9e       	mul	r12, r25
     b98:	f0 0d       	add	r31, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	e0 53       	subi	r30, 0x30	; 48
     b9e:	f7 4f       	sbci	r31, 0xF7	; 247
     ba0:	80 81       	ld	r24, Z
     ba2:	91 81       	ldd	r25, Z+1	; 0x01
     ba4:	89 2b       	or	r24, r25
     ba6:	09 f4       	brne	.+2      	; 0xbaa <OS_Start+0x136>
     ba8:	8c c0       	rjmp	.+280    	; 0xcc2 <OS_Start+0x24e>
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
				unsigned int temp_order = Mutex[index].total_num + 1;
     baa:	a9 81       	ldd	r26, Y+1	; 0x01
     bac:	ba 81       	ldd	r27, Y+2	; 0x02
     bae:	ca 9e       	mul	r12, r26
     bb0:	f0 01       	movw	r30, r0
     bb2:	cb 9e       	mul	r12, r27
     bb4:	f0 0d       	add	r31, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	ee 52       	subi	r30, 0x2E	; 46
     bba:	f7 4f       	sbci	r31, 0xF7	; 247
     bbc:	60 81       	ld	r22, Z
     bbe:	71 81       	ldd	r23, Z+1	; 0x01
     bc0:	6f 5f       	subi	r22, 0xFF	; 255
     bc2:	7f 4f       	sbci	r23, 0xFF	; 255
	for (index=0; index<MAXMUTEX; index++) {
		if (Mutex[index].owner == Cp->pid) {
			// it owns a mutex unlock the mutex
			if (Mutex[index].num_of_process > 0) {
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
     bc4:	e8 2c       	mov	r14, r8
     bc6:	f7 2c       	mov	r15, r7
				unsigned int temp_order = Mutex[index].total_num + 1;
				PRIORITY temp_pri = LOWEST_PRIORITY + 1;
     bc8:	10 2f       	mov	r17, r16
				int i;
				for (i=0; i<MAXTHREAD; i++) {
     bca:	28 2d       	mov	r18, r8
     bcc:	37 2d       	mov	r19, r7
					if (Mutex[index].priority_stack[i] < temp_pri) {
     bce:	ca 9e       	mul	r12, r26
     bd0:	a0 01       	movw	r20, r0
     bd2:	cb 9e       	mul	r12, r27
     bd4:	50 0d       	add	r21, r0
     bd6:	11 24       	eor	r1, r1
     bd8:	ca 01       	movw	r24, r20
     bda:	86 58       	subi	r24, 0x86	; 134
     bdc:	97 4f       	sbci	r25, 0xF7	; 247
     bde:	fc 01       	movw	r30, r24
     be0:	e2 0f       	add	r30, r18
     be2:	f3 1f       	adc	r31, r19
     be4:	e6 a1       	ldd	r30, Z+38	; 0x26
     be6:	e1 17       	cp	r30, r17
     be8:	c8 f4       	brcc	.+50     	; 0xc1c <OS_Start+0x1a8>
						// found a task with higher priority
						temp_pri = Mutex[index].priority_stack[i];
     bea:	fc 01       	movw	r30, r24
     bec:	e2 0f       	add	r30, r18
     bee:	f3 1f       	adc	r31, r19
     bf0:	16 a1       	ldd	r17, Z+38	; 0x26
						temp_order = Mutex[index].order[i];
     bf2:	f9 01       	movw	r30, r18
     bf4:	7b 96       	adiw	r30, 0x1b	; 27
     bf6:	ee 0f       	add	r30, r30
     bf8:	ff 1f       	adc	r31, r31
     bfa:	e4 0f       	add	r30, r20
     bfc:	f5 1f       	adc	r31, r21
     bfe:	e6 58       	subi	r30, 0x86	; 134
     c00:	f7 4f       	sbci	r31, 0xF7	; 247
     c02:	60 81       	ld	r22, Z
     c04:	71 81       	ldd	r23, Z+1	; 0x01
						p_dequeue = Mutex[index].blocked_stack[i];
     c06:	f9 01       	movw	r30, r18
     c08:	33 96       	adiw	r30, 0x03	; 3
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	e4 0f       	add	r30, r20
     c10:	f5 1f       	adc	r31, r21
     c12:	e6 58       	subi	r30, 0x86	; 134
     c14:	f7 4f       	sbci	r31, 0xF7	; 247
     c16:	e0 80       	ld	r14, Z
     c18:	f1 80       	ldd	r15, Z+1	; 0x01
     c1a:	28 c0       	rjmp	.+80     	; 0xc6c <OS_Start+0x1f8>
						} else if (Mutex[index].priority_stack[i] == temp_pri && temp_order < Mutex[index].order[i]) {
     c1c:	fc 01       	movw	r30, r24
     c1e:	e2 0f       	add	r30, r18
     c20:	f3 1f       	adc	r31, r19
     c22:	e6 a1       	ldd	r30, Z+38	; 0x26
     c24:	1e 13       	cpse	r17, r30
     c26:	22 c0       	rjmp	.+68     	; 0xc6c <OS_Start+0x1f8>
     c28:	f9 01       	movw	r30, r18
     c2a:	7b 96       	adiw	r30, 0x1b	; 27
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	e4 0f       	add	r30, r20
     c32:	f5 1f       	adc	r31, r21
     c34:	e6 58       	subi	r30, 0x86	; 134
     c36:	f7 4f       	sbci	r31, 0xF7	; 247
     c38:	01 90       	ld	r0, Z+
     c3a:	f0 81       	ld	r31, Z
     c3c:	e0 2d       	mov	r30, r0
     c3e:	6e 17       	cp	r22, r30
     c40:	7f 07       	cpc	r23, r31
     c42:	a0 f4       	brcc	.+40     	; 0xc6c <OS_Start+0x1f8>
						// same priority and came into the queue earlier
						temp_order = Mutex[index].order[i];
     c44:	f9 01       	movw	r30, r18
     c46:	7b 96       	adiw	r30, 0x1b	; 27
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	e4 0f       	add	r30, r20
     c4e:	f5 1f       	adc	r31, r21
     c50:	e6 58       	subi	r30, 0x86	; 134
     c52:	f7 4f       	sbci	r31, 0xF7	; 247
     c54:	60 81       	ld	r22, Z
     c56:	71 81       	ldd	r23, Z+1	; 0x01
						p_dequeue = Mutex[index].blocked_stack[i];
     c58:	f9 01       	movw	r30, r18
     c5a:	33 96       	adiw	r30, 0x03	; 3
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	e4 0f       	add	r30, r20
     c62:	f5 1f       	adc	r31, r21
     c64:	e6 58       	subi	r30, 0x86	; 134
     c66:	f7 4f       	sbci	r31, 0xF7	; 247
     c68:	e0 80       	ld	r14, Z
     c6a:	f1 80       	ldd	r15, Z+1	; 0x01
				// if there are other process waiting on the mutex
				PID p_dequeue = 0;
				unsigned int temp_order = Mutex[index].total_num + 1;
				PRIORITY temp_pri = LOWEST_PRIORITY + 1;
				int i;
				for (i=0; i<MAXTHREAD; i++) {
     c6c:	2f 5f       	subi	r18, 0xFF	; 255
     c6e:	3f 4f       	sbci	r19, 0xFF	; 255
     c70:	20 31       	cpi	r18, 0x10	; 16
     c72:	31 05       	cpc	r19, r1
     c74:	09 f0       	breq	.+2      	; 0xc78 <OS_Start+0x204>
     c76:	b3 cf       	rjmp	.-154    	; 0xbde <OS_Start+0x16a>
     c78:	ba 83       	std	Y+2, r27	; 0x02
     c7a:	a9 83       	std	Y+1, r26	; 0x01
						temp_order = Mutex[index].order[i];
						p_dequeue = Mutex[index].blocked_stack[i];
					}
				}
				//dequeue index i
				Mutex[index].blocked_stack[i] = -1;
     c7c:	ca 9e       	mul	r12, r26
     c7e:	c0 01       	movw	r24, r0
     c80:	cb 9e       	mul	r12, r27
     c82:	90 0d       	add	r25, r0
     c84:	11 24       	eor	r1, r1
     c86:	fc 01       	movw	r30, r24
     c88:	e6 58       	subi	r30, 0x86	; 134
     c8a:	f7 4f       	sbci	r31, 0xF7	; 247
     c8c:	5f 01       	movw	r10, r30
     c8e:	37 a2       	std	Z+39, r3	; 0x27
     c90:	26 a2       	std	Z+38, r2	; 0x26
				Mutex[index].priority_stack[i] = LOWEST_PRIORITY+1;
     c92:	06 ab       	std	Z+54, r16	; 0x36
				Mutex[index].order[i] = 0;
     c94:	ea 5a       	subi	r30, 0xAA	; 170
     c96:	ff 4f       	sbci	r31, 0xFF	; 255
     c98:	11 82       	std	Z+1, r1	; 0x01
     c9a:	10 82       	st	Z, r1
				--(Mutex[index].num_of_process);
     c9c:	80 81       	ld	r24, Z
     c9e:	91 81       	ldd	r25, Z+1	; 0x01
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	91 83       	std	Z+1, r25	; 0x01
     ca4:	80 83       	st	Z, r24
				PD* target_p = findProcessByPID(p_dequeue);
     ca6:	c7 01       	movw	r24, r14
     ca8:	f6 da       	rcall	.-2580   	; 0x296 <findProcessByPID>
				Mutex[index].owner = p_dequeue;
     caa:	d5 01       	movw	r26, r10
     cac:	13 96       	adiw	r26, 0x03	; 3
     cae:	fc 92       	st	X, r15
     cb0:	ee 92       	st	-X, r14
     cb2:	12 97       	sbiw	r26, 0x02	; 2
				Mutex[index].own_pri = temp_pri;			//keep track of new owner's priority;
     cb4:	f5 01       	movw	r30, r10
     cb6:	e6 5a       	subi	r30, 0xA6	; 166
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	10 83       	st	Z, r17
				target_p->state = READY;
     cbc:	fc 01       	movw	r30, r24
     cbe:	93 82       	std	Z+3, r9	; 0x03
     cc0:	0d c0       	rjmp	.+26     	; 0xcdc <OS_Start+0x268>
			} else {
				Mutex[index].owner = 0;
     cc2:	29 81       	ldd	r18, Y+1	; 0x01
     cc4:	3a 81       	ldd	r19, Y+2	; 0x02
     cc6:	c2 9e       	mul	r12, r18
     cc8:	f0 01       	movw	r30, r0
     cca:	c3 9e       	mul	r12, r19
     ccc:	f0 0d       	add	r31, r0
     cce:	11 24       	eor	r1, r1
     cd0:	e6 58       	subi	r30, 0x86	; 134
     cd2:	f7 4f       	sbci	r31, 0xF7	; 247
     cd4:	13 82       	std	Z+3, r1	; 0x03
     cd6:	12 82       	std	Z+2, r1	; 0x02
				Mutex[index].count = 0;
     cd8:	15 82       	std	Z+5, r1	; 0x05
     cda:	14 82       	std	Z+4, r1	; 0x04
static void Kernel_Terminate_Task(void)
{
	MUTEX_TYPE* m;
	// go through all mutex check if it owns a mutex
	int index;
	for (index=0; index<MAXMUTEX; index++) {
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	9a 81       	ldd	r25, Y+2	; 0x02
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	9a 83       	std	Y+2, r25	; 0x02
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	08 97       	sbiw	r24, 0x08	; 8
     ce8:	09 f0       	breq	.+2      	; 0xcec <OS_Start+0x278>
     cea:	3c cf       	rjmp	.-392    	; 0xb64 <OS_Start+0xf0>
				Mutex[index].owner = 0;
				Mutex[index].count = 0;
			}
		}
	}
	Cp->state = DEAD;			//Mark the task as DEAD so its resources will be recycled later when new tasks are created
     cec:	e0 91 6b 1c 	lds	r30, 0x1C6B
     cf0:	f0 91 6c 1c 	lds	r31, 0x1C6C
     cf4:	13 82       	std	Z+3, r1	; 0x03
	--Task_Count;
     cf6:	80 91 76 08 	lds	r24, 0x0876
     cfa:	90 91 77 08 	lds	r25, 0x0877
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	90 93 77 08 	sts	0x0877, r25
     d04:	80 93 76 08 	sts	0x0876, r24
			Kernel_Create_Task(Cp->code, Cp->pri, Cp->arg);
			break;
			
			case TERMINATE:
			Kernel_Terminate_Task();
			Dispatch();					//Dispatch is only needed if the syscall requires running a different task  after it's done
     d08:	00 dc       	rcall	.-2048   	; 0x50a <Dispatch>
     d0a:	f4 ce       	rjmp	.-536    	; 0xaf4 <OS_Start+0x80>

/*TODO: Check for mutex ownership. If PID owns any mutex, ignore this request*/
static void Kernel_Suspend_Task() 
{
	//Finds the process descriptor for the specified PID
	PD* p = findProcessByPID(Cp->request_arg);
     d0c:	d9 01       	movw	r26, r18
     d0e:	16 96       	adiw	r26, 0x06	; 6
     d10:	8d 91       	ld	r24, X+
     d12:	9c 91       	ld	r25, X
     d14:	17 97       	sbiw	r26, 0x07	; 7
     d16:	bf da       	rcall	.-2690   	; 0x296 <findProcessByPID>
     d18:	fc 01       	movw	r30, r24
	
	//Ensure the PID specified in the PD currently exists in the global process list
	if(p == NULL)
     d1a:	89 2b       	or	r24, r25
     d1c:	39 f4       	brne	.+14     	; 0xd2c <OS_Start+0x2b8>
	{
		#ifdef DEBUG
			printf("Kernel_Suspend_Task: PID not found in global process list!\n");
     d1e:	86 ee       	ldi	r24, 0xE6	; 230
     d20:	93 e0       	ldi	r25, 0x03	; 3
     d22:	c9 d3       	rcall	.+1938   	; 0x14b6 <puts>
		#endif
		err = PID_NOT_FOUND_ERR;
     d24:	85 e0       	ldi	r24, 0x05	; 5
     d26:	80 93 68 1c 	sts	0x1C68, r24
     d2a:	e4 ce       	rjmp	.-568    	; 0xaf4 <OS_Start+0x80>
		return;
	}
	
	//Ensure the task is not in a unsuspendable state
	if(p->state == DEAD || p->state == SUSPENDED)
     d2c:	83 81       	ldd	r24, Z+3	; 0x03
     d2e:	88 23       	and	r24, r24
     d30:	11 f0       	breq	.+4      	; 0xd36 <OS_Start+0x2c2>
     d32:	83 30       	cpi	r24, 0x03	; 3
     d34:	79 f4       	brne	.+30     	; 0xd54 <OS_Start+0x2e0>
	{
		#ifdef DEBUG
		printf("Kernel_Suspend_Task: Trying to suspend a task that's in an unsuspendable state %d!\n", p->state);
     d36:	1f 92       	push	r1
     d38:	8f 93       	push	r24
     d3a:	a1 e2       	ldi	r26, 0x21	; 33
     d3c:	b4 e0       	ldi	r27, 0x04	; 4
     d3e:	bf 93       	push	r27
     d40:	af 93       	push	r26
     d42:	a6 d3       	rcall	.+1868   	; 0x1490 <printf>
		#endif
		err = SUSPEND_NONRUNNING_TASK_ERR;
     d44:	86 e0       	ldi	r24, 0x06	; 6
     d46:	80 93 68 1c 	sts	0x1C68, r24
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	d0 ce       	rjmp	.-608    	; 0xaf4 <OS_Start+0x80>
		return;
	}
	
	//Save its current state and set it to SUSPENDED
	p->last_state = p->state;
     d54:	84 83       	std	Z+4, r24	; 0x04
	p->state = SUSPENDED;
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	83 83       	std	Z+3, r24	; 0x03
	err = NO_ERR;
     d5a:	10 92 68 1c 	sts	0x1C68, r1
     d5e:	ca ce       	rjmp	.-620    	; 0xaf4 <OS_Start+0x80>
}

static void Kernel_Resume_Task()
{
	//Finds the process descriptor for the specified PID
	PD* p = findProcessByPID(Cp->request_arg);
     d60:	d9 01       	movw	r26, r18
     d62:	16 96       	adiw	r26, 0x06	; 6
     d64:	8d 91       	ld	r24, X+
     d66:	9c 91       	ld	r25, X
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	95 da       	rcall	.-2774   	; 0x296 <findProcessByPID>
     d6c:	8c 01       	movw	r16, r24
	
	//Ensure the PID specified in the PD currently exists in the global process list
	if(p == NULL)
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	39 f4       	brne	.+14     	; 0xd80 <OS_Start+0x30c>
	{
		#ifdef DEBUG
			printf("Kernel_Resume_Task: PID not found in global process list!\n");
     d72:	85 e7       	ldi	r24, 0x75	; 117
     d74:	94 e0       	ldi	r25, 0x04	; 4
     d76:	9f d3       	rcall	.+1854   	; 0x14b6 <puts>
		#endif
		err = PID_NOT_FOUND_ERR;
     d78:	85 e0       	ldi	r24, 0x05	; 5
     d7a:	80 93 68 1c 	sts	0x1C68, r24
     d7e:	ba ce       	rjmp	.-652    	; 0xaf4 <OS_Start+0x80>
		return;
	}
	
	//Ensure the task is currently in the SUSPENDED state
	if(p->state != SUSPENDED)
     d80:	fc 01       	movw	r30, r24
     d82:	83 81       	ldd	r24, Z+3	; 0x03
     d84:	83 30       	cpi	r24, 0x03	; 3
     d86:	a9 f0       	breq	.+42     	; 0xdb2 <OS_Start+0x33e>
	{
		#ifdef DEBUG
		printf("Kernel_Resume_Task: Trying to resume a task that's not SUSPENDED!\n");
     d88:	8f ea       	ldi	r24, 0xAF	; 175
     d8a:	94 e0       	ldi	r25, 0x04	; 4
     d8c:	94 d3       	rcall	.+1832   	; 0x14b6 <puts>
		printf("CURRENT STATE: %d\n", p->state);
     d8e:	d8 01       	movw	r26, r16
     d90:	13 96       	adiw	r26, 0x03	; 3
     d92:	8c 91       	ld	r24, X
     d94:	1f 92       	push	r1
     d96:	8f 93       	push	r24
     d98:	a1 ef       	ldi	r26, 0xF1	; 241
     d9a:	b4 e0       	ldi	r27, 0x04	; 4
     d9c:	bf 93       	push	r27
     d9e:	af 93       	push	r26
     da0:	77 d3       	rcall	.+1774   	; 0x1490 <printf>
		#endif
		err = RESUME_NONSUSPENDED_TASK_ERR;
     da2:	87 e0       	ldi	r24, 0x07	; 7
     da4:	80 93 68 1c 	sts	0x1C68, r24
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	a1 ce       	rjmp	.-702    	; 0xaf4 <OS_Start+0x80>
		return;
	}
	
	//Restore the previous state of the task
	p->state = p->last_state;
     db2:	84 81       	ldd	r24, Z+4	; 0x04
     db4:	83 83       	std	Z+3, r24	; 0x03
	p->last_state = SUSPENDED;			
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	84 83       	std	Z+4, r24	; 0x04
	err = NO_ERR;
     dba:	10 92 68 1c 	sts	0x1C68, r1
     dbe:	9a ce       	rjmp	.-716    	; 0xaf4 <OS_Start+0x80>
			case RESUME:
			Kernel_Resume_Task();
			break;
			
			case SLEEP:
			Cp->state = SLEEPING;
     dc0:	84 e0       	ldi	r24, 0x04	; 4
     dc2:	f9 01       	movw	r30, r18
     dc4:	83 83       	std	Z+3, r24	; 0x03
			Dispatch();					
     dc6:	a1 db       	rcall	.-2238   	; 0x50a <Dispatch>
     dc8:	95 ce       	rjmp	.-726    	; 0xaf4 <OS_Start+0x80>
			break;
			
			case CREATE_E:
			Kernel_Create_Event();
     dca:	cb dc       	rcall	.-1642   	; 0x762 <Kernel_Create_Event>
     dcc:	93 ce       	rjmp	.-730    	; 0xaf4 <OS_Start+0x80>
	#endif
}

static void Kernel_Wait_Event(void)
{
	EVENT_TYPE* e = findEventByEventID(Cp->request_arg);
     dce:	d9 01       	movw	r26, r18
     dd0:	16 96       	adiw	r26, 0x06	; 6
     dd2:	8d 91       	ld	r24, X+
     dd4:	9c 91       	ld	r25, X
     dd6:	17 97       	sbiw	r26, 0x07	; 7
     dd8:	94 da       	rcall	.-2776   	; 0x302 <findEventByEventID>
     dda:	fc 01       	movw	r30, r24
	
	if(e == NULL)
     ddc:	89 2b       	or	r24, r25
     dde:	21 f4       	brne	.+8      	; 0xde8 <OS_Start+0x374>
	{
		#ifdef DEBUG
		printf("Kernel_Wait_Event: Error finding requested event!\n");
     de0:	84 e0       	ldi	r24, 0x04	; 4
     de2:	95 e0       	ldi	r25, 0x05	; 5
     de4:	68 d3       	rcall	.+1744   	; 0x14b6 <puts>
     de6:	3e c0       	rjmp	.+124    	; 0xe64 <OS_Start+0x3f0>
		#endif
		return;
	}
	
	//Ensure no one else is waiting for this same event
	if(e->owner > 0 && e->owner != Cp->pid)
     de8:	82 81       	ldd	r24, Z+2	; 0x02
     dea:	93 81       	ldd	r25, Z+3	; 0x03
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	c1 f0       	breq	.+48     	; 0xe20 <OS_Start+0x3ac>
     df0:	a0 91 6b 1c 	lds	r26, 0x1C6B
     df4:	b0 91 6c 1c 	lds	r27, 0x1C6C
     df8:	2d 91       	ld	r18, X+
     dfa:	3c 91       	ld	r19, X
     dfc:	82 17       	cp	r24, r18
     dfe:	93 07       	cpc	r25, r19
     e00:	79 f0       	breq	.+30     	; 0xe20 <OS_Start+0x3ac>
	{
		#ifdef DEBUG
			printf("Kernel_Wait_Event: The requested event is already being waited by PID %d\n", e->owner);
     e02:	9f 93       	push	r25
     e04:	8f 93       	push	r24
     e06:	a6 e3       	ldi	r26, 0x36	; 54
     e08:	b5 e0       	ldi	r27, 0x05	; 5
     e0a:	bf 93       	push	r27
     e0c:	af 93       	push	r26
     e0e:	40 d3       	rcall	.+1664   	; 0x1490 <printf>
		#endif
		err = EVENT_NOT_FOUND_ERR;
     e10:	89 e0       	ldi	r24, 0x09	; 9
     e12:	80 93 68 1c 	sts	0x1C68, r24
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	22 c0       	rjmp	.+68     	; 0xe64 <OS_Start+0x3f0>
		return;
	}
	
	//Has this event been signaled already? If yes, "consume" event and keep executing the same task
	if(e->count > 0)
     e20:	84 81       	ldd	r24, Z+4	; 0x04
     e22:	95 81       	ldd	r25, Z+5	; 0x05
     e24:	89 2b       	or	r24, r25
     e26:	81 f0       	breq	.+32     	; 0xe48 <OS_Start+0x3d4>
	{
		e->owner = 0;
     e28:	13 82       	std	Z+3, r1	; 0x03
     e2a:	12 82       	std	Z+2, r1	; 0x02
		e->count = 0;
     e2c:	15 82       	std	Z+5, r1	; 0x05
     e2e:	14 82       	std	Z+4, r1	; 0x04
		e->id = 0;
     e30:	11 82       	std	Z+1, r1	; 0x01
     e32:	10 82       	st	Z, r1
		--Event_Count;	
     e34:	80 91 74 08 	lds	r24, 0x0874
     e38:	90 91 75 08 	lds	r25, 0x0875
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	90 93 75 08 	sts	0x0875, r25
     e42:	80 93 74 08 	sts	0x0874, r24
     e46:	0e c0       	rjmp	.+28     	; 0xe64 <OS_Start+0x3f0>
		return;
	}
	
	//Set the owner of the requested event to the current task and put it into the WAIT EVENT state
	e->owner = Cp->pid;
     e48:	a0 91 6b 1c 	lds	r26, 0x1C6B
     e4c:	b0 91 6c 1c 	lds	r27, 0x1C6C
     e50:	8d 91       	ld	r24, X+
     e52:	9c 91       	ld	r25, X
     e54:	11 97       	sbiw	r26, 0x01	; 1
     e56:	93 83       	std	Z+3, r25	; 0x03
     e58:	82 83       	std	Z+2, r24	; 0x02
	Cp->state = WAIT_EVENT;
     e5a:	85 e0       	ldi	r24, 0x05	; 5
     e5c:	13 96       	adiw	r26, 0x03	; 3
     e5e:	8c 93       	st	X, r24
	err = NO_ERR;
     e60:	10 92 68 1c 	sts	0x1C68, r1
			Kernel_Create_Event();
			break;
			
			case WAIT_E:
			Kernel_Wait_Event();	
			if(Cp->state != RUNNING) Dispatch();	//Don't dispatch to a different task if the event is already siganlled
     e64:	e0 91 6b 1c 	lds	r30, 0x1C6B
     e68:	f0 91 6c 1c 	lds	r31, 0x1C6C
     e6c:	83 81       	ldd	r24, Z+3	; 0x03
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	09 f4       	brne	.+2      	; 0xe74 <OS_Start+0x400>
     e72:	40 ce       	rjmp	.-896    	; 0xaf4 <OS_Start+0x80>
     e74:	4a db       	rcall	.-2412   	; 0x50a <Dispatch>
     e76:	3e ce       	rjmp	.-900    	; 0xaf4 <OS_Start+0x80>
	err = NO_ERR;
}

static void Kernel_Signal_Event(void)
{
	EVENT_TYPE* e = findEventByEventID(Cp->request_arg);
     e78:	d9 01       	movw	r26, r18
     e7a:	16 96       	adiw	r26, 0x06	; 6
     e7c:	8d 91       	ld	r24, X+
     e7e:	9c 91       	ld	r25, X
     e80:	17 97       	sbiw	r26, 0x07	; 7
     e82:	3f da       	rcall	.-2946   	; 0x302 <findEventByEventID>
     e84:	8c 01       	movw	r16, r24
	PD *e_owner;
	
	if(e == NULL)
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	21 f4       	brne	.+8      	; 0xe92 <OS_Start+0x41e>
	{
		#ifdef DEBUG
		printf("Kernel_Signal_Event: Error finding requested event!\n");
     e8a:	80 e8       	ldi	r24, 0x80	; 128
     e8c:	95 e0       	ldi	r25, 0x05	; 5
     e8e:	13 d3       	rcall	.+1574   	; 0x14b6 <puts>
     e90:	39 c0       	rjmp	.+114    	; 0xf04 <OS_Start+0x490>
		#endif
		return;
	}
	
	//Increment the event counter if needed 
	if(MAX_EVENT_SIG_MISS == 0 || e->count < MAX_EVENT_SIG_MISS)
     e92:	fc 01       	movw	r30, r24
     e94:	84 81       	ldd	r24, Z+4	; 0x04
     e96:	95 81       	ldd	r25, Z+5	; 0x05
     e98:	89 2b       	or	r24, r25
     e9a:	11 f4       	brne	.+4      	; 0xea0 <OS_Start+0x42c>
		e->count++;
     e9c:	64 82       	std	Z+4, r6	; 0x04
     e9e:	55 82       	std	Z+5, r5	; 0x05
	
	//If the event is unowned, return
	if(e->owner == 0)
     ea0:	d8 01       	movw	r26, r16
     ea2:	12 96       	adiw	r26, 0x02	; 2
     ea4:	8d 91       	ld	r24, X+
     ea6:	9c 91       	ld	r25, X
     ea8:	13 97       	sbiw	r26, 0x03	; 3
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	39 f4       	brne	.+14     	; 0xebc <OS_Start+0x448>
	{
		#ifdef DEBUG
		printf("Kernel_Signal_Event: *WARNING* The requested event is not being waited by anyone!\n");
     eae:	84 eb       	ldi	r24, 0xB4	; 180
     eb0:	95 e0       	ldi	r25, 0x05	; 5
     eb2:	01 d3       	rcall	.+1538   	; 0x14b6 <puts>
		#endif
		err = SIGNAL_UNOWNED_EVENT_ERR;
     eb4:	8b e0       	ldi	r24, 0x0B	; 11
     eb6:	80 93 68 1c 	sts	0x1C68, r24
     eba:	24 c0       	rjmp	.+72     	; 0xf04 <OS_Start+0x490>
		return;
	}
	
	//Fetch the owner's PD and ensure it's still valid
	e_owner = findProcessByPID(e->owner);
     ebc:	ec d9       	rcall	.-3112   	; 0x296 <findProcessByPID>
	if(e_owner == NULL)
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	39 f4       	brne	.+14     	; 0xed0 <OS_Start+0x45c>
	{
		#ifdef DEBUG
		printf("Kernel_Signal_Event: Event owner's PID not found in global process list!\n");
     ec2:	86 e0       	ldi	r24, 0x06	; 6
     ec4:	96 e0       	ldi	r25, 0x06	; 6
     ec6:	f7 d2       	rcall	.+1518   	; 0x14b6 <puts>
		#endif
		err = PID_NOT_FOUND_ERR;
     ec8:	85 e0       	ldi	r24, 0x05	; 5
     eca:	80 93 68 1c 	sts	0x1C68, r24
     ece:	1a c0       	rjmp	.+52     	; 0xf04 <OS_Start+0x490>
		return;
	}
	
	//Wake up the owner of the event by setting its state to READY if it's active. The event is "consumed"
	if(e_owner->state == WAIT_EVENT)
     ed0:	fc 01       	movw	r30, r24
     ed2:	23 81       	ldd	r18, Z+3	; 0x03
     ed4:	25 30       	cpi	r18, 0x05	; 5
     ed6:	b1 f4       	brne	.+44     	; 0xf04 <OS_Start+0x490>
	{
		e->owner = 0;
     ed8:	d8 01       	movw	r26, r16
     eda:	13 96       	adiw	r26, 0x03	; 3
     edc:	1c 92       	st	X, r1
     ede:	1e 92       	st	-X, r1
     ee0:	12 97       	sbiw	r26, 0x02	; 2
		e->count = 0;
     ee2:	15 96       	adiw	r26, 0x05	; 5
     ee4:	1c 92       	st	X, r1
     ee6:	1e 92       	st	-X, r1
     ee8:	14 97       	sbiw	r26, 0x04	; 4
		e->id = 0;
     eea:	1d 92       	st	X+, r1
     eec:	1c 92       	st	X, r1
		--Event_Count;
     eee:	20 91 74 08 	lds	r18, 0x0874
     ef2:	30 91 75 08 	lds	r19, 0x0875
     ef6:	21 50       	subi	r18, 0x01	; 1
     ef8:	31 09       	sbc	r19, r1
     efa:	30 93 75 08 	sts	0x0875, r19
     efe:	20 93 74 08 	sts	0x0874, r18
		e_owner->state = READY;
     f02:	93 82       	std	Z+3, r9	; 0x03
			if(Cp->state != RUNNING) Dispatch();	//Don't dispatch to a different task if the event is already siganlled
			break;
			
			case SIGNAL_E:
			Kernel_Signal_Event();
			Dispatch();
     f04:	02 db       	rcall	.-2556   	; 0x50a <Dispatch>
     f06:	f6 cd       	rjmp	.-1044   	; 0xaf4 <OS_Start+0x80>
			break;
			
			case CREATE_M:
			Kernel_Create_Mutex();
     f08:	8b dc       	rcall	.-1770   	; 0x820 <Kernel_Create_Mutex>
     f0a:	f4 cd       	rjmp	.-1048   	; 0xaf4 <OS_Start+0x80>

static void Dispatch();

static void Kernel_Lock_Mutex(void)
{
	MUTEX_TYPE* m = findMutexByMutexID(Cp->request_arg);
     f0c:	f9 01       	movw	r30, r18
     f0e:	86 81       	ldd	r24, Z+6	; 0x06
     f10:	97 81       	ldd	r25, Z+7	; 0x07
     f12:	33 da       	rcall	.-2970   	; 0x37a <findMutexByMutexID>
     f14:	8c 01       	movw	r16, r24
	PD *m_owner = findProcessByPID(m->owner);
     f16:	dc 01       	movw	r26, r24
     f18:	12 96       	adiw	r26, 0x02	; 2
     f1a:	8d 91       	ld	r24, X+
     f1c:	9c 91       	ld	r25, X
     f1e:	13 97       	sbiw	r26, 0x03	; 3
     f20:	ba d9       	rcall	.-3212   	; 0x296 <findProcessByPID>
	
	if(m == NULL)
     f22:	01 15       	cp	r16, r1
     f24:	11 05       	cpc	r17, r1
     f26:	21 f4       	brne	.+8      	; 0xf30 <OS_Start+0x4bc>
	{
		#ifdef DEBUG
		printf("Kernel_Lock_Mutex: Error finding requested mutex!\n");
     f28:	8f e4       	ldi	r24, 0x4F	; 79
     f2a:	96 e0       	ldi	r25, 0x06	; 6
     f2c:	c4 d2       	rcall	.+1416   	; 0x14b6 <puts>
     f2e:	e2 cd       	rjmp	.-1084   	; 0xaf4 <OS_Start+0x80>
		#endif
		return;
	}
	
	// if mutex is free
	if(m->owner == 0)
     f30:	f8 01       	movw	r30, r16
     f32:	22 81       	ldd	r18, Z+2	; 0x02
     f34:	33 81       	ldd	r19, Z+3	; 0x03
     f36:	21 15       	cp	r18, r1
     f38:	31 05       	cpc	r19, r1
     f3a:	b1 f4       	brne	.+44     	; 0xf68 <OS_Start+0x4f4>
	{
		m->owner = Cp->pid;
     f3c:	e0 91 6b 1c 	lds	r30, 0x1C6B
     f40:	f0 91 6c 1c 	lds	r31, 0x1C6C
     f44:	80 81       	ld	r24, Z
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	d8 01       	movw	r26, r16
     f4a:	13 96       	adiw	r26, 0x03	; 3
     f4c:	9c 93       	st	X, r25
     f4e:	8e 93       	st	-X, r24
     f50:	12 97       	sbiw	r26, 0x02	; 2
		m->count = 1;
     f52:	14 96       	adiw	r26, 0x04	; 4
     f54:	6c 92       	st	X, r6
     f56:	14 97       	sbiw	r26, 0x04	; 4
     f58:	15 96       	adiw	r26, 0x05	; 5
     f5a:	5c 92       	st	X, r5
		m->own_pri = Cp->pri;				// keep track of the original priority of the owner
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	f8 01       	movw	r30, r16
     f60:	e6 5a       	subi	r30, 0xA6	; 166
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	80 83       	st	Z, r24
     f66:	c6 cd       	rjmp	.-1140   	; 0xaf4 <OS_Start+0x80>
		return;
	} else if (m->owner == Cp->pid) {
     f68:	a0 91 6b 1c 	lds	r26, 0x1C6B
     f6c:	b0 91 6c 1c 	lds	r27, 0x1C6C
     f70:	4d 91       	ld	r20, X+
     f72:	5c 91       	ld	r21, X
     f74:	11 97       	sbiw	r26, 0x01	; 1
     f76:	24 17       	cp	r18, r20
     f78:	35 07       	cpc	r19, r21
     f7a:	39 f4       	brne	.+14     	; 0xf8a <OS_Start+0x516>
		// if it has locked by the current process
		++(m->count);
     f7c:	f8 01       	movw	r30, r16
     f7e:	84 81       	ldd	r24, Z+4	; 0x04
     f80:	95 81       	ldd	r25, Z+5	; 0x05
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	95 83       	std	Z+5, r25	; 0x05
     f86:	84 83       	std	Z+4, r24	; 0x04
     f88:	b5 cd       	rjmp	.-1174   	; 0xaf4 <OS_Start+0x80>
		return;
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
     f8a:	26 e0       	ldi	r18, 0x06	; 6
     f8c:	13 96       	adiw	r26, 0x03	; 3
     f8e:	2c 93       	st	X, r18
     f90:	13 97       	sbiw	r26, 0x03	; 3
		//enqueue cp to stack
		++(m->num_of_process);
     f92:	f8 01       	movw	r30, r16
     f94:	ea 5a       	subi	r30, 0xAA	; 170
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	20 81       	ld	r18, Z
     f9a:	31 81       	ldd	r19, Z+1	; 0x01
     f9c:	2f 5f       	subi	r18, 0xFF	; 255
     f9e:	3f 4f       	sbci	r19, 0xFF	; 255
     fa0:	31 83       	std	Z+1, r19	; 0x01
     fa2:	20 83       	st	Z, r18
		++(m->total_num);
     fa4:	32 96       	adiw	r30, 0x02	; 2
     fa6:	60 81       	ld	r22, Z
     fa8:	71 81       	ldd	r23, Z+1	; 0x01
     faa:	6f 5f       	subi	r22, 0xFF	; 255
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	71 83       	std	Z+1, r23	; 0x01
     fb0:	60 83       	st	Z, r22
		for (int i=0; i<MAXTHREAD; i++) {
			if (m->blocked_stack[i] == -1){
     fb2:	f8 01       	movw	r30, r16
     fb4:	26 81       	ldd	r18, Z+6	; 0x06
     fb6:	37 81       	ldd	r19, Z+7	; 0x07
     fb8:	2f 3f       	cpi	r18, 0xFF	; 255
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	61 f0       	breq	.+24     	; 0xfd6 <OS_Start+0x562>
     fbe:	f8 01       	movw	r30, r16
     fc0:	38 96       	adiw	r30, 0x08	; 8
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
     fc2:	26 2d       	mov	r18, r6
     fc4:	35 2d       	mov	r19, r5
     fc6:	7b 01       	movw	r14, r22
			if (m->blocked_stack[i] == -1){
     fc8:	41 91       	ld	r20, Z+
     fca:	51 91       	ld	r21, Z+
     fcc:	4f 3f       	cpi	r20, 0xFF	; 255
     fce:	5f 4f       	sbci	r21, 0xFF	; 255
     fd0:	c1 f4       	brne	.+48     	; 0x1002 <OS_Start+0x58e>
     fd2:	b7 01       	movw	r22, r14
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <OS_Start+0x566>
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
     fd6:	24 2d       	mov	r18, r4
     fd8:	3d 2d       	mov	r19, r13
			if (m->blocked_stack[i] == -1){
				m->blocked_stack[i] = Cp->pid;
     fda:	4d 91       	ld	r20, X+
     fdc:	5c 91       	ld	r21, X
     fde:	11 97       	sbiw	r26, 0x01	; 1
     fe0:	f9 01       	movw	r30, r18
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	e0 0f       	add	r30, r16
     fe8:	f1 1f       	adc	r31, r17
     fea:	57 83       	std	Z+7, r21	; 0x07
     fec:	46 83       	std	Z+6, r20	; 0x06
				m->order[i] = m->total_num;
     fee:	77 ab       	std	Z+55, r23	; 0x37
     ff0:	66 ab       	std	Z+54, r22	; 0x36
				m->priority_stack[i] = Cp->pri;
     ff2:	12 96       	adiw	r26, 0x02	; 2
     ff4:	4c 91       	ld	r20, X
     ff6:	12 97       	sbiw	r26, 0x02	; 2
     ff8:	f8 01       	movw	r30, r16
     ffa:	e2 0f       	add	r30, r18
     ffc:	f3 1f       	adc	r31, r19
     ffe:	46 a3       	std	Z+38, r20	; 0x26
    1000:	05 c0       	rjmp	.+10     	; 0x100c <OS_Start+0x598>
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
    1002:	2f 5f       	subi	r18, 0xFF	; 255
    1004:	3f 4f       	sbci	r19, 0xFF	; 255
    1006:	20 31       	cpi	r18, 0x10	; 16
    1008:	31 05       	cpc	r19, r1
    100a:	f1 f6       	brne	.-68     	; 0xfc8 <OS_Start+0x554>
			}
		}
		// end of enqueue
		
		//if cp's priority is higher than the owner
		if (Cp->pri < m_owner->pri) {
    100c:	12 96       	adiw	r26, 0x02	; 2
    100e:	3c 91       	ld	r19, X
    1010:	12 97       	sbiw	r26, 0x02	; 2
    1012:	fc 01       	movw	r30, r24
    1014:	22 81       	ldd	r18, Z+2	; 0x02
    1016:	32 17       	cp	r19, r18
    1018:	18 f4       	brcc	.+6      	; 0x1020 <OS_Start+0x5ac>
			m_owner->pri = Cp->pri;				// the owner gets cp's priority
    101a:	12 96       	adiw	r26, 0x02	; 2
    101c:	2c 91       	ld	r18, X
    101e:	22 83       	std	Z+2, r18	; 0x02
		}
		Dispatch();
    1020:	74 da       	rcall	.-2840   	; 0x50a <Dispatch>
    1022:	68 cd       	rjmp	.-1328   	; 0xaf4 <OS_Start+0x80>
	}
}

static void Kernel_Unlock_Mutex(void)
{
	MUTEX_TYPE* m = findMutexByMutexID(Cp->request_arg);
    1024:	d9 01       	movw	r26, r18
    1026:	16 96       	adiw	r26, 0x06	; 6
    1028:	8d 91       	ld	r24, X+
    102a:	9c 91       	ld	r25, X
    102c:	17 97       	sbiw	r26, 0x07	; 7
    102e:	a5 d9       	rcall	.-3254   	; 0x37a <findMutexByMutexID>
    1030:	9c 83       	std	Y+4, r25	; 0x04
    1032:	8b 83       	std	Y+3, r24	; 0x03
	PD *m_owner = findProcessByPID(m->owner);
    1034:	fc 01       	movw	r30, r24
    1036:	82 81       	ldd	r24, Z+2	; 0x02
    1038:	93 81       	ldd	r25, Z+3	; 0x03
    103a:	2d d9       	rcall	.-3494   	; 0x296 <findProcessByPID>
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	89 83       	std	Y+1, r24	; 0x01
	
	if(m == NULL)
    1040:	2b 81       	ldd	r18, Y+3	; 0x03
    1042:	3c 81       	ldd	r19, Y+4	; 0x04
    1044:	23 2b       	or	r18, r19
    1046:	21 f4       	brne	.+8      	; 0x1050 <OS_Start+0x5dc>
	{
		#ifdef DEBUG
		printf("Kernel_Unlock_Mutex: Error finding requested mutex!\n");
    1048:	81 e8       	ldi	r24, 0x81	; 129
    104a:	96 e0       	ldi	r25, 0x06	; 6
    104c:	34 d2       	rcall	.+1128   	; 0x14b6 <puts>
    104e:	52 cd       	rjmp	.-1372   	; 0xaf4 <OS_Start+0x80>
		#endif
		return;
	}
	
	if(m->owner != Cp->pid){
    1050:	e0 91 6b 1c 	lds	r30, 0x1C6B
    1054:	f0 91 6c 1c 	lds	r31, 0x1C6C
    1058:	80 81       	ld	r24, Z
    105a:	91 81       	ldd	r25, Z+1	; 0x01
    105c:	ab 81       	ldd	r26, Y+3	; 0x03
    105e:	bc 81       	ldd	r27, Y+4	; 0x04
    1060:	12 96       	adiw	r26, 0x02	; 2
    1062:	2d 91       	ld	r18, X+
    1064:	3c 91       	ld	r19, X
    1066:	13 97       	sbiw	r26, 0x03	; 3
    1068:	28 17       	cp	r18, r24
    106a:	39 07       	cpc	r19, r25
    106c:	21 f0       	breq	.+8      	; 0x1076 <OS_Start+0x602>
		#ifdef DEBUG
		printf("Kernel_Unlock_Mutex: The owner is not the current process\n");
    106e:	85 eb       	ldi	r24, 0xB5	; 181
    1070:	96 e0       	ldi	r25, 0x06	; 6
    1072:	21 d2       	rcall	.+1090   	; 0x14b6 <puts>
    1074:	3f cd       	rjmp	.-1410   	; 0xaf4 <OS_Start+0x80>
		#endif
		return;
	} else if (m->count > 1) {
    1076:	eb 81       	ldd	r30, Y+3	; 0x03
    1078:	fc 81       	ldd	r31, Y+4	; 0x04
    107a:	84 81       	ldd	r24, Z+4	; 0x04
    107c:	95 81       	ldd	r25, Z+5	; 0x05
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	91 05       	cpc	r25, r1
    1082:	20 f0       	brcs	.+8      	; 0x108c <OS_Start+0x618>
		// M is locked more than once
		--(m->count);
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	95 83       	std	Z+5, r25	; 0x05
    1088:	84 83       	std	Z+4, r24	; 0x04
    108a:	34 cd       	rjmp	.-1432   	; 0xaf4 <OS_Start+0x80>
	} else if (m->num_of_process > 0) {
    108c:	eb 81       	ldd	r30, Y+3	; 0x03
    108e:	fc 81       	ldd	r31, Y+4	; 0x04
    1090:	ea 5a       	subi	r30, 0xAA	; 170
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	a0 80       	ld	r10, Z
    1096:	b1 80       	ldd	r11, Z+1	; 0x01
    1098:	a1 14       	cp	r10, r1
    109a:	b1 04       	cpc	r11, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <OS_Start+0x62c>
    109e:	74 c0       	rjmp	.+232    	; 0x1188 <OS_Start+0x714>
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
		unsigned int temp_order = m->total_num + 1;
    10a0:	eb 81       	ldd	r30, Y+3	; 0x03
    10a2:	fc 81       	ldd	r31, Y+4	; 0x04
    10a4:	e8 5a       	subi	r30, 0xA8	; 168
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	60 81       	ld	r22, Z
    10aa:	71 81       	ldd	r23, Z+1	; 0x01
    10ac:	6f 5f       	subi	r22, 0xFF	; 255
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	2b 81       	ldd	r18, Y+3	; 0x03
    10b2:	3c 81       	ldd	r19, Y+4	; 0x04
    10b4:	2a 5d       	subi	r18, 0xDA	; 218
    10b6:	3f 4f       	sbci	r19, 0xFF	; 255
    10b8:	eb 81       	ldd	r30, Y+3	; 0x03
    10ba:	fc 81       	ldd	r31, Y+4	; 0x04
    10bc:	f6 96       	adiw	r30, 0x36	; 54
    10be:	ab 81       	ldd	r26, Y+3	; 0x03
    10c0:	bc 81       	ldd	r27, Y+4	; 0x04
    10c2:	16 96       	adiw	r26, 0x06	; 6
    10c4:	4b 81       	ldd	r20, Y+3	; 0x03
    10c6:	5c 81       	ldd	r21, Y+4	; 0x04
    10c8:	4a 5a       	subi	r20, 0xAA	; 170
    10ca:	5f 4f       	sbci	r21, 0xFF	; 255
		// M is locked more than once
		--(m->count);
	} else if (m->num_of_process > 0) {
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
    10cc:	f4 2c       	mov	r15, r4
    10ce:	0d 2d       	mov	r16, r13
		unsigned int temp_order = m->total_num + 1;
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
    10d0:	1b e0       	ldi	r17, 0x0B	; 11
    10d2:	be 83       	std	Y+6, r27	; 0x06
    10d4:	ad 83       	std	Y+5, r26	; 0x05
    10d6:	c9 01       	movw	r24, r18
    10d8:	2b 81       	ldd	r18, Y+3	; 0x03
    10da:	3c 81       	ldd	r19, Y+4	; 0x04
    10dc:	9c 83       	std	Y+4, r25	; 0x04
    10de:	8b 83       	std	Y+3, r24	; 0x03
		int i;
		for (i=0; i<MAXTHREAD; i++) {
			if (m->priority_stack[i] < temp_pri) {
    10e0:	ab 81       	ldd	r26, Y+3	; 0x03
    10e2:	bc 81       	ldd	r27, Y+4	; 0x04
    10e4:	ed 90       	ld	r14, X+
    10e6:	bc 83       	std	Y+4, r27	; 0x04
    10e8:	ab 83       	std	Y+3, r26	; 0x03
    10ea:	e1 16       	cp	r14, r17
    10ec:	48 f4       	brcc	.+18     	; 0x1100 <OS_Start+0x68c>
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
    10ee:	60 81       	ld	r22, Z
    10f0:	71 81       	ldd	r23, Z+1	; 0x01
				p_dequeue = m->blocked_stack[i];
    10f2:	ad 81       	ldd	r26, Y+5	; 0x05
    10f4:	be 81       	ldd	r27, Y+6	; 0x06
    10f6:	fc 90       	ld	r15, X
    10f8:	11 96       	adiw	r26, 0x01	; 1
    10fa:	0c 91       	ld	r16, X
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
		int i;
		for (i=0; i<MAXTHREAD; i++) {
			if (m->priority_stack[i] < temp_pri) {
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
    10fc:	1e 2d       	mov	r17, r14
    10fe:	10 c0       	rjmp	.+32     	; 0x1120 <OS_Start+0x6ac>
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
    1100:	e1 12       	cpse	r14, r17
    1102:	0e c0       	rjmp	.+28     	; 0x1120 <OS_Start+0x6ac>
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	68 17       	cp	r22, r24
    110a:	79 07       	cpc	r23, r25
    110c:	40 f4       	brcc	.+16     	; 0x111e <OS_Start+0x6aa>
				// same priority and came into the queue earlier
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
    110e:	ad 81       	ldd	r26, Y+5	; 0x05
    1110:	be 81       	ldd	r27, Y+6	; 0x06
    1112:	fc 90       	ld	r15, X
    1114:	11 96       	adiw	r26, 0x01	; 1
    1116:	0c 91       	ld	r16, X
    1118:	1e 2d       	mov	r17, r14
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
				// same priority and came into the queue earlier
				temp_order = m->order[i];
    111a:	bc 01       	movw	r22, r24
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <OS_Start+0x6ac>
			if (m->priority_stack[i] < temp_pri) {
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
    111e:	1e 2d       	mov	r17, r14
    1120:	32 96       	adiw	r30, 0x02	; 2
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	02 96       	adiw	r24, 0x02	; 2
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
		// deque the task with highest priority
		PID p_dequeue = 0;
		unsigned int temp_order = m->total_num + 1;
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
		int i;
		for (i=0; i<MAXTHREAD; i++) {
    112c:	e4 17       	cp	r30, r20
    112e:	f5 07       	cpc	r31, r21
    1130:	b9 f6       	brne	.-82     	; 0x10e0 <OS_Start+0x66c>
    1132:	3c 83       	std	Y+4, r19	; 0x04
    1134:	2b 83       	std	Y+3, r18	; 0x03
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			}
		}
		//dequeue index i
		m->blocked_stack[i] = -1;
    1136:	d9 01       	movw	r26, r18
    1138:	97 96       	adiw	r26, 0x27	; 39
    113a:	3c 92       	st	X, r3
    113c:	2e 92       	st	-X, r2
    113e:	96 97       	sbiw	r26, 0x26	; 38
		m->priority_stack[i] = LOWEST_PRIORITY+1;
    1140:	8b e0       	ldi	r24, 0x0B	; 11
    1142:	d6 96       	adiw	r26, 0x36	; 54
    1144:	8c 93       	st	X, r24
		m->order[i] = 0;
		--(m->num_of_process);
    1146:	f9 01       	movw	r30, r18
    1148:	ea 5a       	subi	r30, 0xAA	; 170
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	c5 01       	movw	r24, r10
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	91 83       	std	Z+1, r25	; 0x01
    1152:	80 83       	st	Z, r24
		PD* target_p = findProcessByPID(p_dequeue);
    1154:	8f 2d       	mov	r24, r15
    1156:	90 2f       	mov	r25, r16
    1158:	9e d8       	rcall	.-3780   	; 0x296 <findProcessByPID>
		m_owner->pri = m->own_pri;		//reset owner's priority
    115a:	ab 81       	ldd	r26, Y+3	; 0x03
    115c:	bc 81       	ldd	r27, Y+4	; 0x04
    115e:	a6 5a       	subi	r26, 0xA6	; 166
    1160:	bf 4f       	sbci	r27, 0xFF	; 255
    1162:	2c 91       	ld	r18, X
    1164:	e9 81       	ldd	r30, Y+1	; 0x01
    1166:	fa 81       	ldd	r31, Y+2	; 0x02
    1168:	22 83       	std	Z+2, r18	; 0x02
		m->owner = p_dequeue;
    116a:	eb 81       	ldd	r30, Y+3	; 0x03
    116c:	fc 81       	ldd	r31, Y+4	; 0x04
    116e:	f2 82       	std	Z+2, r15	; 0x02
    1170:	03 83       	std	Z+3, r16	; 0x03
		m->own_pri = temp_pri;			//keep track of new owner's priority;
    1172:	1c 93       	st	X, r17
		target_p->state = READY;
    1174:	dc 01       	movw	r26, r24
    1176:	13 96       	adiw	r26, 0x03	; 3
    1178:	9c 92       	st	X, r9
		Cp->state = READY;
    117a:	e0 91 6b 1c 	lds	r30, 0x1C6B
    117e:	f0 91 6c 1c 	lds	r31, 0x1C6C
    1182:	93 82       	std	Z+3, r9	; 0x03
		Dispatch();
    1184:	c2 d9       	rcall	.-3196   	; 0x50a <Dispatch>
    1186:	b6 cc       	rjmp	.-1684   	; 0xaf4 <OS_Start+0x80>
		return;
	} else {
		m->owner = 0;
    1188:	eb 81       	ldd	r30, Y+3	; 0x03
    118a:	fc 81       	ldd	r31, Y+4	; 0x04
    118c:	13 82       	std	Z+3, r1	; 0x03
    118e:	12 82       	std	Z+2, r1	; 0x02
		m->count = 0;
    1190:	15 82       	std	Z+5, r1	; 0x05
    1192:	14 82       	std	Z+4, r1	; 0x04
		m_owner->pri = m->own_pri;		//reset owner's priority
    1194:	e6 5a       	subi	r30, 0xA6	; 166
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	80 81       	ld	r24, Z
    119a:	a9 81       	ldd	r26, Y+1	; 0x01
    119c:	ba 81       	ldd	r27, Y+2	; 0x02
    119e:	12 96       	adiw	r26, 0x02	; 2
    11a0:	8c 93       	st	X, r24
    11a2:	a8 cc       	rjmp	.-1712   	; 0xaf4 <OS_Start+0x80>
			//Does this need dispatch under any circumstances?
			break;
		   
			case YIELD:
			case NONE:					// NONE could be caused by a timer interrupt
			Cp->state = READY;
    11a4:	f9 01       	movw	r30, r18
    11a6:	93 82       	std	Z+3, r9	; 0x03
			Dispatch();
    11a8:	b0 d9       	rcall	.-3232   	; 0x50a <Dispatch>
    11aa:	a4 cc       	rjmp	.-1720   	; 0xaf4 <OS_Start+0x80>
			break;
       
			//Invalid request code, just ignore
			default:
				err = INVALID_KERNET_REQUEST_ERR;
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	80 93 68 1c 	sts	0x1C68, r24
    11b2:	a0 cc       	rjmp	.-1728   	; 0xaf4 <OS_Start+0x80>
		#endif
		
		Next_Kernel_Request();
		/* NEVER RETURNS!!! */
	}
}
    11b4:	26 96       	adiw	r28, 0x06	; 6
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	bf 90       	pop	r11
    11d2:	af 90       	pop	r10
    11d4:	9f 90       	pop	r9
    11d6:	8f 90       	pop	r8
    11d8:	7f 90       	pop	r7
    11da:	6f 90       	pop	r6
    11dc:	5f 90       	pop	r5
    11de:	4f 90       	pop	r4
    11e0:	3f 90       	pop	r3
    11e2:	2f 90       	pop	r2
    11e4:	08 95       	ret

000011e6 <Task_Create>:
	}
	Disable_Interrupt();
	
	Cp->request = SIGNAL_E;
	Cp->request_arg = e;
	Enter_Kernel();	
    11e6:	20 91 64 1c 	lds	r18, 0x1C64
    11ea:	30 91 65 1c 	lds	r19, 0x1C65
    11ee:	23 2b       	or	r18, r19
    11f0:	89 f0       	breq	.+34     	; 0x1214 <Task_Create+0x2e>
    11f2:	f8 94       	cli
    11f4:	e0 91 6b 1c 	lds	r30, 0x1C6B
    11f8:	f0 91 6c 1c 	lds	r31, 0x1C6C
    11fc:	62 83       	std	Z+2, r22	; 0x02
    11fe:	51 87       	std	Z+9, r21	; 0x09
    1200:	40 87       	std	Z+8, r20	; 0x08
    1202:	21 e0       	ldi	r18, 0x01	; 1
    1204:	25 83       	std	Z+5, r18	; 0x05
    1206:	e4 5f       	subi	r30, 0xF4	; 244
    1208:	fe 4f       	sbci	r31, 0xFE	; 254
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	80 83       	st	Z, r24
    120e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <Task_Create+0x30>
    1214:	10 da       	rcall	.-3040   	; 0x636 <Kernel_Create_Task>
    1216:	80 91 68 1c 	lds	r24, 0x1C68
    121a:	84 30       	cpi	r24, 0x04	; 4
    121c:	a1 f0       	breq	.+40     	; 0x1246 <Task_Create+0x60>
    121e:	80 91 62 1c 	lds	r24, 0x1C62
    1222:	90 91 63 1c 	lds	r25, 0x1C63
    1226:	9f 93       	push	r25
    1228:	8f 93       	push	r24
    122a:	8f ee       	ldi	r24, 0xEF	; 239
    122c:	96 e0       	ldi	r25, 0x06	; 6
    122e:	9f 93       	push	r25
    1230:	8f 93       	push	r24
    1232:	2e d1       	rcall	.+604    	; 0x1490 <printf>
    1234:	80 91 62 1c 	lds	r24, 0x1C62
    1238:	90 91 63 1c 	lds	r25, 0x1C63
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	08 95       	ret
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	08 95       	ret

0000124c <Task_Terminate>:
    124c:	80 91 64 1c 	lds	r24, 0x1C64
    1250:	90 91 65 1c 	lds	r25, 0x1C65
    1254:	89 2b       	or	r24, r25
    1256:	21 f4       	brne	.+8      	; 0x1260 <Task_Terminate+0x14>
    1258:	83 e0       	ldi	r24, 0x03	; 3
    125a:	80 93 68 1c 	sts	0x1C68, r24
    125e:	08 95       	ret
    1260:	f8 94       	cli
    1262:	e0 91 6b 1c 	lds	r30, 0x1C6B
    1266:	f0 91 6c 1c 	lds	r31, 0x1C6C
    126a:	83 e0       	ldi	r24, 0x03	; 3
    126c:	85 83       	std	Z+5, r24	; 0x05
    126e:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    1272:	08 95       	ret

00001274 <Task_Yield>:
    1274:	80 91 64 1c 	lds	r24, 0x1C64
    1278:	90 91 65 1c 	lds	r25, 0x1C65
    127c:	89 2b       	or	r24, r25
    127e:	21 f4       	brne	.+8      	; 0x1288 <Task_Yield+0x14>
    1280:	83 e0       	ldi	r24, 0x03	; 3
    1282:	80 93 68 1c 	sts	0x1C68, r24
    1286:	08 95       	ret
    1288:	f8 94       	cli
    128a:	e0 91 6b 1c 	lds	r30, 0x1C6B
    128e:	f0 91 6c 1c 	lds	r31, 0x1C6C
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	85 83       	std	Z+5, r24	; 0x05
    1296:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    129a:	08 95       	ret

0000129c <Mutex_Init>:
}

MUTEX Mutex_Init(void)
{
	if(KernelActive)
    129c:	80 91 64 1c 	lds	r24, 0x1C64
    12a0:	90 91 65 1c 	lds	r25, 0x1C65
    12a4:	89 2b       	or	r24, r25
    12a6:	51 f0       	breq	.+20     	; 0x12bc <Mutex_Init+0x20>
	{
		Disable_Interrupt();
    12a8:	f8 94       	cli
		Cp->request = CREATE_M;
    12aa:	e0 91 6b 1c 	lds	r30, 0x1C6B
    12ae:	f0 91 6c 1c 	lds	r31, 0x1C6C
    12b2:	8a e0       	ldi	r24, 0x0A	; 10
    12b4:	85 83       	std	Z+5, r24	; 0x05
		Enter_Kernel();
    12b6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <Enter_Kernel>
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <Mutex_Init+0x22>
	}
	else
		Kernel_Create_Mutex();	//Call the kernel function directly if OS hasn't start yet
    12bc:	b1 da       	rcall	.-2718   	; 0x820 <Kernel_Create_Mutex>
	
	
	//Return zero as Mutex ID if the mutex creation process gave errors. Note that the smallest valid mutex ID is 1
	if (err == MAX_MUTEX_ERR)
    12be:	80 91 68 1c 	lds	r24, 0x1C68
    12c2:	8c 30       	cpi	r24, 0x0C	; 12
    12c4:	a1 f0       	breq	.+40     	; 0x12ee <Mutex_Init+0x52>
	return 0;
	
	#ifdef DEBUG
	printf("Created Mutex: %d\n", Last_MutexID);
    12c6:	80 91 6d 1c 	lds	r24, 0x1C6D
    12ca:	90 91 6e 1c 	lds	r25, 0x1C6E
    12ce:	9f 93       	push	r25
    12d0:	8f 93       	push	r24
    12d2:	83 e1       	ldi	r24, 0x13	; 19
    12d4:	97 e0       	ldi	r25, 0x07	; 7
    12d6:	9f 93       	push	r25
    12d8:	8f 93       	push	r24
    12da:	da d0       	rcall	.+436    	; 0x1490 <printf>
	#endif
	
	return Last_MutexID;
    12dc:	80 91 6d 1c 	lds	r24, 0x1C6D
    12e0:	90 91 6e 1c 	lds	r25, 0x1C6E
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	08 95       	ret
		Kernel_Create_Mutex();	//Call the kernel function directly if OS hasn't start yet
	
	
	//Return zero as Mutex ID if the mutex creation process gave errors. Note that the smallest valid mutex ID is 1
	if (err == MAX_MUTEX_ERR)
	return 0;
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
	#ifdef DEBUG
	printf("Created Mutex: %d\n", Last_MutexID);
	#endif
	
	return Last_MutexID;
}
    12f2:	08 95       	ret

000012f4 <Mutex_Lock>:

void Mutex_Lock(MUTEX m)
{
	if(!KernelActive){
    12f4:	20 91 64 1c 	lds	r18, 0x1C64
    12f8:	30 91 65 1c 	lds	r19, 0x1C65
    12fc:	23 2b       	or	r18, r19
    12fe:	21 f4       	brne	.+8      	; 0x1308 <Mutex_Lock+0x14>
		err = KERNEL_INACTIVE_ERR;
    1300:	83 e0       	ldi	r24, 0x03	; 3
    1302:	80 93 68 1c 	sts	0x1C68, r24
		return;
    1306:	08 95       	ret
	}
	Disable_Interrupt();
    1308:	f8 94       	cli
	
	Cp->request = LOCK_M;
    130a:	e0 91 6b 1c 	lds	r30, 0x1C6B
    130e:	f0 91 6c 1c 	lds	r31, 0x1C6C
    1312:	2b e0       	ldi	r18, 0x0B	; 11
    1314:	25 83       	std	Z+5, r18	; 0x05
	Cp->request_arg = m;
    1316:	97 83       	std	Z+7, r25	; 0x07
    1318:	86 83       	std	Z+6, r24	; 0x06
	Enter_Kernel();
    131a:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    131e:	08 95       	ret

00001320 <Mutex_Unlock>:
}

void Mutex_Unlock(MUTEX m)
{
	if(!KernelActive){
    1320:	20 91 64 1c 	lds	r18, 0x1C64
    1324:	30 91 65 1c 	lds	r19, 0x1C65
    1328:	23 2b       	or	r18, r19
    132a:	21 f4       	brne	.+8      	; 0x1334 <Mutex_Unlock+0x14>
		err = KERNEL_INACTIVE_ERR;
    132c:	83 e0       	ldi	r24, 0x03	; 3
    132e:	80 93 68 1c 	sts	0x1C68, r24
		return;
    1332:	08 95       	ret
	}
	Disable_Interrupt();
    1334:	f8 94       	cli
	
	Cp->request = UNLOCK_M;
    1336:	e0 91 6b 1c 	lds	r30, 0x1C6B
    133a:	f0 91 6c 1c 	lds	r31, 0x1C6C
    133e:	2c e0       	ldi	r18, 0x0C	; 12
    1340:	25 83       	std	Z+5, r18	; 0x05
	Cp->request_arg = m;
    1342:	97 83       	std	Z+7, r25	; 0x07
    1344:	86 83       	std	Z+6, r24	; 0x06
	Enter_Kernel();
    1346:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <Enter_Kernel>
    134a:	08 95       	ret

0000134c <main>:
/*Don't use main function for application code. Any mandatory kernel initialization should be done here*/
void main() 
{
   //Enable STDIN/OUT to UART redirection for debugging
   #ifdef DEBUG
	uart_init();
    134c:	7d d0       	rcall	.+250    	; 0x1448 <uart_init>
	uart_setredir();
    134e:	8d d0       	rcall	.+282    	; 0x146a <uart_setredir>
	printf("STDOUT->UART!\n");
    1350:	86 e2       	ldi	r24, 0x26	; 38
    1352:	97 e0       	ldi	r25, 0x07	; 7
    1354:	b0 d0       	rcall	.+352    	; 0x14b6 <puts>
   #endif  
   
   a_main();
    1356:	58 c0       	rjmp	.+176    	; 0x1408 <a_main>
    1358:	08 95       	ret

0000135a <task_r>:

void task_r()
{
	for(int i=0;i<3;i++)
	{
		printf("Hello from R!\n");
    135a:	84 e3       	ldi	r24, 0x34	; 52
    135c:	97 e0       	ldi	r25, 0x07	; 7
    135e:	ab d0       	rcall	.+342    	; 0x14b6 <puts>
    1360:	84 e3       	ldi	r24, 0x34	; 52
    1362:	97 e0       	ldi	r25, 0x07	; 7
    1364:	a8 d0       	rcall	.+336    	; 0x14b6 <puts>
    1366:	84 e3       	ldi	r24, 0x34	; 52
    1368:	97 e0       	ldi	r25, 0x07	; 7
    136a:	a5 c0       	rjmp	.+330    	; 0x14b6 <puts>
    136c:	08 95       	ret

0000136e <task_q>:
	}
}

void task_q()
{
	printf("q: hello, gonna create R\n");
    136e:	82 e4       	ldi	r24, 0x42	; 66
    1370:	97 e0       	ldi	r25, 0x07	; 7
    1372:	a1 d0       	rcall	.+322    	; 0x14b6 <puts>
	Task_Create(task_r, 2, 0);
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	62 e0       	ldi	r22, 0x02	; 2
    137a:	8d ea       	ldi	r24, 0xAD	; 173
    137c:	99 e0       	ldi	r25, 0x09	; 9
    137e:	33 df       	rcall	.-410    	; 0x11e6 <Task_Create>
	printf("q: gonna try to lock mut\n");
    1380:	8b e5       	ldi	r24, 0x5B	; 91
    1382:	97 e0       	ldi	r25, 0x07	; 7
    1384:	98 d0       	rcall	.+304    	; 0x14b6 <puts>
	Mutex_Lock(mut);
    1386:	80 91 73 1c 	lds	r24, 0x1C73
    138a:	90 91 74 1c 	lds	r25, 0x1C74
    138e:	b2 df       	rcall	.-156    	; 0x12f4 <Mutex_Lock>
	printf("q: I got into the mutex yeah! But I will let it go\n");
    1390:	84 e7       	ldi	r24, 0x74	; 116
    1392:	97 e0       	ldi	r25, 0x07	; 7
    1394:	90 d0       	rcall	.+288    	; 0x14b6 <puts>
	Mutex_Lock(mut);
    1396:	80 91 73 1c 	lds	r24, 0x1C73
    139a:	90 91 74 1c 	lds	r25, 0x1C74
    139e:	aa df       	rcall	.-172    	; 0x12f4 <Mutex_Lock>
	printf("q: I am gonna die, good bye world\n");
    13a0:	87 ea       	ldi	r24, 0xA7	; 167
    13a2:	97 e0       	ldi	r25, 0x07	; 7
    13a4:	88 c0       	rjmp	.+272    	; 0x14b6 <puts>
    13a6:	08 95       	ret

000013a8 <task_p>:
}

void task_p()
{
	mut = Mutex_Init();
    13a8:	79 df       	rcall	.-270    	; 0x129c <Mutex_Init>
    13aa:	90 93 74 1c 	sts	0x1C74, r25
    13ae:	80 93 73 1c 	sts	0x1C73, r24
	printf("p:hello, gonna lock mut\n");
    13b2:	89 ec       	ldi	r24, 0xC9	; 201
    13b4:	97 e0       	ldi	r25, 0x07	; 7
    13b6:	7f d0       	rcall	.+254    	; 0x14b6 <puts>
	Mutex_Lock(mut);
    13b8:	80 91 73 1c 	lds	r24, 0x1C73
    13bc:	90 91 74 1c 	lds	r25, 0x1C74
    13c0:	99 df       	rcall	.-206    	; 0x12f4 <Mutex_Lock>
	printf("p: gonna create q\n");
    13c2:	81 ee       	ldi	r24, 0xE1	; 225
    13c4:	97 e0       	ldi	r25, 0x07	; 7
    13c6:	77 d0       	rcall	.+238    	; 0x14b6 <puts>
	Task_Create(task_q, 1, 0);
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	61 e0       	ldi	r22, 0x01	; 1
    13ce:	87 eb       	ldi	r24, 0xB7	; 183
    13d0:	99 e0       	ldi	r25, 0x09	; 9
    13d2:	09 df       	rcall	.-494    	; 0x11e6 <Task_Create>
	Task_Yield();
    13d4:	4f df       	rcall	.-354    	; 0x1274 <Task_Yield>
    13d6:	ca e0       	ldi	r28, 0x0A	; 10
    13d8:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<10;i++){
		printf("p: yeah I got the priority of q, gonna pray for %d times before unlock mutex\n", (10-i));
    13da:	03 ef       	ldi	r16, 0xF3	; 243
    13dc:	17 e0       	ldi	r17, 0x07	; 7
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	1f 93       	push	r17
    13e4:	0f 93       	push	r16
    13e6:	54 d0       	rcall	.+168    	; 0x1490 <printf>
    13e8:	21 97       	sbiw	r28, 0x01	; 1
	printf("p:hello, gonna lock mut\n");
	Mutex_Lock(mut);
	printf("p: gonna create q\n");
	Task_Create(task_q, 1, 0);
	Task_Yield();
	for(int i=0;i<10;i++){
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	a9 f7       	brne	.-22     	; 0x13de <task_p+0x36>
		printf("p: yeah I got the priority of q, gonna pray for %d times before unlock mutex\n", (10-i));
	}
	Mutex_Unlock(mut);
    13f4:	80 91 73 1c 	lds	r24, 0x1C73
    13f8:	90 91 74 1c 	lds	r25, 0x1C74
    13fc:	91 df       	rcall	.-222    	; 0x1320 <Mutex_Unlock>
	Task_Yield();
    13fe:	3a df       	rcall	.-396    	; 0x1274 <Task_Yield>
	for(;;)
		printf("p: if r runs before me, I lost the priority :(\n");
    1400:	81 e4       	ldi	r24, 0x41	; 65
    1402:	98 e0       	ldi	r25, 0x08	; 8
    1404:	58 d0       	rcall	.+176    	; 0x14b6 <puts>
    1406:	fc cf       	rjmp	.-8      	; 0x1400 <task_p+0x58>

00001408 <a_main>:
}

void a_main() {
	OS_Init();
    1408:	c0 da       	rcall	.-2688   	; 0x98a <OS_Init>
	Task_Create(task_p, 3, 0);
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	63 e0       	ldi	r22, 0x03	; 3
    1410:	84 ed       	ldi	r24, 0xD4	; 212
    1412:	99 e0       	ldi	r25, 0x09	; 9
    1414:	e8 de       	rcall	.-560    	; 0x11e6 <Task_Create>
	OS_Start();
    1416:	2e cb       	rjmp	.-2468   	; 0xa74 <OS_Start>
    1418:	08 95       	ret

0000141a <uart_putchar>:

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
}

void uart_putchar(char c, FILE *stream) {
    141a:	cf 93       	push	r28
    141c:	c8 2f       	mov	r28, r24
	if (c == '\n') {
    141e:	8a 30       	cpi	r24, 0x0A	; 10
    1420:	11 f4       	brne	.+4      	; 0x1426 <uart_putchar+0xc>
		uart_putchar('\r', stream);
    1422:	8d e0       	ldi	r24, 0x0D	; 13
    1424:	fa df       	rcall	.-12     	; 0x141a <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
    1426:	e0 ec       	ldi	r30, 0xC0	; 192
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	90 81       	ld	r25, Z
    142c:	95 ff       	sbrs	r25, 5
    142e:	fd cf       	rjmp	.-6      	; 0x142a <uart_putchar+0x10>
	UDR0 = c;
    1430:	c0 93 c6 00 	sts	0x00C6, r28
}
    1434:	cf 91       	pop	r28
    1436:	08 95       	ret

00001438 <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
    1438:	e0 ec       	ldi	r30, 0xC0	; 192
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	88 23       	and	r24, r24
    1440:	ec f7       	brge	.-6      	; 0x143c <uart_getchar+0x4>
	return UDR0;
    1442:	80 91 c6 00 	lds	r24, 0x00C6
}
    1446:	08 95       	ret

00001448 <uart_init>:

FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
    1448:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
    144c:	87 e6       	ldi	r24, 0x67	; 103
    144e:	80 93 c4 00 	sts	0x00C4, r24
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
    1452:	e0 ec       	ldi	r30, 0xC0	; 192
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8d 7f       	andi	r24, 0xFD	; 253
    145a:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
    145c:	86 e0       	ldi	r24, 0x06	; 6
    145e:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
    1462:	88 e1       	ldi	r24, 0x18	; 24
    1464:	80 93 c1 00 	sts	0x00C1, r24
    1468:	08 95       	ret

0000146a <uart_setredir>:
	return UDR0;
}

void uart_setredir(void)
{
	stdout = &uart_output;
    146a:	e9 e7       	ldi	r30, 0x79	; 121
    146c:	fc e1       	ldi	r31, 0x1C	; 28
    146e:	8e e0       	ldi	r24, 0x0E	; 14
    1470:	92 e0       	ldi	r25, 0x02	; 2
    1472:	93 83       	std	Z+3, r25	; 0x03
    1474:	82 83       	std	Z+2, r24	; 0x02
	stdin  = &uart_input;
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	92 e0       	ldi	r25, 0x02	; 2
    147a:	91 83       	std	Z+1, r25	; 0x01
    147c:	80 83       	st	Z, r24
    147e:	08 95       	ret

00001480 <__tablejump2__>:
    1480:	ee 0f       	add	r30, r30
    1482:	ff 1f       	adc	r31, r31
    1484:	88 1f       	adc	r24, r24
    1486:	8b bf       	out	0x3b, r24	; 59
    1488:	07 90       	elpm	r0, Z+
    148a:	f6 91       	elpm	r31, Z
    148c:	e0 2d       	mov	r30, r0
    148e:	19 94       	eijmp

00001490 <printf>:
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	ae 01       	movw	r20, r28
    149a:	4a 5f       	subi	r20, 0xFA	; 250
    149c:	5f 4f       	sbci	r21, 0xFF	; 255
    149e:	fa 01       	movw	r30, r20
    14a0:	61 91       	ld	r22, Z+
    14a2:	71 91       	ld	r23, Z+
    14a4:	af 01       	movw	r20, r30
    14a6:	80 91 7b 1c 	lds	r24, 0x1C7B
    14aa:	90 91 7c 1c 	lds	r25, 0x1C7C
    14ae:	33 d0       	rcall	.+102    	; 0x1516 <vfprintf>
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <puts>:
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	e0 91 7b 1c 	lds	r30, 0x1C7B
    14c2:	f0 91 7c 1c 	lds	r31, 0x1C7C
    14c6:	23 81       	ldd	r18, Z+3	; 0x03
    14c8:	21 ff       	sbrs	r18, 1
    14ca:	1b c0       	rjmp	.+54     	; 0x1502 <puts+0x4c>
    14cc:	8c 01       	movw	r16, r24
    14ce:	d0 e0       	ldi	r29, 0x00	; 0
    14d0:	c0 e0       	ldi	r28, 0x00	; 0
    14d2:	f8 01       	movw	r30, r16
    14d4:	81 91       	ld	r24, Z+
    14d6:	8f 01       	movw	r16, r30
    14d8:	60 91 7b 1c 	lds	r22, 0x1C7B
    14dc:	70 91 7c 1c 	lds	r23, 0x1C7C
    14e0:	db 01       	movw	r26, r22
    14e2:	18 96       	adiw	r26, 0x08	; 8
    14e4:	ed 91       	ld	r30, X+
    14e6:	fc 91       	ld	r31, X
    14e8:	19 97       	sbiw	r26, 0x09	; 9
    14ea:	88 23       	and	r24, r24
    14ec:	31 f0       	breq	.+12     	; 0x14fa <puts+0x44>
    14ee:	19 95       	eicall
    14f0:	89 2b       	or	r24, r25
    14f2:	79 f3       	breq	.-34     	; 0x14d2 <puts+0x1c>
    14f4:	df ef       	ldi	r29, 0xFF	; 255
    14f6:	cf ef       	ldi	r28, 0xFF	; 255
    14f8:	ec cf       	rjmp	.-40     	; 0x14d2 <puts+0x1c>
    14fa:	8a e0       	ldi	r24, 0x0A	; 10
    14fc:	19 95       	eicall
    14fe:	89 2b       	or	r24, r25
    1500:	19 f0       	breq	.+6      	; 0x1508 <puts+0x52>
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	9f ef       	ldi	r25, 0xFF	; 255
    1506:	02 c0       	rjmp	.+4      	; 0x150c <puts+0x56>
    1508:	8d 2f       	mov	r24, r29
    150a:	9c 2f       	mov	r25, r28
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	08 95       	ret

00001516 <vfprintf>:
    1516:	2f 92       	push	r2
    1518:	3f 92       	push	r3
    151a:	4f 92       	push	r4
    151c:	5f 92       	push	r5
    151e:	6f 92       	push	r6
    1520:	7f 92       	push	r7
    1522:	8f 92       	push	r8
    1524:	9f 92       	push	r9
    1526:	af 92       	push	r10
    1528:	bf 92       	push	r11
    152a:	cf 92       	push	r12
    152c:	df 92       	push	r13
    152e:	ef 92       	push	r14
    1530:	ff 92       	push	r15
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	2c 97       	sbiw	r28, 0x0c	; 12
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	7c 01       	movw	r14, r24
    154c:	6b 01       	movw	r12, r22
    154e:	8a 01       	movw	r16, r20
    1550:	fc 01       	movw	r30, r24
    1552:	17 82       	std	Z+7, r1	; 0x07
    1554:	16 82       	std	Z+6, r1	; 0x06
    1556:	83 81       	ldd	r24, Z+3	; 0x03
    1558:	81 ff       	sbrs	r24, 1
    155a:	b0 c1       	rjmp	.+864    	; 0x18bc <vfprintf+0x3a6>
    155c:	ce 01       	movw	r24, r28
    155e:	01 96       	adiw	r24, 0x01	; 1
    1560:	4c 01       	movw	r8, r24
    1562:	f7 01       	movw	r30, r14
    1564:	93 81       	ldd	r25, Z+3	; 0x03
    1566:	f6 01       	movw	r30, r12
    1568:	93 fd       	sbrc	r25, 3
    156a:	85 91       	lpm	r24, Z+
    156c:	93 ff       	sbrs	r25, 3
    156e:	81 91       	ld	r24, Z+
    1570:	6f 01       	movw	r12, r30
    1572:	88 23       	and	r24, r24
    1574:	09 f4       	brne	.+2      	; 0x1578 <vfprintf+0x62>
    1576:	9e c1       	rjmp	.+828    	; 0x18b4 <vfprintf+0x39e>
    1578:	85 32       	cpi	r24, 0x25	; 37
    157a:	39 f4       	brne	.+14     	; 0x158a <vfprintf+0x74>
    157c:	93 fd       	sbrc	r25, 3
    157e:	85 91       	lpm	r24, Z+
    1580:	93 ff       	sbrs	r25, 3
    1582:	81 91       	ld	r24, Z+
    1584:	6f 01       	movw	r12, r30
    1586:	85 32       	cpi	r24, 0x25	; 37
    1588:	21 f4       	brne	.+8      	; 0x1592 <vfprintf+0x7c>
    158a:	b7 01       	movw	r22, r14
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	c7 d1       	rcall	.+910    	; 0x191e <fputc>
    1590:	e8 cf       	rjmp	.-48     	; 0x1562 <vfprintf+0x4c>
    1592:	51 2c       	mov	r5, r1
    1594:	31 2c       	mov	r3, r1
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	20 32       	cpi	r18, 0x20	; 32
    159a:	a0 f4       	brcc	.+40     	; 0x15c4 <vfprintf+0xae>
    159c:	8b 32       	cpi	r24, 0x2B	; 43
    159e:	69 f0       	breq	.+26     	; 0x15ba <vfprintf+0xa4>
    15a0:	30 f4       	brcc	.+12     	; 0x15ae <vfprintf+0x98>
    15a2:	80 32       	cpi	r24, 0x20	; 32
    15a4:	59 f0       	breq	.+22     	; 0x15bc <vfprintf+0xa6>
    15a6:	83 32       	cpi	r24, 0x23	; 35
    15a8:	69 f4       	brne	.+26     	; 0x15c4 <vfprintf+0xae>
    15aa:	20 61       	ori	r18, 0x10	; 16
    15ac:	2c c0       	rjmp	.+88     	; 0x1606 <vfprintf+0xf0>
    15ae:	8d 32       	cpi	r24, 0x2D	; 45
    15b0:	39 f0       	breq	.+14     	; 0x15c0 <vfprintf+0xaa>
    15b2:	80 33       	cpi	r24, 0x30	; 48
    15b4:	39 f4       	brne	.+14     	; 0x15c4 <vfprintf+0xae>
    15b6:	21 60       	ori	r18, 0x01	; 1
    15b8:	26 c0       	rjmp	.+76     	; 0x1606 <vfprintf+0xf0>
    15ba:	22 60       	ori	r18, 0x02	; 2
    15bc:	24 60       	ori	r18, 0x04	; 4
    15be:	23 c0       	rjmp	.+70     	; 0x1606 <vfprintf+0xf0>
    15c0:	28 60       	ori	r18, 0x08	; 8
    15c2:	21 c0       	rjmp	.+66     	; 0x1606 <vfprintf+0xf0>
    15c4:	27 fd       	sbrc	r18, 7
    15c6:	27 c0       	rjmp	.+78     	; 0x1616 <vfprintf+0x100>
    15c8:	30 ed       	ldi	r19, 0xD0	; 208
    15ca:	38 0f       	add	r19, r24
    15cc:	3a 30       	cpi	r19, 0x0A	; 10
    15ce:	78 f4       	brcc	.+30     	; 0x15ee <vfprintf+0xd8>
    15d0:	26 ff       	sbrs	r18, 6
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <vfprintf+0xca>
    15d4:	fa e0       	ldi	r31, 0x0A	; 10
    15d6:	5f 9e       	mul	r5, r31
    15d8:	30 0d       	add	r19, r0
    15da:	11 24       	eor	r1, r1
    15dc:	53 2e       	mov	r5, r19
    15de:	13 c0       	rjmp	.+38     	; 0x1606 <vfprintf+0xf0>
    15e0:	8a e0       	ldi	r24, 0x0A	; 10
    15e2:	38 9e       	mul	r3, r24
    15e4:	30 0d       	add	r19, r0
    15e6:	11 24       	eor	r1, r1
    15e8:	33 2e       	mov	r3, r19
    15ea:	20 62       	ori	r18, 0x20	; 32
    15ec:	0c c0       	rjmp	.+24     	; 0x1606 <vfprintf+0xf0>
    15ee:	8e 32       	cpi	r24, 0x2E	; 46
    15f0:	21 f4       	brne	.+8      	; 0x15fa <vfprintf+0xe4>
    15f2:	26 fd       	sbrc	r18, 6
    15f4:	5f c1       	rjmp	.+702    	; 0x18b4 <vfprintf+0x39e>
    15f6:	20 64       	ori	r18, 0x40	; 64
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <vfprintf+0xf0>
    15fa:	8c 36       	cpi	r24, 0x6C	; 108
    15fc:	11 f4       	brne	.+4      	; 0x1602 <vfprintf+0xec>
    15fe:	20 68       	ori	r18, 0x80	; 128
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <vfprintf+0xf0>
    1602:	88 36       	cpi	r24, 0x68	; 104
    1604:	41 f4       	brne	.+16     	; 0x1616 <vfprintf+0x100>
    1606:	f6 01       	movw	r30, r12
    1608:	93 fd       	sbrc	r25, 3
    160a:	85 91       	lpm	r24, Z+
    160c:	93 ff       	sbrs	r25, 3
    160e:	81 91       	ld	r24, Z+
    1610:	6f 01       	movw	r12, r30
    1612:	81 11       	cpse	r24, r1
    1614:	c1 cf       	rjmp	.-126    	; 0x1598 <vfprintf+0x82>
    1616:	98 2f       	mov	r25, r24
    1618:	9f 7d       	andi	r25, 0xDF	; 223
    161a:	95 54       	subi	r25, 0x45	; 69
    161c:	93 30       	cpi	r25, 0x03	; 3
    161e:	28 f4       	brcc	.+10     	; 0x162a <vfprintf+0x114>
    1620:	0c 5f       	subi	r16, 0xFC	; 252
    1622:	1f 4f       	sbci	r17, 0xFF	; 255
    1624:	ff e3       	ldi	r31, 0x3F	; 63
    1626:	f9 83       	std	Y+1, r31	; 0x01
    1628:	0d c0       	rjmp	.+26     	; 0x1644 <vfprintf+0x12e>
    162a:	83 36       	cpi	r24, 0x63	; 99
    162c:	31 f0       	breq	.+12     	; 0x163a <vfprintf+0x124>
    162e:	83 37       	cpi	r24, 0x73	; 115
    1630:	71 f0       	breq	.+28     	; 0x164e <vfprintf+0x138>
    1632:	83 35       	cpi	r24, 0x53	; 83
    1634:	09 f0       	breq	.+2      	; 0x1638 <vfprintf+0x122>
    1636:	57 c0       	rjmp	.+174    	; 0x16e6 <vfprintf+0x1d0>
    1638:	21 c0       	rjmp	.+66     	; 0x167c <vfprintf+0x166>
    163a:	f8 01       	movw	r30, r16
    163c:	80 81       	ld	r24, Z
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	0e 5f       	subi	r16, 0xFE	; 254
    1642:	1f 4f       	sbci	r17, 0xFF	; 255
    1644:	44 24       	eor	r4, r4
    1646:	43 94       	inc	r4
    1648:	51 2c       	mov	r5, r1
    164a:	54 01       	movw	r10, r8
    164c:	14 c0       	rjmp	.+40     	; 0x1676 <vfprintf+0x160>
    164e:	38 01       	movw	r6, r16
    1650:	f2 e0       	ldi	r31, 0x02	; 2
    1652:	6f 0e       	add	r6, r31
    1654:	71 1c       	adc	r7, r1
    1656:	f8 01       	movw	r30, r16
    1658:	a0 80       	ld	r10, Z
    165a:	b1 80       	ldd	r11, Z+1	; 0x01
    165c:	26 ff       	sbrs	r18, 6
    165e:	03 c0       	rjmp	.+6      	; 0x1666 <vfprintf+0x150>
    1660:	65 2d       	mov	r22, r5
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	02 c0       	rjmp	.+4      	; 0x166a <vfprintf+0x154>
    1666:	6f ef       	ldi	r22, 0xFF	; 255
    1668:	7f ef       	ldi	r23, 0xFF	; 255
    166a:	c5 01       	movw	r24, r10
    166c:	2c 87       	std	Y+12, r18	; 0x0c
    166e:	4c d1       	rcall	.+664    	; 0x1908 <strnlen>
    1670:	2c 01       	movw	r4, r24
    1672:	83 01       	movw	r16, r6
    1674:	2c 85       	ldd	r18, Y+12	; 0x0c
    1676:	2f 77       	andi	r18, 0x7F	; 127
    1678:	22 2e       	mov	r2, r18
    167a:	16 c0       	rjmp	.+44     	; 0x16a8 <vfprintf+0x192>
    167c:	38 01       	movw	r6, r16
    167e:	f2 e0       	ldi	r31, 0x02	; 2
    1680:	6f 0e       	add	r6, r31
    1682:	71 1c       	adc	r7, r1
    1684:	f8 01       	movw	r30, r16
    1686:	a0 80       	ld	r10, Z
    1688:	b1 80       	ldd	r11, Z+1	; 0x01
    168a:	26 ff       	sbrs	r18, 6
    168c:	03 c0       	rjmp	.+6      	; 0x1694 <vfprintf+0x17e>
    168e:	65 2d       	mov	r22, r5
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <vfprintf+0x182>
    1694:	6f ef       	ldi	r22, 0xFF	; 255
    1696:	7f ef       	ldi	r23, 0xFF	; 255
    1698:	c5 01       	movw	r24, r10
    169a:	2c 87       	std	Y+12, r18	; 0x0c
    169c:	2a d1       	rcall	.+596    	; 0x18f2 <strnlen_P>
    169e:	2c 01       	movw	r4, r24
    16a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    16a2:	20 68       	ori	r18, 0x80	; 128
    16a4:	22 2e       	mov	r2, r18
    16a6:	83 01       	movw	r16, r6
    16a8:	23 fc       	sbrc	r2, 3
    16aa:	19 c0       	rjmp	.+50     	; 0x16de <vfprintf+0x1c8>
    16ac:	83 2d       	mov	r24, r3
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	48 16       	cp	r4, r24
    16b2:	59 06       	cpc	r5, r25
    16b4:	a0 f4       	brcc	.+40     	; 0x16de <vfprintf+0x1c8>
    16b6:	b7 01       	movw	r22, r14
    16b8:	80 e2       	ldi	r24, 0x20	; 32
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	30 d1       	rcall	.+608    	; 0x191e <fputc>
    16be:	3a 94       	dec	r3
    16c0:	f5 cf       	rjmp	.-22     	; 0x16ac <vfprintf+0x196>
    16c2:	f5 01       	movw	r30, r10
    16c4:	27 fc       	sbrc	r2, 7
    16c6:	85 91       	lpm	r24, Z+
    16c8:	27 fe       	sbrs	r2, 7
    16ca:	81 91       	ld	r24, Z+
    16cc:	5f 01       	movw	r10, r30
    16ce:	b7 01       	movw	r22, r14
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	25 d1       	rcall	.+586    	; 0x191e <fputc>
    16d4:	31 10       	cpse	r3, r1
    16d6:	3a 94       	dec	r3
    16d8:	f1 e0       	ldi	r31, 0x01	; 1
    16da:	4f 1a       	sub	r4, r31
    16dc:	51 08       	sbc	r5, r1
    16de:	41 14       	cp	r4, r1
    16e0:	51 04       	cpc	r5, r1
    16e2:	79 f7       	brne	.-34     	; 0x16c2 <vfprintf+0x1ac>
    16e4:	de c0       	rjmp	.+444    	; 0x18a2 <vfprintf+0x38c>
    16e6:	84 36       	cpi	r24, 0x64	; 100
    16e8:	11 f0       	breq	.+4      	; 0x16ee <vfprintf+0x1d8>
    16ea:	89 36       	cpi	r24, 0x69	; 105
    16ec:	31 f5       	brne	.+76     	; 0x173a <vfprintf+0x224>
    16ee:	f8 01       	movw	r30, r16
    16f0:	27 ff       	sbrs	r18, 7
    16f2:	07 c0       	rjmp	.+14     	; 0x1702 <vfprintf+0x1ec>
    16f4:	60 81       	ld	r22, Z
    16f6:	71 81       	ldd	r23, Z+1	; 0x01
    16f8:	82 81       	ldd	r24, Z+2	; 0x02
    16fa:	93 81       	ldd	r25, Z+3	; 0x03
    16fc:	0c 5f       	subi	r16, 0xFC	; 252
    16fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1700:	08 c0       	rjmp	.+16     	; 0x1712 <vfprintf+0x1fc>
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	07 2e       	mov	r0, r23
    1708:	00 0c       	add	r0, r0
    170a:	88 0b       	sbc	r24, r24
    170c:	99 0b       	sbc	r25, r25
    170e:	0e 5f       	subi	r16, 0xFE	; 254
    1710:	1f 4f       	sbci	r17, 0xFF	; 255
    1712:	2f 76       	andi	r18, 0x6F	; 111
    1714:	72 2e       	mov	r7, r18
    1716:	97 ff       	sbrs	r25, 7
    1718:	09 c0       	rjmp	.+18     	; 0x172c <vfprintf+0x216>
    171a:	90 95       	com	r25
    171c:	80 95       	com	r24
    171e:	70 95       	com	r23
    1720:	61 95       	neg	r22
    1722:	7f 4f       	sbci	r23, 0xFF	; 255
    1724:	8f 4f       	sbci	r24, 0xFF	; 255
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	20 68       	ori	r18, 0x80	; 128
    172a:	72 2e       	mov	r7, r18
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	a4 01       	movw	r20, r8
    1732:	2d d1       	rcall	.+602    	; 0x198e <__ultoa_invert>
    1734:	a8 2e       	mov	r10, r24
    1736:	a8 18       	sub	r10, r8
    1738:	43 c0       	rjmp	.+134    	; 0x17c0 <vfprintf+0x2aa>
    173a:	85 37       	cpi	r24, 0x75	; 117
    173c:	29 f4       	brne	.+10     	; 0x1748 <vfprintf+0x232>
    173e:	2f 7e       	andi	r18, 0xEF	; 239
    1740:	b2 2e       	mov	r11, r18
    1742:	2a e0       	ldi	r18, 0x0A	; 10
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	25 c0       	rjmp	.+74     	; 0x1792 <vfprintf+0x27c>
    1748:	f2 2f       	mov	r31, r18
    174a:	f9 7f       	andi	r31, 0xF9	; 249
    174c:	bf 2e       	mov	r11, r31
    174e:	8f 36       	cpi	r24, 0x6F	; 111
    1750:	c1 f0       	breq	.+48     	; 0x1782 <vfprintf+0x26c>
    1752:	18 f4       	brcc	.+6      	; 0x175a <vfprintf+0x244>
    1754:	88 35       	cpi	r24, 0x58	; 88
    1756:	79 f0       	breq	.+30     	; 0x1776 <vfprintf+0x260>
    1758:	ad c0       	rjmp	.+346    	; 0x18b4 <vfprintf+0x39e>
    175a:	80 37       	cpi	r24, 0x70	; 112
    175c:	19 f0       	breq	.+6      	; 0x1764 <vfprintf+0x24e>
    175e:	88 37       	cpi	r24, 0x78	; 120
    1760:	21 f0       	breq	.+8      	; 0x176a <vfprintf+0x254>
    1762:	a8 c0       	rjmp	.+336    	; 0x18b4 <vfprintf+0x39e>
    1764:	2f 2f       	mov	r18, r31
    1766:	20 61       	ori	r18, 0x10	; 16
    1768:	b2 2e       	mov	r11, r18
    176a:	b4 fe       	sbrs	r11, 4
    176c:	0d c0       	rjmp	.+26     	; 0x1788 <vfprintf+0x272>
    176e:	8b 2d       	mov	r24, r11
    1770:	84 60       	ori	r24, 0x04	; 4
    1772:	b8 2e       	mov	r11, r24
    1774:	09 c0       	rjmp	.+18     	; 0x1788 <vfprintf+0x272>
    1776:	24 ff       	sbrs	r18, 4
    1778:	0a c0       	rjmp	.+20     	; 0x178e <vfprintf+0x278>
    177a:	9f 2f       	mov	r25, r31
    177c:	96 60       	ori	r25, 0x06	; 6
    177e:	b9 2e       	mov	r11, r25
    1780:	06 c0       	rjmp	.+12     	; 0x178e <vfprintf+0x278>
    1782:	28 e0       	ldi	r18, 0x08	; 8
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	05 c0       	rjmp	.+10     	; 0x1792 <vfprintf+0x27c>
    1788:	20 e1       	ldi	r18, 0x10	; 16
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <vfprintf+0x27c>
    178e:	20 e1       	ldi	r18, 0x10	; 16
    1790:	32 e0       	ldi	r19, 0x02	; 2
    1792:	f8 01       	movw	r30, r16
    1794:	b7 fe       	sbrs	r11, 7
    1796:	07 c0       	rjmp	.+14     	; 0x17a6 <vfprintf+0x290>
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	93 81       	ldd	r25, Z+3	; 0x03
    17a0:	0c 5f       	subi	r16, 0xFC	; 252
    17a2:	1f 4f       	sbci	r17, 0xFF	; 255
    17a4:	06 c0       	rjmp	.+12     	; 0x17b2 <vfprintf+0x29c>
    17a6:	60 81       	ld	r22, Z
    17a8:	71 81       	ldd	r23, Z+1	; 0x01
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 5f       	subi	r16, 0xFE	; 254
    17b0:	1f 4f       	sbci	r17, 0xFF	; 255
    17b2:	a4 01       	movw	r20, r8
    17b4:	ec d0       	rcall	.+472    	; 0x198e <__ultoa_invert>
    17b6:	a8 2e       	mov	r10, r24
    17b8:	a8 18       	sub	r10, r8
    17ba:	fb 2d       	mov	r31, r11
    17bc:	ff 77       	andi	r31, 0x7F	; 127
    17be:	7f 2e       	mov	r7, r31
    17c0:	76 fe       	sbrs	r7, 6
    17c2:	0b c0       	rjmp	.+22     	; 0x17da <vfprintf+0x2c4>
    17c4:	37 2d       	mov	r19, r7
    17c6:	3e 7f       	andi	r19, 0xFE	; 254
    17c8:	a5 14       	cp	r10, r5
    17ca:	50 f4       	brcc	.+20     	; 0x17e0 <vfprintf+0x2ca>
    17cc:	74 fe       	sbrs	r7, 4
    17ce:	0a c0       	rjmp	.+20     	; 0x17e4 <vfprintf+0x2ce>
    17d0:	72 fc       	sbrc	r7, 2
    17d2:	08 c0       	rjmp	.+16     	; 0x17e4 <vfprintf+0x2ce>
    17d4:	37 2d       	mov	r19, r7
    17d6:	3e 7e       	andi	r19, 0xEE	; 238
    17d8:	05 c0       	rjmp	.+10     	; 0x17e4 <vfprintf+0x2ce>
    17da:	ba 2c       	mov	r11, r10
    17dc:	37 2d       	mov	r19, r7
    17de:	03 c0       	rjmp	.+6      	; 0x17e6 <vfprintf+0x2d0>
    17e0:	ba 2c       	mov	r11, r10
    17e2:	01 c0       	rjmp	.+2      	; 0x17e6 <vfprintf+0x2d0>
    17e4:	b5 2c       	mov	r11, r5
    17e6:	34 ff       	sbrs	r19, 4
    17e8:	0d c0       	rjmp	.+26     	; 0x1804 <vfprintf+0x2ee>
    17ea:	fe 01       	movw	r30, r28
    17ec:	ea 0d       	add	r30, r10
    17ee:	f1 1d       	adc	r31, r1
    17f0:	80 81       	ld	r24, Z
    17f2:	80 33       	cpi	r24, 0x30	; 48
    17f4:	11 f4       	brne	.+4      	; 0x17fa <vfprintf+0x2e4>
    17f6:	39 7e       	andi	r19, 0xE9	; 233
    17f8:	09 c0       	rjmp	.+18     	; 0x180c <vfprintf+0x2f6>
    17fa:	32 ff       	sbrs	r19, 2
    17fc:	06 c0       	rjmp	.+12     	; 0x180a <vfprintf+0x2f4>
    17fe:	b3 94       	inc	r11
    1800:	b3 94       	inc	r11
    1802:	04 c0       	rjmp	.+8      	; 0x180c <vfprintf+0x2f6>
    1804:	83 2f       	mov	r24, r19
    1806:	86 78       	andi	r24, 0x86	; 134
    1808:	09 f0       	breq	.+2      	; 0x180c <vfprintf+0x2f6>
    180a:	b3 94       	inc	r11
    180c:	33 fd       	sbrc	r19, 3
    180e:	12 c0       	rjmp	.+36     	; 0x1834 <vfprintf+0x31e>
    1810:	30 ff       	sbrs	r19, 0
    1812:	06 c0       	rjmp	.+12     	; 0x1820 <vfprintf+0x30a>
    1814:	5a 2c       	mov	r5, r10
    1816:	b3 14       	cp	r11, r3
    1818:	18 f4       	brcc	.+6      	; 0x1820 <vfprintf+0x30a>
    181a:	53 0c       	add	r5, r3
    181c:	5b 18       	sub	r5, r11
    181e:	b3 2c       	mov	r11, r3
    1820:	b3 14       	cp	r11, r3
    1822:	60 f4       	brcc	.+24     	; 0x183c <vfprintf+0x326>
    1824:	b7 01       	movw	r22, r14
    1826:	80 e2       	ldi	r24, 0x20	; 32
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	3c 87       	std	Y+12, r19	; 0x0c
    182c:	78 d0       	rcall	.+240    	; 0x191e <fputc>
    182e:	b3 94       	inc	r11
    1830:	3c 85       	ldd	r19, Y+12	; 0x0c
    1832:	f6 cf       	rjmp	.-20     	; 0x1820 <vfprintf+0x30a>
    1834:	b3 14       	cp	r11, r3
    1836:	10 f4       	brcc	.+4      	; 0x183c <vfprintf+0x326>
    1838:	3b 18       	sub	r3, r11
    183a:	01 c0       	rjmp	.+2      	; 0x183e <vfprintf+0x328>
    183c:	31 2c       	mov	r3, r1
    183e:	34 ff       	sbrs	r19, 4
    1840:	11 c0       	rjmp	.+34     	; 0x1864 <vfprintf+0x34e>
    1842:	b7 01       	movw	r22, r14
    1844:	80 e3       	ldi	r24, 0x30	; 48
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	3c 87       	std	Y+12, r19	; 0x0c
    184a:	69 d0       	rcall	.+210    	; 0x191e <fputc>
    184c:	3c 85       	ldd	r19, Y+12	; 0x0c
    184e:	32 ff       	sbrs	r19, 2
    1850:	16 c0       	rjmp	.+44     	; 0x187e <vfprintf+0x368>
    1852:	31 fd       	sbrc	r19, 1
    1854:	03 c0       	rjmp	.+6      	; 0x185c <vfprintf+0x346>
    1856:	88 e7       	ldi	r24, 0x78	; 120
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <vfprintf+0x34a>
    185c:	88 e5       	ldi	r24, 0x58	; 88
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	b7 01       	movw	r22, r14
    1862:	0c c0       	rjmp	.+24     	; 0x187c <vfprintf+0x366>
    1864:	83 2f       	mov	r24, r19
    1866:	86 78       	andi	r24, 0x86	; 134
    1868:	51 f0       	breq	.+20     	; 0x187e <vfprintf+0x368>
    186a:	31 ff       	sbrs	r19, 1
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <vfprintf+0x35c>
    186e:	8b e2       	ldi	r24, 0x2B	; 43
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <vfprintf+0x35e>
    1872:	80 e2       	ldi	r24, 0x20	; 32
    1874:	37 fd       	sbrc	r19, 7
    1876:	8d e2       	ldi	r24, 0x2D	; 45
    1878:	b7 01       	movw	r22, r14
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	50 d0       	rcall	.+160    	; 0x191e <fputc>
    187e:	a5 14       	cp	r10, r5
    1880:	30 f4       	brcc	.+12     	; 0x188e <vfprintf+0x378>
    1882:	b7 01       	movw	r22, r14
    1884:	80 e3       	ldi	r24, 0x30	; 48
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	4a d0       	rcall	.+148    	; 0x191e <fputc>
    188a:	5a 94       	dec	r5
    188c:	f8 cf       	rjmp	.-16     	; 0x187e <vfprintf+0x368>
    188e:	aa 94       	dec	r10
    1890:	f4 01       	movw	r30, r8
    1892:	ea 0d       	add	r30, r10
    1894:	f1 1d       	adc	r31, r1
    1896:	80 81       	ld	r24, Z
    1898:	b7 01       	movw	r22, r14
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	40 d0       	rcall	.+128    	; 0x191e <fputc>
    189e:	a1 10       	cpse	r10, r1
    18a0:	f6 cf       	rjmp	.-20     	; 0x188e <vfprintf+0x378>
    18a2:	33 20       	and	r3, r3
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <vfprintf+0x392>
    18a6:	5d ce       	rjmp	.-838    	; 0x1562 <vfprintf+0x4c>
    18a8:	b7 01       	movw	r22, r14
    18aa:	80 e2       	ldi	r24, 0x20	; 32
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	37 d0       	rcall	.+110    	; 0x191e <fputc>
    18b0:	3a 94       	dec	r3
    18b2:	f7 cf       	rjmp	.-18     	; 0x18a2 <vfprintf+0x38c>
    18b4:	f7 01       	movw	r30, r14
    18b6:	86 81       	ldd	r24, Z+6	; 0x06
    18b8:	97 81       	ldd	r25, Z+7	; 0x07
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <vfprintf+0x3aa>
    18bc:	8f ef       	ldi	r24, 0xFF	; 255
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	2c 96       	adiw	r28, 0x0c	; 12
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	ff 90       	pop	r15
    18d6:	ef 90       	pop	r14
    18d8:	df 90       	pop	r13
    18da:	cf 90       	pop	r12
    18dc:	bf 90       	pop	r11
    18de:	af 90       	pop	r10
    18e0:	9f 90       	pop	r9
    18e2:	8f 90       	pop	r8
    18e4:	7f 90       	pop	r7
    18e6:	6f 90       	pop	r6
    18e8:	5f 90       	pop	r5
    18ea:	4f 90       	pop	r4
    18ec:	3f 90       	pop	r3
    18ee:	2f 90       	pop	r2
    18f0:	08 95       	ret

000018f2 <strnlen_P>:
    18f2:	fc 01       	movw	r30, r24
    18f4:	05 90       	lpm	r0, Z+
    18f6:	61 50       	subi	r22, 0x01	; 1
    18f8:	70 40       	sbci	r23, 0x00	; 0
    18fa:	01 10       	cpse	r0, r1
    18fc:	d8 f7       	brcc	.-10     	; 0x18f4 <strnlen_P+0x2>
    18fe:	80 95       	com	r24
    1900:	90 95       	com	r25
    1902:	8e 0f       	add	r24, r30
    1904:	9f 1f       	adc	r25, r31
    1906:	08 95       	ret

00001908 <strnlen>:
    1908:	fc 01       	movw	r30, r24
    190a:	61 50       	subi	r22, 0x01	; 1
    190c:	70 40       	sbci	r23, 0x00	; 0
    190e:	01 90       	ld	r0, Z+
    1910:	01 10       	cpse	r0, r1
    1912:	d8 f7       	brcc	.-10     	; 0x190a <strnlen+0x2>
    1914:	80 95       	com	r24
    1916:	90 95       	com	r25
    1918:	8e 0f       	add	r24, r30
    191a:	9f 1f       	adc	r25, r31
    191c:	08 95       	ret

0000191e <fputc>:
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	fb 01       	movw	r30, r22
    1928:	23 81       	ldd	r18, Z+3	; 0x03
    192a:	21 fd       	sbrc	r18, 1
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <fputc+0x16>
    192e:	8f ef       	ldi	r24, 0xFF	; 255
    1930:	9f ef       	ldi	r25, 0xFF	; 255
    1932:	28 c0       	rjmp	.+80     	; 0x1984 <fputc+0x66>
    1934:	22 ff       	sbrs	r18, 2
    1936:	16 c0       	rjmp	.+44     	; 0x1964 <fputc+0x46>
    1938:	46 81       	ldd	r20, Z+6	; 0x06
    193a:	57 81       	ldd	r21, Z+7	; 0x07
    193c:	24 81       	ldd	r18, Z+4	; 0x04
    193e:	35 81       	ldd	r19, Z+5	; 0x05
    1940:	42 17       	cp	r20, r18
    1942:	53 07       	cpc	r21, r19
    1944:	44 f4       	brge	.+16     	; 0x1956 <fputc+0x38>
    1946:	a0 81       	ld	r26, Z
    1948:	b1 81       	ldd	r27, Z+1	; 0x01
    194a:	9d 01       	movw	r18, r26
    194c:	2f 5f       	subi	r18, 0xFF	; 255
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
    1950:	31 83       	std	Z+1, r19	; 0x01
    1952:	20 83       	st	Z, r18
    1954:	8c 93       	st	X, r24
    1956:	26 81       	ldd	r18, Z+6	; 0x06
    1958:	37 81       	ldd	r19, Z+7	; 0x07
    195a:	2f 5f       	subi	r18, 0xFF	; 255
    195c:	3f 4f       	sbci	r19, 0xFF	; 255
    195e:	37 83       	std	Z+7, r19	; 0x07
    1960:	26 83       	std	Z+6, r18	; 0x06
    1962:	10 c0       	rjmp	.+32     	; 0x1984 <fputc+0x66>
    1964:	eb 01       	movw	r28, r22
    1966:	09 2f       	mov	r16, r25
    1968:	18 2f       	mov	r17, r24
    196a:	00 84       	ldd	r0, Z+8	; 0x08
    196c:	f1 85       	ldd	r31, Z+9	; 0x09
    196e:	e0 2d       	mov	r30, r0
    1970:	19 95       	eicall
    1972:	89 2b       	or	r24, r25
    1974:	e1 f6       	brne	.-72     	; 0x192e <fputc+0x10>
    1976:	8e 81       	ldd	r24, Y+6	; 0x06
    1978:	9f 81       	ldd	r25, Y+7	; 0x07
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	9f 83       	std	Y+7, r25	; 0x07
    197e:	8e 83       	std	Y+6, r24	; 0x06
    1980:	81 2f       	mov	r24, r17
    1982:	90 2f       	mov	r25, r16
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	08 95       	ret

0000198e <__ultoa_invert>:
    198e:	fa 01       	movw	r30, r20
    1990:	aa 27       	eor	r26, r26
    1992:	28 30       	cpi	r18, 0x08	; 8
    1994:	51 f1       	breq	.+84     	; 0x19ea <__ultoa_invert+0x5c>
    1996:	20 31       	cpi	r18, 0x10	; 16
    1998:	81 f1       	breq	.+96     	; 0x19fa <__ultoa_invert+0x6c>
    199a:	e8 94       	clt
    199c:	6f 93       	push	r22
    199e:	6e 7f       	andi	r22, 0xFE	; 254
    19a0:	6e 5f       	subi	r22, 0xFE	; 254
    19a2:	7f 4f       	sbci	r23, 0xFF	; 255
    19a4:	8f 4f       	sbci	r24, 0xFF	; 255
    19a6:	9f 4f       	sbci	r25, 0xFF	; 255
    19a8:	af 4f       	sbci	r26, 0xFF	; 255
    19aa:	b1 e0       	ldi	r27, 0x01	; 1
    19ac:	3e d0       	rcall	.+124    	; 0x1a2a <__ultoa_invert+0x9c>
    19ae:	b4 e0       	ldi	r27, 0x04	; 4
    19b0:	3c d0       	rcall	.+120    	; 0x1a2a <__ultoa_invert+0x9c>
    19b2:	67 0f       	add	r22, r23
    19b4:	78 1f       	adc	r23, r24
    19b6:	89 1f       	adc	r24, r25
    19b8:	9a 1f       	adc	r25, r26
    19ba:	a1 1d       	adc	r26, r1
    19bc:	68 0f       	add	r22, r24
    19be:	79 1f       	adc	r23, r25
    19c0:	8a 1f       	adc	r24, r26
    19c2:	91 1d       	adc	r25, r1
    19c4:	a1 1d       	adc	r26, r1
    19c6:	6a 0f       	add	r22, r26
    19c8:	71 1d       	adc	r23, r1
    19ca:	81 1d       	adc	r24, r1
    19cc:	91 1d       	adc	r25, r1
    19ce:	a1 1d       	adc	r26, r1
    19d0:	20 d0       	rcall	.+64     	; 0x1a12 <__ultoa_invert+0x84>
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <__ultoa_invert+0x48>
    19d4:	68 94       	set
    19d6:	3f 91       	pop	r19
    19d8:	2a e0       	ldi	r18, 0x0A	; 10
    19da:	26 9f       	mul	r18, r22
    19dc:	11 24       	eor	r1, r1
    19de:	30 19       	sub	r19, r0
    19e0:	30 5d       	subi	r19, 0xD0	; 208
    19e2:	31 93       	st	Z+, r19
    19e4:	de f6       	brtc	.-74     	; 0x199c <__ultoa_invert+0xe>
    19e6:	cf 01       	movw	r24, r30
    19e8:	08 95       	ret
    19ea:	46 2f       	mov	r20, r22
    19ec:	47 70       	andi	r20, 0x07	; 7
    19ee:	40 5d       	subi	r20, 0xD0	; 208
    19f0:	41 93       	st	Z+, r20
    19f2:	b3 e0       	ldi	r27, 0x03	; 3
    19f4:	0f d0       	rcall	.+30     	; 0x1a14 <__ultoa_invert+0x86>
    19f6:	c9 f7       	brne	.-14     	; 0x19ea <__ultoa_invert+0x5c>
    19f8:	f6 cf       	rjmp	.-20     	; 0x19e6 <__ultoa_invert+0x58>
    19fa:	46 2f       	mov	r20, r22
    19fc:	4f 70       	andi	r20, 0x0F	; 15
    19fe:	40 5d       	subi	r20, 0xD0	; 208
    1a00:	4a 33       	cpi	r20, 0x3A	; 58
    1a02:	18 f0       	brcs	.+6      	; 0x1a0a <__ultoa_invert+0x7c>
    1a04:	49 5d       	subi	r20, 0xD9	; 217
    1a06:	31 fd       	sbrc	r19, 1
    1a08:	40 52       	subi	r20, 0x20	; 32
    1a0a:	41 93       	st	Z+, r20
    1a0c:	02 d0       	rcall	.+4      	; 0x1a12 <__ultoa_invert+0x84>
    1a0e:	a9 f7       	brne	.-22     	; 0x19fa <__ultoa_invert+0x6c>
    1a10:	ea cf       	rjmp	.-44     	; 0x19e6 <__ultoa_invert+0x58>
    1a12:	b4 e0       	ldi	r27, 0x04	; 4
    1a14:	a6 95       	lsr	r26
    1a16:	97 95       	ror	r25
    1a18:	87 95       	ror	r24
    1a1a:	77 95       	ror	r23
    1a1c:	67 95       	ror	r22
    1a1e:	ba 95       	dec	r27
    1a20:	c9 f7       	brne	.-14     	; 0x1a14 <__ultoa_invert+0x86>
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	61 05       	cpc	r22, r1
    1a26:	71 05       	cpc	r23, r1
    1a28:	08 95       	ret
    1a2a:	9b 01       	movw	r18, r22
    1a2c:	ac 01       	movw	r20, r24
    1a2e:	0a 2e       	mov	r0, r26
    1a30:	06 94       	lsr	r0
    1a32:	57 95       	ror	r21
    1a34:	47 95       	ror	r20
    1a36:	37 95       	ror	r19
    1a38:	27 95       	ror	r18
    1a3a:	ba 95       	dec	r27
    1a3c:	c9 f7       	brne	.-14     	; 0x1a30 <__ultoa_invert+0xa2>
    1a3e:	62 0f       	add	r22, r18
    1a40:	73 1f       	adc	r23, r19
    1a42:	84 1f       	adc	r24, r20
    1a44:	95 1f       	adc	r25, r21
    1a46:	a0 1d       	adc	r26, r0
    1a48:	08 95       	ret

00001a4a <_exit>:
    1a4a:	f8 94       	cli

00001a4c <__stop_program>:
    1a4c:	ff cf       	rjmp	.-2      	; 0x1a4c <__stop_program>
