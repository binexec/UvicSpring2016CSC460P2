
p2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006d0  00800200  00001806  0000189a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001806  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000140d  008008d0  008008d0  00001f6a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00002008  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e5f  00000000  00000000  000021d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000832  00000000  00000000  0000402f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001272  00000000  00000000  00004861  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  00005ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082c  00000000  00000000  00005f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012c1  00000000  00000000  00006768  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00007a29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c0       	rjmp	.+252    	; 0xfe <__ctors_end>
       2:	00 00       	nop
       4:	9c c0       	rjmp	.+312    	; 0x13e <__bad_interrupt>
       6:	00 00       	nop
       8:	9a c0       	rjmp	.+308    	; 0x13e <__bad_interrupt>
       a:	00 00       	nop
       c:	98 c0       	rjmp	.+304    	; 0x13e <__bad_interrupt>
       e:	00 00       	nop
      10:	96 c0       	rjmp	.+300    	; 0x13e <__bad_interrupt>
      12:	00 00       	nop
      14:	94 c0       	rjmp	.+296    	; 0x13e <__bad_interrupt>
      16:	00 00       	nop
      18:	92 c0       	rjmp	.+292    	; 0x13e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	90 c0       	rjmp	.+288    	; 0x13e <__bad_interrupt>
      1e:	00 00       	nop
      20:	8e c0       	rjmp	.+284    	; 0x13e <__bad_interrupt>
      22:	00 00       	nop
      24:	8c c0       	rjmp	.+280    	; 0x13e <__bad_interrupt>
      26:	00 00       	nop
      28:	8a c0       	rjmp	.+276    	; 0x13e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	88 c0       	rjmp	.+272    	; 0x13e <__bad_interrupt>
      2e:	00 00       	nop
      30:	86 c0       	rjmp	.+268    	; 0x13e <__bad_interrupt>
      32:	00 00       	nop
      34:	84 c0       	rjmp	.+264    	; 0x13e <__bad_interrupt>
      36:	00 00       	nop
      38:	82 c0       	rjmp	.+260    	; 0x13e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	80 c0       	rjmp	.+256    	; 0x13e <__bad_interrupt>
      3e:	00 00       	nop
      40:	7e c0       	rjmp	.+252    	; 0x13e <__bad_interrupt>
      42:	00 00       	nop
      44:	62 c2       	rjmp	.+1220   	; 0x50a <__vector_17>
      46:	00 00       	nop
      48:	7a c0       	rjmp	.+244    	; 0x13e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	78 c0       	rjmp	.+240    	; 0x13e <__bad_interrupt>
      4e:	00 00       	nop
      50:	76 c0       	rjmp	.+236    	; 0x13e <__bad_interrupt>
      52:	00 00       	nop
      54:	74 c0       	rjmp	.+232    	; 0x13e <__bad_interrupt>
      56:	00 00       	nop
      58:	72 c0       	rjmp	.+228    	; 0x13e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	70 c0       	rjmp	.+224    	; 0x13e <__bad_interrupt>
      5e:	00 00       	nop
      60:	6e c0       	rjmp	.+220    	; 0x13e <__bad_interrupt>
      62:	00 00       	nop
      64:	6c c0       	rjmp	.+216    	; 0x13e <__bad_interrupt>
      66:	00 00       	nop
      68:	6a c0       	rjmp	.+212    	; 0x13e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	68 c0       	rjmp	.+208    	; 0x13e <__bad_interrupt>
      6e:	00 00       	nop
      70:	66 c0       	rjmp	.+204    	; 0x13e <__bad_interrupt>
      72:	00 00       	nop
      74:	64 c0       	rjmp	.+200    	; 0x13e <__bad_interrupt>
      76:	00 00       	nop
      78:	62 c0       	rjmp	.+196    	; 0x13e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	60 c0       	rjmp	.+192    	; 0x13e <__bad_interrupt>
      7e:	00 00       	nop
      80:	5e c0       	rjmp	.+188    	; 0x13e <__bad_interrupt>
      82:	00 00       	nop
      84:	5c c0       	rjmp	.+184    	; 0x13e <__bad_interrupt>
      86:	00 00       	nop
      88:	5a c0       	rjmp	.+180    	; 0x13e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	58 c0       	rjmp	.+176    	; 0x13e <__bad_interrupt>
      8e:	00 00       	nop
      90:	56 c0       	rjmp	.+172    	; 0x13e <__bad_interrupt>
      92:	00 00       	nop
      94:	54 c0       	rjmp	.+168    	; 0x13e <__bad_interrupt>
      96:	00 00       	nop
      98:	52 c0       	rjmp	.+164    	; 0x13e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	50 c0       	rjmp	.+160    	; 0x13e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4e c0       	rjmp	.+156    	; 0x13e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4c c0       	rjmp	.+152    	; 0x13e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4a c0       	rjmp	.+148    	; 0x13e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	48 c0       	rjmp	.+144    	; 0x13e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	46 c0       	rjmp	.+140    	; 0x13e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	44 c0       	rjmp	.+136    	; 0x13e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	42 c0       	rjmp	.+132    	; 0x13e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	40 c0       	rjmp	.+128    	; 0x13e <__bad_interrupt>
      be:	00 00       	nop
      c0:	3e c0       	rjmp	.+124    	; 0x13e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3c c0       	rjmp	.+120    	; 0x13e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3a c0       	rjmp	.+116    	; 0x13e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	38 c0       	rjmp	.+112    	; 0x13e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	36 c0       	rjmp	.+108    	; 0x13e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	34 c0       	rjmp	.+104    	; 0x13e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	32 c0       	rjmp	.+100    	; 0x13e <__bad_interrupt>
      da:	00 00       	nop
      dc:	30 c0       	rjmp	.+96     	; 0x13e <__bad_interrupt>
      de:	00 00       	nop
      e0:	2e c0       	rjmp	.+92     	; 0x13e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c5 07       	cpc	r28, r21
      e6:	82 04       	cpc	r8, r2
      e8:	c5 07       	cpc	r28, r21
      ea:	8c 04       	cpc	r8, r12
      ec:	9a 04       	cpc	r9, r10
      ee:	c2 04       	cpc	r12, r2
      f0:	f3 04       	cpc	r15, r3
      f2:	f9 04       	cpc	r15, r9
      f4:	56 05       	cpc	r21, r6
      f6:	ab 05       	cpc	r26, r11
      f8:	f4 05       	cpc	r31, r4
      fa:	7d 06       	cpc	r7, r29
      fc:	0a 07       	cpc	r16, r26

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d1 e2       	ldi	r29, 0x21	; 33
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0c bf       	out	0x3c, r16	; 60

0000010e <__do_copy_data>:
     10e:	18 e0       	ldi	r17, 0x08	; 8
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	e6 e0       	ldi	r30, 0x06	; 6
     116:	f8 e1       	ldi	r31, 0x18	; 24
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	0b bf       	out	0x3b, r16	; 59
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x14>
     11e:	07 90       	elpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a0 3d       	cpi	r26, 0xD0	; 208
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0x10>

00000128 <__do_clear_bss>:
     128:	2c e1       	ldi	r18, 0x1C	; 28
     12a:	a0 ed       	ldi	r26, 0xD0	; 208
     12c:	b8 e0       	ldi	r27, 0x08	; 8
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	ad 3d       	cpi	r26, 0xDD	; 221
     134:	b2 07       	cpc	r27, r18
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	fb d7       	rcall	.+4086   	; 0x1130 <main>
     13a:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <_exit>

0000013e <__bad_interrupt>:
     13e:	60 cf       	rjmp	.-320    	; 0x0 <__vectors>

00000140 <CSwitch>:
Exit_Kernel:
        /* 
          * This is the "top" half of CSwitch(), generally called by the kernel.
          * Assume I = 0, i.e., all interrupts are disabled.
          */
        SAVECTX
     140:	0f 92       	push	r0
     142:	1f 92       	push	r1
     144:	2f 92       	push	r2
     146:	3f 92       	push	r3
     148:	4f 92       	push	r4
     14a:	5f 92       	push	r5
     14c:	6f 92       	push	r6
     14e:	7f 92       	push	r7
     150:	8f 92       	push	r8
     152:	9f 92       	push	r9
     154:	af 92       	push	r10
     156:	bf 92       	push	r11
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	2f 93       	push	r18
     166:	3f 93       	push	r19
     168:	4f 93       	push	r20
     16a:	5f 93       	push	r21
     16c:	6f 93       	push	r22
     16e:	7f 93       	push	r23
     170:	8f 93       	push	r24
     172:	9f 93       	push	r25
     174:	af 93       	push	r26
     176:	bf 93       	push	r27
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	ef 93       	push	r30
     17e:	ff 93       	push	r31
     180:	fc b7       	in	r31, 0x3c	; 60
     182:	ff 93       	push	r31
     184:	ff b7       	in	r31, 0x3f	; 63
     186:	ff 93       	push	r31
        /* 
          * Now, we have saved the kernel's context.
          * Save the current H/W stack pointer into KernelSp.
          */
        in   r30, SPL
     188:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     18a:	fe b7       	in	r31, 0x3e	; 62
        sts  KernelSp, r30
     18c:	e0 93 cd 1c 	sts	0x1CCD, r30
        sts  KernelSp+1, r31
     190:	f0 93 ce 1c 	sts	0x1CCE, r31
        /*
          * We are now ready to restore Cp's context, i.e.,
          * switching the H/W stack pointer to CurrentSp.
          */ 
        lds  r30, CurrentSp
     194:	e0 91 c7 1c 	lds	r30, 0x1CC7
        lds  r31, CurrentSp+1
     198:	f0 91 c8 1c 	lds	r31, 0x1CC8
        out  SPL, r30
     19c:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     19e:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in Cp's stack.
          * Note: at the bottom of the Cp's context is its return address.
          */
        RESTORECTX
     1a0:	ff 91       	pop	r31
     1a2:	ff bf       	out	0x3f, r31	; 63
     1a4:	ff 91       	pop	r31
     1a6:	fc bf       	out	0x3c, r31	; 60
     1a8:	ff 91       	pop	r31
     1aa:	ef 91       	pop	r30
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	bf 91       	pop	r27
     1b2:	af 91       	pop	r26
     1b4:	9f 91       	pop	r25
     1b6:	8f 91       	pop	r24
     1b8:	7f 91       	pop	r23
     1ba:	6f 91       	pop	r22
     1bc:	5f 91       	pop	r21
     1be:	4f 91       	pop	r20
     1c0:	3f 91       	pop	r19
     1c2:	2f 91       	pop	r18
     1c4:	1f 91       	pop	r17
     1c6:	0f 91       	pop	r16
     1c8:	ff 90       	pop	r15
     1ca:	ef 90       	pop	r14
     1cc:	df 90       	pop	r13
     1ce:	cf 90       	pop	r12
     1d0:	bf 90       	pop	r11
     1d2:	af 90       	pop	r10
     1d4:	9f 90       	pop	r9
     1d6:	8f 90       	pop	r8
     1d8:	7f 90       	pop	r7
     1da:	6f 90       	pop	r6
     1dc:	5f 90       	pop	r5
     1de:	4f 90       	pop	r4
     1e0:	3f 90       	pop	r3
     1e2:	2f 90       	pop	r2
     1e4:	1f 90       	pop	r1
     1e6:	0f 90       	pop	r0
        reti         /* re-enable all global interrupts */
     1e8:	18 95       	reti

000001ea <Enter_Kernel>:
Enter_Kernel:   
        /*
          * This is the "bottom" half of CSwitch(). We are still executing in
          * Cp's context.
          */
        SAVECTX
     1ea:	0f 92       	push	r0
     1ec:	1f 92       	push	r1
     1ee:	2f 92       	push	r2
     1f0:	3f 92       	push	r3
     1f2:	4f 92       	push	r4
     1f4:	5f 92       	push	r5
     1f6:	6f 92       	push	r6
     1f8:	7f 92       	push	r7
     1fa:	8f 92       	push	r8
     1fc:	9f 92       	push	r9
     1fe:	af 92       	push	r10
     200:	bf 92       	push	r11
     202:	cf 92       	push	r12
     204:	df 92       	push	r13
     206:	ef 92       	push	r14
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	2f 93       	push	r18
     210:	3f 93       	push	r19
     212:	4f 93       	push	r20
     214:	5f 93       	push	r21
     216:	6f 93       	push	r22
     218:	7f 93       	push	r23
     21a:	8f 93       	push	r24
     21c:	9f 93       	push	r25
     21e:	af 93       	push	r26
     220:	bf 93       	push	r27
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	ef 93       	push	r30
     228:	ff 93       	push	r31
     22a:	fc b7       	in	r31, 0x3c	; 60
     22c:	ff 93       	push	r31
     22e:	ff b7       	in	r31, 0x3f	; 63
     230:	ff 93       	push	r31
        /* 
          * Now, we have saved the Cp's context.
          * Save the current H/W stack pointer into CurrentSp.
          */
        in   r30, SPL
     232:	ed b7       	in	r30, 0x3d	; 61
        in   r31, SPH
     234:	fe b7       	in	r31, 0x3e	; 62
        sts  CurrentSp, r30
     236:	e0 93 c7 1c 	sts	0x1CC7, r30
        sts  CurrentSp+1, r31
     23a:	f0 93 c8 1c 	sts	0x1CC8, r31
        /*
          * We are now ready to restore kernel's context, i.e.,
          * switching the H/W stack pointer back to KernelSp.
          */ 
        lds  r30, KernelSp
     23e:	e0 91 cd 1c 	lds	r30, 0x1CCD
        lds  r31, KernelSp+1
     242:	f0 91 ce 1c 	lds	r31, 0x1CCE
        out  SPL, r30
     246:	ed bf       	out	0x3d, r30	; 61
        out  SPH, r31
     248:	fe bf       	out	0x3e, r31	; 62
        /*
          * We are now executing in kernel's stack.
          */
       RESTORECTX
     24a:	ff 91       	pop	r31
     24c:	ff bf       	out	0x3f, r31	; 63
     24e:	ff 91       	pop	r31
     250:	fc bf       	out	0x3c, r31	; 60
     252:	ff 91       	pop	r31
     254:	ef 91       	pop	r30
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	bf 91       	pop	r27
     25c:	af 91       	pop	r26
     25e:	9f 91       	pop	r25
     260:	8f 91       	pop	r24
     262:	7f 91       	pop	r23
     264:	6f 91       	pop	r22
     266:	5f 91       	pop	r21
     268:	4f 91       	pop	r20
     26a:	3f 91       	pop	r19
     26c:	2f 91       	pop	r18
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	ff 90       	pop	r15
     274:	ef 90       	pop	r14
     276:	df 90       	pop	r13
     278:	cf 90       	pop	r12
     27a:	bf 90       	pop	r11
     27c:	af 90       	pop	r10
     27e:	9f 90       	pop	r9
     280:	8f 90       	pop	r8
     282:	7f 90       	pop	r7
     284:	6f 90       	pop	r6
     286:	5f 90       	pop	r5
     288:	4f 90       	pop	r4
     28a:	3f 90       	pop	r3
     28c:	2f 90       	pop	r2
     28e:	1f 90       	pop	r1
     290:	0f 90       	pop	r0
        /* 
          * We are ready to return to the caller of CSwitch() (or Exit_Kernel()).
          * Note: We should NOT re-enable interrupts while kernel is running.
          *         Therefore, we use "ret", and not "reti".
          */
       ret
     292:	08 95       	ret

00000294 <Dispatch>:
	
	if(e1 == NULL) 
		return 0;
		
	return e1->count;	
}
     294:	20 e1       	ldi	r18, 0x10	; 16
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	af ef       	ldi	r26, 0xFF	; 255
     29a:	bf ef       	ldi	r27, 0xFF	; 255
     29c:	6b e0       	ldi	r22, 0x0B	; 11
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	4e e0       	ldi	r20, 0x0E	; 14
     2a2:	51 e0       	ldi	r21, 0x01	; 1
     2a4:	80 91 d6 08 	lds	r24, 0x08D6
     2a8:	90 91 d7 08 	lds	r25, 0x08D7
     2ac:	01 96       	adiw	r24, 0x01	; 1
     2ae:	8f 70       	andi	r24, 0x0F	; 15
     2b0:	99 27       	eor	r25, r25
     2b2:	90 93 d7 08 	sts	0x08D7, r25
     2b6:	80 93 d6 08 	sts	0x08D6, r24
     2ba:	80 91 d6 08 	lds	r24, 0x08D6
     2be:	90 91 d7 08 	lds	r25, 0x08D7
     2c2:	84 9f       	mul	r24, r20
     2c4:	f0 01       	movw	r30, r0
     2c6:	85 9f       	mul	r24, r21
     2c8:	f0 0d       	add	r31, r0
     2ca:	94 9f       	mul	r25, r20
     2cc:	f0 0d       	add	r31, r0
     2ce:	11 24       	eor	r1, r1
     2d0:	e0 52       	subi	r30, 0x20	; 32
     2d2:	f4 4f       	sbci	r31, 0xF4	; 244
     2d4:	83 81       	ldd	r24, Z+3	; 0x03
     2d6:	81 30       	cpi	r24, 0x01	; 1
     2d8:	29 f5       	brne	.+74     	; 0x324 <Dispatch+0x90>
     2da:	80 91 d6 08 	lds	r24, 0x08D6
     2de:	90 91 d7 08 	lds	r25, 0x08D7
     2e2:	84 9f       	mul	r24, r20
     2e4:	f0 01       	movw	r30, r0
     2e6:	85 9f       	mul	r24, r21
     2e8:	f0 0d       	add	r31, r0
     2ea:	94 9f       	mul	r25, r20
     2ec:	f0 0d       	add	r31, r0
     2ee:	11 24       	eor	r1, r1
     2f0:	e0 52       	subi	r30, 0x20	; 32
     2f2:	f4 4f       	sbci	r31, 0xF4	; 244
     2f4:	82 81       	ldd	r24, Z+2	; 0x02
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	86 17       	cp	r24, r22
     2fa:	97 07       	cpc	r25, r23
     2fc:	9c f4       	brge	.+38     	; 0x324 <Dispatch+0x90>
     2fe:	80 91 d6 08 	lds	r24, 0x08D6
     302:	90 91 d7 08 	lds	r25, 0x08D7
     306:	84 9f       	mul	r24, r20
     308:	f0 01       	movw	r30, r0
     30a:	85 9f       	mul	r24, r21
     30c:	f0 0d       	add	r31, r0
     30e:	94 9f       	mul	r25, r20
     310:	f0 0d       	add	r31, r0
     312:	11 24       	eor	r1, r1
     314:	e0 52       	subi	r30, 0x20	; 32
     316:	f4 4f       	sbci	r31, 0xF4	; 244
     318:	62 81       	ldd	r22, Z+2	; 0x02
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	a0 91 d6 08 	lds	r26, 0x08D6
     320:	b0 91 d7 08 	lds	r27, 0x08D7
     324:	21 50       	subi	r18, 0x01	; 1
     326:	31 09       	sbc	r19, r1
     328:	09 f0       	breq	.+2      	; 0x32c <Dispatch+0x98>
     32a:	bc cf       	rjmp	.-136    	; 0x2a4 <Dispatch+0x10>
     32c:	af 3f       	cpi	r26, 0xFF	; 255
     32e:	8f ef       	ldi	r24, 0xFF	; 255
     330:	b8 07       	cpc	r27, r24
     332:	09 f5       	brne	.+66     	; 0x376 <Dispatch+0xe2>
     334:	78 94       	sei
     336:	2e e0       	ldi	r18, 0x0E	; 14
     338:	31 e0       	ldi	r19, 0x01	; 1
     33a:	0b c0       	rjmp	.+22     	; 0x352 <Dispatch+0xbe>
     33c:	80 91 d6 08 	lds	r24, 0x08D6
     340:	90 91 d7 08 	lds	r25, 0x08D7
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	8f 70       	andi	r24, 0x0F	; 15
     348:	99 27       	eor	r25, r25
     34a:	90 93 d7 08 	sts	0x08D7, r25
     34e:	80 93 d6 08 	sts	0x08D6, r24
     352:	80 91 d6 08 	lds	r24, 0x08D6
     356:	90 91 d7 08 	lds	r25, 0x08D7
     35a:	82 9f       	mul	r24, r18
     35c:	f0 01       	movw	r30, r0
     35e:	83 9f       	mul	r24, r19
     360:	f0 0d       	add	r31, r0
     362:	92 9f       	mul	r25, r18
     364:	f0 0d       	add	r31, r0
     366:	11 24       	eor	r1, r1
     368:	e0 52       	subi	r30, 0x20	; 32
     36a:	f4 4f       	sbci	r31, 0xF4	; 244
     36c:	83 81       	ldd	r24, Z+3	; 0x03
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	29 f7       	brne	.-54     	; 0x33c <Dispatch+0xa8>
     372:	f8 94       	cli
     374:	04 c0       	rjmp	.+8      	; 0x37e <Dispatch+0xea>
     376:	b0 93 d7 08 	sts	0x08D7, r27
     37a:	a0 93 d6 08 	sts	0x08D6, r26
     37e:	20 91 d6 08 	lds	r18, 0x08D6
     382:	30 91 d7 08 	lds	r19, 0x08D7
     386:	8e e0       	ldi	r24, 0x0E	; 14
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	28 9f       	mul	r18, r24
     38c:	f0 01       	movw	r30, r0
     38e:	29 9f       	mul	r18, r25
     390:	f0 0d       	add	r31, r0
     392:	38 9f       	mul	r19, r24
     394:	f0 0d       	add	r31, r0
     396:	11 24       	eor	r1, r1
     398:	e0 52       	subi	r30, 0x20	; 32
     39a:	f4 4f       	sbci	r31, 0xF4	; 244
     39c:	f0 93 ca 1c 	sts	0x1CCA, r31
     3a0:	e0 93 c9 1c 	sts	0x1CC9, r30
     3a4:	82 85       	ldd	r24, Z+10	; 0x0a
     3a6:	93 85       	ldd	r25, Z+11	; 0x0b
     3a8:	90 93 c8 1c 	sts	0x1CC8, r25
     3ac:	80 93 c7 1c 	sts	0x1CC7, r24
     3b0:	82 e0       	ldi	r24, 0x02	; 2
     3b2:	83 83       	std	Z+3, r24	; 0x03
     3b4:	08 95       	ret

000003b6 <findProcessByPID>:
     3b6:	18 16       	cp	r1, r24
     3b8:	19 06       	cpc	r1, r25
     3ba:	84 f5       	brge	.+96     	; 0x41c <findProcessByPID+0x66>
     3bc:	20 91 e0 0b 	lds	r18, 0x0BE0
     3c0:	30 91 e1 0b 	lds	r19, 0x0BE1
     3c4:	28 17       	cp	r18, r24
     3c6:	39 07       	cpc	r19, r25
     3c8:	99 f0       	breq	.+38     	; 0x3f0 <findProcessByPID+0x3a>
     3ca:	21 e0       	ldi	r18, 0x01	; 1
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	6e e0       	ldi	r22, 0x0E	; 14
     3d0:	71 e0       	ldi	r23, 0x01	; 1
     3d2:	26 9f       	mul	r18, r22
     3d4:	f0 01       	movw	r30, r0
     3d6:	27 9f       	mul	r18, r23
     3d8:	f0 0d       	add	r31, r0
     3da:	36 9f       	mul	r19, r22
     3dc:	f0 0d       	add	r31, r0
     3de:	11 24       	eor	r1, r1
     3e0:	e0 52       	subi	r30, 0x20	; 32
     3e2:	f4 4f       	sbci	r31, 0xF4	; 244
     3e4:	40 81       	ld	r20, Z
     3e6:	51 81       	ldd	r21, Z+1	; 0x01
     3e8:	48 17       	cp	r20, r24
     3ea:	59 07       	cpc	r21, r25
     3ec:	79 f4       	brne	.+30     	; 0x40c <findProcessByPID+0x56>
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <findProcessByPID+0x3e>
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	4e e0       	ldi	r20, 0x0E	; 14
     3f6:	51 e0       	ldi	r21, 0x01	; 1
     3f8:	24 9f       	mul	r18, r20
     3fa:	c0 01       	movw	r24, r0
     3fc:	25 9f       	mul	r18, r21
     3fe:	90 0d       	add	r25, r0
     400:	34 9f       	mul	r19, r20
     402:	90 0d       	add	r25, r0
     404:	11 24       	eor	r1, r1
     406:	80 52       	subi	r24, 0x20	; 32
     408:	94 4f       	sbci	r25, 0xF4	; 244
     40a:	08 95       	ret
     40c:	2f 5f       	subi	r18, 0xFF	; 255
     40e:	3f 4f       	sbci	r19, 0xFF	; 255
     410:	20 31       	cpi	r18, 0x10	; 16
     412:	31 05       	cpc	r19, r1
     414:	f1 f6       	brne	.-68     	; 0x3d2 <findProcessByPID+0x1c>
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	08 95       	ret
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	08 95       	ret

00000422 <findEventByEventID>:
     422:	00 97       	sbiw	r24, 0x00	; 0
     424:	51 f0       	breq	.+20     	; 0x43a <findEventByEventID+0x18>
     426:	20 91 b0 0b 	lds	r18, 0x0BB0
     42a:	30 91 b1 0b 	lds	r19, 0x0BB1
     42e:	28 17       	cp	r18, r24
     430:	39 07       	cpc	r19, r25
     432:	d9 f0       	breq	.+54     	; 0x46a <findEventByEventID+0x48>
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	09 c0       	rjmp	.+18     	; 0x44c <findEventByEventID+0x2a>
     43a:	8c e1       	ldi	r24, 0x1C	; 28
     43c:	92 e0       	ldi	r25, 0x02	; 2
     43e:	17 d7       	rcall	.+3630   	; 0x126e <puts>
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	80 93 c6 1c 	sts	0x1CC6, r24
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	08 95       	ret
     44c:	f9 01       	movw	r30, r18
     44e:	ee 0f       	add	r30, r30
     450:	ff 1f       	adc	r31, r31
     452:	e2 0f       	add	r30, r18
     454:	f3 1f       	adc	r31, r19
     456:	ee 0f       	add	r30, r30
     458:	ff 1f       	adc	r31, r31
     45a:	e0 55       	subi	r30, 0x50	; 80
     45c:	f4 4f       	sbci	r31, 0xF4	; 244
     45e:	40 81       	ld	r20, Z
     460:	51 81       	ldd	r21, Z+1	; 0x01
     462:	48 17       	cp	r20, r24
     464:	59 07       	cpc	r21, r25
     466:	69 f4       	brne	.+26     	; 0x482 <findEventByEventID+0x60>
     468:	02 c0       	rjmp	.+4      	; 0x46e <findEventByEventID+0x4c>
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	c9 01       	movw	r24, r18
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	82 0f       	add	r24, r18
     476:	93 1f       	adc	r25, r19
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	80 55       	subi	r24, 0x50	; 80
     47e:	94 4f       	sbci	r25, 0xF4	; 244
     480:	08 95       	ret
     482:	2f 5f       	subi	r18, 0xFF	; 255
     484:	3f 4f       	sbci	r19, 0xFF	; 255
     486:	28 30       	cpi	r18, 0x08	; 8
     488:	31 05       	cpc	r19, r1
     48a:	01 f7       	brne	.-64     	; 0x44c <findEventByEventID+0x2a>
     48c:	89 e0       	ldi	r24, 0x09	; 9
     48e:	80 93 c6 1c 	sts	0x1CC6, r24
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	08 95       	ret

00000498 <findMutexByEventID>:
     498:	00 97       	sbiw	r24, 0x00	; 0
     49a:	59 f0       	breq	.+22     	; 0x4b2 <findMutexByEventID+0x1a>
     49c:	20 91 d8 08 	lds	r18, 0x08D8
     4a0:	30 91 d9 08 	lds	r19, 0x08D9
     4a4:	28 17       	cp	r18, r24
     4a6:	39 07       	cpc	r19, r25
     4a8:	d1 f0       	breq	.+52     	; 0x4de <findMutexByEventID+0x46>
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	6b e5       	ldi	r22, 0x5B	; 91
     4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <findMutexByEventID+0x2c>
     4b2:	8e e4       	ldi	r24, 0x4E	; 78
     4b4:	92 e0       	ldi	r25, 0x02	; 2
     4b6:	db d6       	rcall	.+3510   	; 0x126e <puts>
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	80 93 c6 1c 	sts	0x1CC6, r24
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 95       	ret
     4c4:	62 9f       	mul	r22, r18
     4c6:	f0 01       	movw	r30, r0
     4c8:	63 9f       	mul	r22, r19
     4ca:	f0 0d       	add	r31, r0
     4cc:	11 24       	eor	r1, r1
     4ce:	e8 52       	subi	r30, 0x28	; 40
     4d0:	f7 4f       	sbci	r31, 0xF7	; 247
     4d2:	40 81       	ld	r20, Z
     4d4:	51 81       	ldd	r21, Z+1	; 0x01
     4d6:	48 17       	cp	r20, r24
     4d8:	59 07       	cpc	r21, r25
     4da:	61 f4       	brne	.+24     	; 0x4f4 <findMutexByEventID+0x5c>
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <findMutexByEventID+0x4a>
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	4b e5       	ldi	r20, 0x5B	; 91
     4e4:	42 9f       	mul	r20, r18
     4e6:	c0 01       	movw	r24, r0
     4e8:	43 9f       	mul	r20, r19
     4ea:	90 0d       	add	r25, r0
     4ec:	11 24       	eor	r1, r1
     4ee:	88 52       	subi	r24, 0x28	; 40
     4f0:	97 4f       	sbci	r25, 0xF7	; 247
     4f2:	08 95       	ret
     4f4:	2f 5f       	subi	r18, 0xFF	; 255
     4f6:	3f 4f       	sbci	r19, 0xFF	; 255
     4f8:	28 30       	cpi	r18, 0x08	; 8
     4fa:	31 05       	cpc	r19, r1
     4fc:	19 f7       	brne	.-58     	; 0x4c4 <findMutexByEventID+0x2c>
     4fe:	8d e0       	ldi	r24, 0x0D	; 13
     500:	80 93 c6 1c 	sts	0x1CC6, r24
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	08 95       	ret

0000050a <__vector_17>:
/************************************************************************/

//This ISR processes all tasks that are currently sleeping and waking them up when their tick expires
//Maybe we should move most of the code here into a function and have it run in the kernel main loop?
ISR(TIMER1_COMPA_vect)
{
     50a:	1f 92       	push	r1
     50c:	0f 92       	push	r0
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	0b b6       	in	r0, 0x3b	; 59
     516:	0f 92       	push	r0
     518:	2f 93       	push	r18
     51a:	3f 93       	push	r19
     51c:	4f 93       	push	r20
     51e:	5f 93       	push	r21
     520:	6f 93       	push	r22
     522:	8f 93       	push	r24
     524:	9f 93       	push	r25
     526:	ef 93       	push	r30
     528:	ff 93       	push	r31
	int i;
	for(i=0; i<MAXTHREAD; i++)
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Process any active tasks that are sleeping
		if(Process[i].state == SLEEPING)
     52e:	2e e0       	ldi	r18, 0x0E	; 14
     530:	31 e0       	ldi	r19, 0x01	; 1
		//Process any SUSPENDED tasks that were previously sleeping
		else if(Process[i].last_state == SLEEPING)
		{
			//When task_resume is called again, the task will be back into its READY state instead if its sleep ticks expired.
			if(--Process[i].request_arg <= 0)
				Process[i].last_state = READY;
     532:	61 e0       	ldi	r22, 0x01	; 1
{
	int i;
	for(i=0; i<MAXTHREAD; i++)
	{
		//Process any active tasks that are sleeping
		if(Process[i].state == SLEEPING)
     534:	82 9f       	mul	r24, r18
     536:	f0 01       	movw	r30, r0
     538:	83 9f       	mul	r24, r19
     53a:	f0 0d       	add	r31, r0
     53c:	92 9f       	mul	r25, r18
     53e:	f0 0d       	add	r31, r0
     540:	11 24       	eor	r1, r1
     542:	e0 52       	subi	r30, 0x20	; 32
     544:	f4 4f       	sbci	r31, 0xF4	; 244
     546:	43 81       	ldd	r20, Z+3	; 0x03
     548:	44 30       	cpi	r20, 0x04	; 4
     54a:	e9 f4       	brne	.+58     	; 0x586 <__vector_17+0x7c>
		{
			//If the current sleeping task's tick count expires, put it back into its READY state
			if(--Process[i].request_arg <= 0)
     54c:	82 9f       	mul	r24, r18
     54e:	f0 01       	movw	r30, r0
     550:	83 9f       	mul	r24, r19
     552:	f0 0d       	add	r31, r0
     554:	92 9f       	mul	r25, r18
     556:	f0 0d       	add	r31, r0
     558:	11 24       	eor	r1, r1
     55a:	e0 52       	subi	r30, 0x20	; 32
     55c:	f4 4f       	sbci	r31, 0xF4	; 244
     55e:	46 81       	ldd	r20, Z+6	; 0x06
     560:	57 81       	ldd	r21, Z+7	; 0x07
     562:	41 50       	subi	r20, 0x01	; 1
     564:	51 09       	sbc	r21, r1
     566:	57 83       	std	Z+7, r21	; 0x07
     568:	46 83       	std	Z+6, r20	; 0x06
     56a:	14 16       	cp	r1, r20
     56c:	15 06       	cpc	r1, r21
     56e:	9c f1       	brlt	.+102    	; 0x5d6 <__vector_17+0xcc>
				Process[i].state = READY;
     570:	82 9f       	mul	r24, r18
     572:	f0 01       	movw	r30, r0
     574:	83 9f       	mul	r24, r19
     576:	f0 0d       	add	r31, r0
     578:	92 9f       	mul	r25, r18
     57a:	f0 0d       	add	r31, r0
     57c:	11 24       	eor	r1, r1
     57e:	e0 52       	subi	r30, 0x20	; 32
     580:	f4 4f       	sbci	r31, 0xF4	; 244
     582:	63 83       	std	Z+3, r22	; 0x03
     584:	28 c0       	rjmp	.+80     	; 0x5d6 <__vector_17+0xcc>
		}
		
		//Process any SUSPENDED tasks that were previously sleeping
		else if(Process[i].last_state == SLEEPING)
     586:	82 9f       	mul	r24, r18
     588:	f0 01       	movw	r30, r0
     58a:	83 9f       	mul	r24, r19
     58c:	f0 0d       	add	r31, r0
     58e:	92 9f       	mul	r25, r18
     590:	f0 0d       	add	r31, r0
     592:	11 24       	eor	r1, r1
     594:	e0 52       	subi	r30, 0x20	; 32
     596:	f4 4f       	sbci	r31, 0xF4	; 244
     598:	44 81       	ldd	r20, Z+4	; 0x04
     59a:	44 30       	cpi	r20, 0x04	; 4
     59c:	e1 f4       	brne	.+56     	; 0x5d6 <__vector_17+0xcc>
		{
			//When task_resume is called again, the task will be back into its READY state instead if its sleep ticks expired.
			if(--Process[i].request_arg <= 0)
     59e:	82 9f       	mul	r24, r18
     5a0:	f0 01       	movw	r30, r0
     5a2:	83 9f       	mul	r24, r19
     5a4:	f0 0d       	add	r31, r0
     5a6:	92 9f       	mul	r25, r18
     5a8:	f0 0d       	add	r31, r0
     5aa:	11 24       	eor	r1, r1
     5ac:	e0 52       	subi	r30, 0x20	; 32
     5ae:	f4 4f       	sbci	r31, 0xF4	; 244
     5b0:	46 81       	ldd	r20, Z+6	; 0x06
     5b2:	57 81       	ldd	r21, Z+7	; 0x07
     5b4:	41 50       	subi	r20, 0x01	; 1
     5b6:	51 09       	sbc	r21, r1
     5b8:	57 83       	std	Z+7, r21	; 0x07
     5ba:	46 83       	std	Z+6, r20	; 0x06
     5bc:	14 16       	cp	r1, r20
     5be:	15 06       	cpc	r1, r21
     5c0:	54 f0       	brlt	.+20     	; 0x5d6 <__vector_17+0xcc>
				Process[i].last_state = READY;
     5c2:	82 9f       	mul	r24, r18
     5c4:	f0 01       	movw	r30, r0
     5c6:	83 9f       	mul	r24, r19
     5c8:	f0 0d       	add	r31, r0
     5ca:	92 9f       	mul	r25, r18
     5cc:	f0 0d       	add	r31, r0
     5ce:	11 24       	eor	r1, r1
     5d0:	e0 52       	subi	r30, 0x20	; 32
     5d2:	f4 4f       	sbci	r31, 0xF4	; 244
     5d4:	64 83       	std	Z+4, r22	; 0x04
//This ISR processes all tasks that are currently sleeping and waking them up when their tick expires
//Maybe we should move most of the code here into a function and have it run in the kernel main loop?
ISR(TIMER1_COMPA_vect)
{
	int i;
	for(i=0; i<MAXTHREAD; i++)
     5d6:	01 96       	adiw	r24, 0x01	; 1
     5d8:	80 31       	cpi	r24, 0x10	; 16
     5da:	91 05       	cpc	r25, r1
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <__vector_17+0xd6>
     5de:	aa cf       	rjmp	.-172    	; 0x534 <__vector_17+0x2a>
			//When task_resume is called again, the task will be back into its READY state instead if its sleep ticks expired.
			if(--Process[i].request_arg <= 0)
				Process[i].last_state = READY;
		}
	}
}
     5e0:	ff 91       	pop	r31
     5e2:	ef 91       	pop	r30
     5e4:	9f 91       	pop	r25
     5e6:	8f 91       	pop	r24
     5e8:	6f 91       	pop	r22
     5ea:	5f 91       	pop	r21
     5ec:	4f 91       	pop	r20
     5ee:	3f 91       	pop	r19
     5f0:	2f 91       	pop	r18
     5f2:	0f 90       	pop	r0
     5f4:	0b be       	out	0x3b, r0	; 59
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	0f 90       	pop	r0
     5fc:	1f 90       	pop	r1
     5fe:	18 95       	reti

00000600 <Kernel_Create_Task>:
/*                   TASK RELATED KERNEL FUNCTIONS                      */
/************************************************************************/

/* Handles all low level operations for creating a new task */
void Kernel_Create_Task(voidfuncptr f, PRIORITY py, int arg)
{
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	dc 01       	movw	r26, r24
	#ifdef DEBUG
	int counter = 0;
	#endif
	
	//Make sure the system can still have enough resources to create more tasks
	if (Task_Count == MAXTHREAD)
     612:	80 91 d4 08 	lds	r24, 0x08D4
     616:	90 91 d5 08 	lds	r25, 0x08D5
     61a:	40 97       	sbiw	r24, 0x10	; 16
     61c:	49 f0       	breq	.+18     	; 0x630 <Kernel_Create_Task+0x30>
		return;
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
	if (Process[x].state == DEAD) break;
     61e:	80 91 e3 0b 	lds	r24, 0x0BE3
     622:	88 23       	and	r24, r24
     624:	f1 f0       	breq	.+60     	; 0x662 <Kernel_Create_Task+0x62>
     626:	21 e0       	ldi	r18, 0x01	; 1
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	ce e0       	ldi	r28, 0x0E	; 14
     62c:	d1 e0       	ldi	r29, 0x01	; 1
     62e:	07 c0       	rjmp	.+14     	; 0x63e <Kernel_Create_Task+0x3e>
	
	//Make sure the system can still have enough resources to create more tasks
	if (Task_Count == MAXTHREAD)
	{
		#ifdef DEBUG
		printf("Task_Create: Failed to create task. The system is at its process threshold.\n");
     630:	80 e8       	ldi	r24, 0x80	; 128
     632:	92 e0       	ldi	r25, 0x02	; 2
     634:	1c d6       	rcall	.+3128   	; 0x126e <puts>
		#endif
		
		err = MAX_PROCESS_ERR;
     636:	84 e0       	ldi	r24, 0x04	; 4
     638:	80 93 c6 1c 	sts	0x1CC6, r24
		return;
     63c:	6e c0       	rjmp	.+220    	; 0x71a <Kernel_Create_Task+0x11a>
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
	if (Process[x].state == DEAD) break;
     63e:	2c 9f       	mul	r18, r28
     640:	f0 01       	movw	r30, r0
     642:	2d 9f       	mul	r18, r29
     644:	f0 0d       	add	r31, r0
     646:	3c 9f       	mul	r19, r28
     648:	f0 0d       	add	r31, r0
     64a:	11 24       	eor	r1, r1
     64c:	e0 52       	subi	r30, 0x20	; 32
     64e:	f4 4f       	sbci	r31, 0xF4	; 244
     650:	93 81       	ldd	r25, Z+3	; 0x03
     652:	99 23       	and	r25, r25
     654:	41 f0       	breq	.+16     	; 0x666 <Kernel_Create_Task+0x66>
		err = MAX_PROCESS_ERR;
		return;
	}

	//Find a dead or empty PD slot to allocate our new task
	for (x = 0; x < MAXTHREAD; x++)
     656:	2f 5f       	subi	r18, 0xFF	; 255
     658:	3f 4f       	sbci	r19, 0xFF	; 255
     65a:	20 31       	cpi	r18, 0x10	; 16
     65c:	31 05       	cpc	r19, r1
     65e:	79 f7       	brne	.-34     	; 0x63e <Kernel_Create_Task+0x3e>
     660:	02 c0       	rjmp	.+4      	; 0x666 <Kernel_Create_Task+0x66>
	if (Process[x].state == DEAD) break;
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
	
	++Task_Count;
     666:	80 91 d4 08 	lds	r24, 0x08D4
     66a:	90 91 d5 08 	lds	r25, 0x08D5
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	90 93 d5 08 	sts	0x08D5, r25
     674:	80 93 d4 08 	sts	0x08D4, r24
	p = &(Process[x]);
	
	/*The code below was agglomerated from Kernel_Create_Task_At;*/
	
	//Initializing the workspace memory for the new task
	sp = (unsigned char *) &(p->workSpace[WORKSPACE-1]);
     678:	ee e0       	ldi	r30, 0x0E	; 14
     67a:	f1 e0       	ldi	r31, 0x01	; 1
     67c:	2e 9f       	mul	r18, r30
     67e:	c0 01       	movw	r24, r0
     680:	2f 9f       	mul	r18, r31
     682:	90 0d       	add	r25, r0
     684:	3e 9f       	mul	r19, r30
     686:	90 0d       	add	r25, r0
     688:	11 24       	eor	r1, r1
     68a:	ec 01       	movw	r28, r24
     68c:	c5 51       	subi	r28, 0x15	; 21
     68e:	d3 4f       	sbci	r29, 0xF3	; 243
	memset(&(p->workSpace),0,WORKSPACE);
     690:	8c 01       	movw	r16, r24
     692:	04 51       	subi	r16, 0x14	; 20
     694:	14 4f       	sbci	r17, 0xF4	; 244
     696:	c1 2c       	mov	r12, r1
     698:	dd 24       	eor	r13, r13
     69a:	d3 94       	inc	r13
     69c:	f8 01       	movw	r30, r16
     69e:	86 01       	movw	r16, r12
     6a0:	11 92       	st	Z+, r1
     6a2:	01 50       	subi	r16, 0x01	; 1
     6a4:	10 40       	sbci	r17, 0x00	; 0
     6a6:	e1 f7       	brne	.-8      	; 0x6a0 <Kernel_Create_Task+0xa0>

	//Store terminate at the bottom of stack to protect against stack underrun.
	*(unsigned char *)sp-- = ((unsigned int)Task_Terminate) & 0xff;
     6a8:	ce 01       	movw	r24, r28
     6aa:	09 e1       	ldi	r16, 0x19	; 25
     6ac:	18 e0       	ldi	r17, 0x08	; 8
     6ae:	08 83       	st	Y, r16
	*(unsigned char *)sp-- = (((unsigned int)Task_Terminate) >> 8) & 0xff;
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	fc 01       	movw	r30, r24
     6b4:	10 83       	st	Z, r17
	*(unsigned char *)sp-- = 0x00;
     6b6:	31 97       	sbiw	r30, 0x01	; 1
     6b8:	10 82       	st	Z, r1

	//Place return address of function at bottom of stack
	*(unsigned char *)sp-- = ((unsigned int)f) & 0xff;
     6ba:	31 97       	sbiw	r30, 0x01	; 1
     6bc:	a0 83       	st	Z, r26
	*(unsigned char *)sp-- = (((unsigned int)f) >> 8) & 0xff;
     6be:	31 97       	sbiw	r30, 0x01	; 1
     6c0:	b0 83       	st	Z, r27
	*(unsigned char *)sp-- = 0x00;
     6c2:	31 97       	sbiw	r30, 0x01	; 1
     6c4:	10 82       	st	Z, r1
     6c6:	90 e0       	ldi	r25, 0x00	; 0
	//Allocate the stack with enough memory spaces to save the registers needed for ctxswitch
	#ifdef DEBUG
	 //Fill stack with initial values for development debugging
	 for (counter = 0; counter < 34; counter++)
	 {
		 *(unsigned char *)sp-- = counter;
     6c8:	92 93       	st	-Z, r25
     6ca:	9f 5f       	subi	r25, 0xFF	; 255
	*(unsigned char *)sp-- = 0x00;

	//Allocate the stack with enough memory spaces to save the registers needed for ctxswitch
	#ifdef DEBUG
	 //Fill stack with initial values for development debugging
	 for (counter = 0; counter < 34; counter++)
     6cc:	92 32       	cpi	r25, 0x22	; 34
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <Kernel_Create_Task+0xc8>
	 //Place stack pointer at top of stack
	 sp = sp - 34;
	#endif
	
	//Build the process descriptor for the new task
	p->pid = ++Last_PID;
     6d0:	80 91 c0 1c 	lds	r24, 0x1CC0
     6d4:	90 91 c1 1c 	lds	r25, 0x1CC1
     6d8:	01 96       	adiw	r24, 0x01	; 1
     6da:	90 93 c1 1c 	sts	0x1CC1, r25
     6de:	80 93 c0 1c 	sts	0x1CC0, r24
     6e2:	0e e0       	ldi	r16, 0x0E	; 14
     6e4:	11 e0       	ldi	r17, 0x01	; 1
     6e6:	20 9f       	mul	r18, r16
     6e8:	f0 01       	movw	r30, r0
     6ea:	21 9f       	mul	r18, r17
     6ec:	f0 0d       	add	r31, r0
     6ee:	30 9f       	mul	r19, r16
     6f0:	f0 0d       	add	r31, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	e0 52       	subi	r30, 0x20	; 32
     6f6:	f4 4f       	sbci	r31, 0xF4	; 244
     6f8:	91 83       	std	Z+1, r25	; 0x01
     6fa:	80 83       	st	Z, r24
	p->pri = py;
     6fc:	62 83       	std	Z+2, r22	; 0x02
	p->arg = arg;
     6fe:	51 87       	std	Z+9, r21	; 0x09
     700:	40 87       	std	Z+8, r20	; 0x08
	p->request = NONE;
     702:	15 82       	std	Z+5, r1	; 0x05
	p->state = READY;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	83 83       	std	Z+3, r24	; 0x03
     708:	a8 97       	sbiw	r28, 0x28	; 40
	p->sp = sp;					/* stack pointer into the "workSpace" */
     70a:	d3 87       	std	Z+11, r29	; 0x0b
     70c:	c2 87       	std	Z+10, r28	; 0x0a
	p->code = f;				/* function to be executed as a task */
     70e:	e4 5f       	subi	r30, 0xF4	; 244
     710:	fe 4f       	sbci	r31, 0xFE	; 254
     712:	b1 83       	std	Z+1, r27	; 0x01
     714:	a0 83       	st	Z, r26
	
	//No errors occured
	err = NO_ERR;
     716:	10 92 c6 1c 	sts	0x1CC6, r1
}
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	df 90       	pop	r13
     728:	cf 90       	pop	r12
     72a:	08 95       	ret

0000072c <Timer_init>:
void Timer_init()
{
	/*Timer1 is configured for the task*/
	
	//Use Prescaler = 1024
	TCCR1B |= (1<<CS12)|(1<<CS10);
     72c:	e1 e8       	ldi	r30, 0x81	; 129
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	85 60       	ori	r24, 0x05	; 5
     734:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS11);
     736:	80 81       	ld	r24, Z
     738:	8d 7f       	andi	r24, 0xFD	; 253
     73a:	80 83       	st	Z, r24
	
	//Use CTC mode (mode 4)
	TCCR1B |= (1<<WGM12);
     73c:	80 81       	ld	r24, Z
     73e:	88 60       	ori	r24, 0x08	; 8
     740:	80 83       	st	Z, r24
	TCCR1B &= ~((1<<WGM13)|(1<<WGM11)|(1<<WGM10));
     742:	80 81       	ld	r24, Z
     744:	8c 7e       	andi	r24, 0xEC	; 236
     746:	80 83       	st	Z, r24
	
	OCR1A = TICK_LENG;			//Set timer top comparison value to ~10ms
     748:	8d e9       	ldi	r24, 0x9D	; 157
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	90 93 89 00 	sts	0x0089, r25
     750:	80 93 88 00 	sts	0x0088, r24
	TCNT1 = 0;					//Load initial value for timer
     754:	10 92 85 00 	sts	0x0085, r1
     758:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 |= (1<<OCIE1A);      //enable match for OCR1A interrupt
     75c:	ef e6       	ldi	r30, 0x6F	; 111
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	82 60       	ori	r24, 0x02	; 2
     764:	80 83       	st	Z, r24
	
	#ifdef DEBUG
	printf("Timer initialized!\n");
     766:	8c ec       	ldi	r24, 0xCC	; 204
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	81 c5       	rjmp	.+2818   	; 0x126e <puts>
     76c:	08 95       	ret

0000076e <OS_Init>:
/*This function initializes the RTOS and must be called before any othersystem calls.*/
void OS_Init()
{
	int x;
	
	Task_Count = 0;
     76e:	10 92 d5 08 	sts	0x08D5, r1
     772:	10 92 d4 08 	sts	0x08D4, r1
	Event_Count = 0;
     776:	10 92 d3 08 	sts	0x08D3, r1
     77a:	10 92 d2 08 	sts	0x08D2, r1
	KernelActive = 0;
     77e:	10 92 c3 1c 	sts	0x1CC3, r1
     782:	10 92 c2 1c 	sts	0x1CC2, r1
	NextP = 0;
     786:	10 92 d7 08 	sts	0x08D7, r1
     78a:	10 92 d6 08 	sts	0x08D6, r1
	Last_PID = 0;
     78e:	10 92 c1 1c 	sts	0x1CC1, r1
     792:	10 92 c0 1c 	sts	0x1CC0, r1
	Last_EventID = 0;
     796:	10 92 c5 1c 	sts	0x1CC5, r1
     79a:	10 92 c4 1c 	sts	0x1CC4, r1
	Last_MutexID = 0;
     79e:	10 92 cc 1c 	sts	0x1CCC, r1
     7a2:	10 92 cb 1c 	sts	0x1CCB, r1
	err = NO_ERR;
     7a6:	10 92 c6 1c 	sts	0x1CC6, r1
	
	//Clear and initialize the memory used for tasks
	memset(Process, 0, MAXTHREAD*sizeof(PD));
     7aa:	80 ee       	ldi	r24, 0xE0	; 224
     7ac:	90 e1       	ldi	r25, 0x10	; 16
     7ae:	e0 ee       	ldi	r30, 0xE0	; 224
     7b0:	fb e0       	ldi	r31, 0x0B	; 11
     7b2:	df 01       	movw	r26, r30
     7b4:	9c 01       	movw	r18, r24
     7b6:	1d 92       	st	X+, r1
     7b8:	21 50       	subi	r18, 0x01	; 1
     7ba:	30 40       	sbci	r19, 0x00	; 0
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <OS_Init+0x48>
	for (x = 0; x < MAXTHREAD; x++) {
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
		Process[x].state = DEAD;
     7c2:	2e e0       	ldi	r18, 0x0E	; 14
     7c4:	31 e0       	ldi	r19, 0x01	; 1
     7c6:	82 9f       	mul	r24, r18
     7c8:	f0 01       	movw	r30, r0
     7ca:	83 9f       	mul	r24, r19
     7cc:	f0 0d       	add	r31, r0
     7ce:	92 9f       	mul	r25, r18
     7d0:	f0 0d       	add	r31, r0
     7d2:	11 24       	eor	r1, r1
     7d4:	e0 52       	subi	r30, 0x20	; 32
     7d6:	f4 4f       	sbci	r31, 0xF4	; 244
     7d8:	13 82       	std	Z+3, r1	; 0x03
	Last_MutexID = 0;
	err = NO_ERR;
	
	//Clear and initialize the memory used for tasks
	memset(Process, 0, MAXTHREAD*sizeof(PD));
	for (x = 0; x < MAXTHREAD; x++) {
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	80 31       	cpi	r24, 0x10	; 16
     7de:	91 05       	cpc	r25, r1
     7e0:	91 f7       	brne	.-28     	; 0x7c6 <OS_Init+0x58>
		Process[x].state = DEAD;
	}
	
	//Clear and initialize the memory used for Events
	memset(Event, 0, MAXEVENT*sizeof(EVENT_TYPE));
     7e2:	80 e3       	ldi	r24, 0x30	; 48
     7e4:	e0 eb       	ldi	r30, 0xB0	; 176
     7e6:	fb e0       	ldi	r31, 0x0B	; 11
     7e8:	df 01       	movw	r26, r30
     7ea:	1d 92       	st	X+, r1
     7ec:	8a 95       	dec	r24
     7ee:	e9 f7       	brne	.-6      	; 0x7ea <OS_Init+0x7c>
	for (x = 0; x < MAXEVENT; x++) {
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
		Event[x].id = 0;
     7f4:	fc 01       	movw	r30, r24
     7f6:	ee 0f       	add	r30, r30
     7f8:	ff 1f       	adc	r31, r31
     7fa:	e8 0f       	add	r30, r24
     7fc:	f9 1f       	adc	r31, r25
     7fe:	ee 0f       	add	r30, r30
     800:	ff 1f       	adc	r31, r31
     802:	e0 55       	subi	r30, 0x50	; 80
     804:	f4 4f       	sbci	r31, 0xF4	; 244
     806:	11 82       	std	Z+1, r1	; 0x01
     808:	10 82       	st	Z, r1
		Process[x].state = DEAD;
	}
	
	//Clear and initialize the memory used for Events
	memset(Event, 0, MAXEVENT*sizeof(EVENT_TYPE));
	for (x = 0; x < MAXEVENT; x++) {
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	88 30       	cpi	r24, 0x08	; 8
     80e:	91 05       	cpc	r25, r1
     810:	89 f7       	brne	.-30     	; 0x7f4 <OS_Init+0x86>
		Event[x].id = 0;
	}
	
	/*Initialize and start Timer needed for sleep*/
	Timer_init();
     812:	8c df       	rcall	.-232    	; 0x72c <Timer_init>
	
	#ifdef DEBUG
	printf("OS initialized!\n");
     814:	8f ed       	ldi	r24, 0xDF	; 223
     816:	92 e0       	ldi	r25, 0x02	; 2
     818:	2a c5       	rjmp	.+2644   	; 0x126e <puts>
     81a:	08 95       	ret

0000081c <OS_Start>:
	#endif
}

/* This function starts the RTOS after creating a few tasks.*/
void OS_Start()
{
     81c:	2f 92       	push	r2
     81e:	3f 92       	push	r3
     820:	4f 92       	push	r4
     822:	5f 92       	push	r5
     824:	6f 92       	push	r6
     826:	7f 92       	push	r7
     828:	8f 92       	push	r8
     82a:	9f 92       	push	r9
     82c:	af 92       	push	r10
     82e:	bf 92       	push	r11
     830:	cf 92       	push	r12
     832:	df 92       	push	r13
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	27 97       	sbiw	r28, 0x07	; 7
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
	if ( (! KernelActive) && (Task_Count > 0))
     850:	80 91 c2 1c 	lds	r24, 0x1CC2
     854:	90 91 c3 1c 	lds	r25, 0x1CC3
     858:	89 2b       	or	r24, r25
     85a:	09 f0       	breq	.+2      	; 0x85e <OS_Start+0x42>
     85c:	9f c3       	rjmp	.+1854   	; 0xf9c <OS_Start+0x780>
     85e:	80 91 d4 08 	lds	r24, 0x08D4
     862:	90 91 d5 08 	lds	r25, 0x08D5
     866:	89 2b       	or	r24, r25
     868:	09 f4       	brne	.+2      	; 0x86c <OS_Start+0x50>
     86a:	98 c3       	rjmp	.+1840   	; 0xf9c <OS_Start+0x780>
	{
		Disable_Interrupt();
     86c:	f8 94       	cli
		
		/* we may have to initialize the interrupt vector for Enter_Kernel() here. */
			/* here we go...  */
		KernelActive = 1;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	90 93 c3 1c 	sts	0x1CC3, r25
     876:	80 93 c2 1c 	sts	0x1CC2, r24
		
		#ifdef DEBUG
		printf("OS begins!\n");
     87a:	8f ee       	ldi	r24, 0xEF	; 239
     87c:	92 e0       	ldi	r25, 0x02	; 2
     87e:	f7 d4       	rcall	.+2542   	; 0x126e <puts>
  *
  * This is the main loop of our kernel, called by OS_Start().
  */
static void Next_Kernel_Request() 
{
	Dispatch();	//Select an initial task to run
     880:	09 dd       	rcall	.-1518   	; 0x294 <Dispatch>
	} else if (m->num_of_process > 0) {
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
		unsigned int temp_order = m->total_num + 1;
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
     882:	0f 2e       	mov	r0, r31
     884:	fb e0       	ldi	r31, 0x0B	; 11
     886:	cf 2e       	mov	r12, r31
     888:	f0 2d       	mov	r31, r0
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			}
		}
		//dequeue index i
		m->blocked_stack[i] = -1;
     88a:	88 24       	eor	r8, r8
     88c:	8a 94       	dec	r8
     88e:	98 2c       	mov	r9, r8
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
     890:	66 24       	eor	r6, r6
     892:	63 94       	inc	r6
     894:	51 2c       	mov	r5, r1
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
	if(Mutex[i].id == 0) break;
	
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
     896:	0f 2e       	mov	r0, r31
     898:	fb e5       	ldi	r31, 0x5B	; 91
     89a:	7f 2e       	mov	r7, r31
     89c:	f0 2d       	mov	r31, r0
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
     89e:	cb 82       	std	Y+3, r12	; 0x03
	Mutex[i].total_num = 0;
	++Mutex_Count;
	err = NO_ERR;
	
	#ifdef DEBUG
	printf("Kernel_Create_Mutex: Created Mutex %d!\n", Last_MutexID);
     8a0:	0f 2e       	mov	r0, r31
     8a2:	f7 e2       	ldi	r31, 0x27	; 39
     8a4:	2f 2e       	mov	r2, r31
     8a6:	f6 e0       	ldi	r31, 0x06	; 6
     8a8:	3f 2e       	mov	r3, r31
     8aa:	f0 2d       	mov	r31, r0
	Event[i].owner = 0;
	++Event_Count;
	err = NO_ERR;
	
	#ifdef DEBUG
	printf("Event_Init: Created Event %d!\n", Last_EventID);
     8ac:	0f 2e       	mov	r0, r31
     8ae:	f6 e6       	ldi	r31, 0x66	; 102
     8b0:	ef 2e       	mov	r14, r31
     8b2:	f4 e0       	ldi	r31, 0x04	; 4
     8b4:	ff 2e       	mov	r15, r31
     8b6:	f0 2d       	mov	r31, r0
	//After OS initialization, THIS WILL BE KERNEL'S MAIN LOOP!
	//NOTE: When another task makes a syscall and enters the loop, it's still in the RUNNING state!
	while(1) 
	{
		//Clears the process' request fields
		Cp->request = NONE;
     8b8:	e0 91 c9 1c 	lds	r30, 0x1CC9
     8bc:	f0 91 ca 1c 	lds	r31, 0x1CCA
     8c0:	15 82       	std	Z+5, r1	; 0x05
		//Cp->request_arg is not reset, because task_sleep uses it to keep track of remaining ticks

		//Load the current task's stack pointer and switch to its context
		CurrentSp = Cp->sp;
     8c2:	82 85       	ldd	r24, Z+10	; 0x0a
     8c4:	93 85       	ldd	r25, Z+11	; 0x0b
     8c6:	90 93 c8 1c 	sts	0x1CC8, r25
     8ca:	80 93 c7 1c 	sts	0x1CC7, r24
		Exit_Kernel();
     8ce:	38 dc       	rcall	.-1936   	; 0x140 <CSwitch>

		/* if this task makes a system call, it will return to here! */

		//Save the current task's stack pointer and proceed to handle its request
		Cp->sp = CurrentSp;
     8d0:	20 91 c9 1c 	lds	r18, 0x1CC9
     8d4:	30 91 ca 1c 	lds	r19, 0x1CCA
     8d8:	80 91 c7 1c 	lds	r24, 0x1CC7
     8dc:	90 91 c8 1c 	lds	r25, 0x1CC8
     8e0:	d9 01       	movw	r26, r18
     8e2:	1b 96       	adiw	r26, 0x0b	; 11
     8e4:	9c 93       	st	X, r25
     8e6:	8e 93       	st	-X, r24
     8e8:	1a 97       	sbiw	r26, 0x0a	; 10

		switch(Cp->request)
     8ea:	15 96       	adiw	r26, 0x05	; 5
     8ec:	8c 91       	ld	r24, X
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	8d 30       	cpi	r24, 0x0D	; 13
     8f2:	91 05       	cpc	r25, r1
     8f4:	08 f0       	brcs	.+2      	; 0x8f8 <OS_Start+0xdc>
     8f6:	4e c3       	rjmp	.+1692   	; 0xf94 <OS_Start+0x778>
     8f8:	fc 01       	movw	r30, r24
     8fa:	88 27       	eor	r24, r24
     8fc:	ee 58       	subi	r30, 0x8E	; 142
     8fe:	ff 4f       	sbci	r31, 0xFF	; 255
     900:	8f 4f       	sbci	r24, 0xFF	; 255
     902:	9a c4       	rjmp	.+2356   	; 0x1238 <__tablejump2__>
		{
			case CREATE_T:
			Kernel_Create_Task(Cp->code, Cp->pri, Cp->arg);
     904:	f9 01       	movw	r30, r18
     906:	40 85       	ldd	r20, Z+8	; 0x08
     908:	51 85       	ldd	r21, Z+9	; 0x09
     90a:	62 81       	ldd	r22, Z+2	; 0x02
     90c:	e4 5f       	subi	r30, 0xF4	; 244
     90e:	fe 4f       	sbci	r31, 0xFE	; 254
     910:	80 81       	ld	r24, Z
     912:	91 81       	ldd	r25, Z+1	; 0x01
     914:	75 de       	rcall	.-790    	; 0x600 <Kernel_Create_Task>
     916:	d0 cf       	rjmp	.-96     	; 0x8b8 <OS_Start+0x9c>
			break;
			
			case TERMINATE:
			Cp->state = DEAD;			//Mark the task as DEAD so its resources will be recycled later when new tasks are created
     918:	d9 01       	movw	r26, r18
     91a:	13 96       	adiw	r26, 0x03	; 3
     91c:	1c 92       	st	X, r1
			--Task_Count;
     91e:	80 91 d4 08 	lds	r24, 0x08D4
     922:	90 91 d5 08 	lds	r25, 0x08D5
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	90 93 d5 08 	sts	0x08D5, r25
     92c:	80 93 d4 08 	sts	0x08D4, r24
			Dispatch();					//Dispatch is only needed if the syscall requires running a different task  after it's done
     930:	b1 dc       	rcall	.-1694   	; 0x294 <Dispatch>
     932:	c2 cf       	rjmp	.-124    	; 0x8b8 <OS_Start+0x9c>

/*TODO: Check for mutex ownership. If PID owns any mutex, ignore this request*/
static void Kernel_Suspend_Task() 
{
	//Finds the process descriptor for the specified PID
	PD* p = findProcessByPID(Cp->request_arg);
     934:	f9 01       	movw	r30, r18
     936:	86 81       	ldd	r24, Z+6	; 0x06
     938:	97 81       	ldd	r25, Z+7	; 0x07
     93a:	3d dd       	rcall	.-1414   	; 0x3b6 <findProcessByPID>
     93c:	fc 01       	movw	r30, r24
	
	//Ensure the PID specified in the PD currently exists in the global process list
	if(p == NULL)
     93e:	89 2b       	or	r24, r25
     940:	39 f4       	brne	.+14     	; 0x950 <OS_Start+0x134>
	{
		#ifdef DEBUG
			printf("Kernel_Suspend_Task: PID not found in global process list!\n");
     942:	8a ef       	ldi	r24, 0xFA	; 250
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	93 d4       	rcall	.+2342   	; 0x126e <puts>
		#endif
		err = PID_NOT_FOUND_ERR;
     948:	85 e0       	ldi	r24, 0x05	; 5
     94a:	80 93 c6 1c 	sts	0x1CC6, r24
     94e:	b4 cf       	rjmp	.-152    	; 0x8b8 <OS_Start+0x9c>
		return;
	}
	
	//Ensure the task is not in a unsuspendable state
	if(p->state == DEAD || p->state == SUSPENDED)
     950:	83 81       	ldd	r24, Z+3	; 0x03
     952:	88 23       	and	r24, r24
     954:	11 f0       	breq	.+4      	; 0x95a <OS_Start+0x13e>
     956:	83 30       	cpi	r24, 0x03	; 3
     958:	79 f4       	brne	.+30     	; 0x978 <OS_Start+0x15c>
	{
		#ifdef DEBUG
		printf("Kernel_Suspend_Task: Trying to suspend a task that's in an unsuspendable state %d!\n", p->state);
     95a:	1f 92       	push	r1
     95c:	8f 93       	push	r24
     95e:	85 e3       	ldi	r24, 0x35	; 53
     960:	93 e0       	ldi	r25, 0x03	; 3
     962:	9f 93       	push	r25
     964:	8f 93       	push	r24
     966:	70 d4       	rcall	.+2272   	; 0x1248 <printf>
		#endif
		err = SUSPEND_NONRUNNING_TASK_ERR;
     968:	86 e0       	ldi	r24, 0x06	; 6
     96a:	80 93 c6 1c 	sts	0x1CC6, r24
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	a0 cf       	rjmp	.-192    	; 0x8b8 <OS_Start+0x9c>
		return;
	}
	
	//Save its current state and set it to SUSPENDED
	p->last_state = p->state;
     978:	84 83       	std	Z+4, r24	; 0x04
	p->state = SUSPENDED;
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	83 83       	std	Z+3, r24	; 0x03
	err = NO_ERR;
     97e:	10 92 c6 1c 	sts	0x1CC6, r1
     982:	9a cf       	rjmp	.-204    	; 0x8b8 <OS_Start+0x9c>
}

static void Kernel_Resume_Task()
{
	//Finds the process descriptor for the specified PID
	PD* p = findProcessByPID(Cp->request_arg);
     984:	d9 01       	movw	r26, r18
     986:	16 96       	adiw	r26, 0x06	; 6
     988:	8d 91       	ld	r24, X+
     98a:	9c 91       	ld	r25, X
     98c:	17 97       	sbiw	r26, 0x07	; 7
     98e:	13 dd       	rcall	.-1498   	; 0x3b6 <findProcessByPID>
     990:	8c 01       	movw	r16, r24
	
	//Ensure the PID specified in the PD currently exists in the global process list
	if(p == NULL)
     992:	00 97       	sbiw	r24, 0x00	; 0
     994:	39 f4       	brne	.+14     	; 0x9a4 <OS_Start+0x188>
	{
		#ifdef DEBUG
			printf("Kernel_Resume_Task: PID not found in global process list!\n");
     996:	89 e8       	ldi	r24, 0x89	; 137
     998:	93 e0       	ldi	r25, 0x03	; 3
     99a:	69 d4       	rcall	.+2258   	; 0x126e <puts>
		#endif
		err = PID_NOT_FOUND_ERR;
     99c:	85 e0       	ldi	r24, 0x05	; 5
     99e:	80 93 c6 1c 	sts	0x1CC6, r24
     9a2:	8a cf       	rjmp	.-236    	; 0x8b8 <OS_Start+0x9c>
		return;
	}
	
	//Ensure the task is currently in the SUSPENDED state
	if(p->state != SUSPENDED)
     9a4:	fc 01       	movw	r30, r24
     9a6:	83 81       	ldd	r24, Z+3	; 0x03
     9a8:	83 30       	cpi	r24, 0x03	; 3
     9aa:	a9 f0       	breq	.+42     	; 0x9d6 <OS_Start+0x1ba>
	{
		#ifdef DEBUG
		printf("Kernel_Resume_Task: Trying to resume a task that's not SUSPENDED!\n");
     9ac:	83 ec       	ldi	r24, 0xC3	; 195
     9ae:	93 e0       	ldi	r25, 0x03	; 3
     9b0:	5e d4       	rcall	.+2236   	; 0x126e <puts>
		printf("CURRENT STATE: %d\n", p->state);
     9b2:	d8 01       	movw	r26, r16
     9b4:	13 96       	adiw	r26, 0x03	; 3
     9b6:	8c 91       	ld	r24, X
     9b8:	1f 92       	push	r1
     9ba:	8f 93       	push	r24
     9bc:	85 e0       	ldi	r24, 0x05	; 5
     9be:	94 e0       	ldi	r25, 0x04	; 4
     9c0:	9f 93       	push	r25
     9c2:	8f 93       	push	r24
     9c4:	41 d4       	rcall	.+2178   	; 0x1248 <printf>
		#endif
		err = RESUME_NONSUSPENDED_TASK_ERR;
     9c6:	87 e0       	ldi	r24, 0x07	; 7
     9c8:	80 93 c6 1c 	sts	0x1CC6, r24
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	71 cf       	rjmp	.-286    	; 0x8b8 <OS_Start+0x9c>
		return;
	}
	
	//Restore the previous state of the task
	p->state = p->last_state;
     9d6:	f8 01       	movw	r30, r16
     9d8:	84 81       	ldd	r24, Z+4	; 0x04
     9da:	83 83       	std	Z+3, r24	; 0x03
	p->last_state = SUSPENDED;			
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	84 83       	std	Z+4, r24	; 0x04
	err = NO_ERR;
     9e0:	10 92 c6 1c 	sts	0x1CC6, r1
     9e4:	69 cf       	rjmp	.-302    	; 0x8b8 <OS_Start+0x9c>
			case RESUME:
			Kernel_Resume_Task();
			break;
			
			case SLEEP:
			Cp->state = SLEEPING;
     9e6:	84 e0       	ldi	r24, 0x04	; 4
     9e8:	d9 01       	movw	r26, r18
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	8c 93       	st	X, r24
			Dispatch();					
     9ee:	52 dc       	rcall	.-1884   	; 0x294 <Dispatch>
     9f0:	63 cf       	rjmp	.-314    	; 0x8b8 <OS_Start+0x9c>
static void Kernel_Create_Event(void)
{
	int i;
	
	//Make sure the system's events are not at max
	if(Event_Count >= MAXEVENT)
     9f2:	80 91 d2 08 	lds	r24, 0x08D2
     9f6:	90 91 d3 08 	lds	r25, 0x08D3
     9fa:	08 97       	sbiw	r24, 0x08	; 8
     9fc:	48 f4       	brcc	.+18     	; 0xa10 <OS_Start+0x1f4>
		return;
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
		if(Event[i].id == 0) break;
     9fe:	e0 eb       	ldi	r30, 0xB0	; 176
     a00:	fb e0       	ldi	r31, 0x0B	; 11
     a02:	80 81       	ld	r24, Z
     a04:	91 81       	ldd	r25, Z+1	; 0x01
     a06:	89 2b       	or	r24, r25
     a08:	e1 f0       	breq	.+56     	; 0xa42 <OS_Start+0x226>
     a0a:	86 2d       	mov	r24, r6
     a0c:	95 2d       	mov	r25, r5
     a0e:	07 c0       	rjmp	.+14     	; 0xa1e <OS_Start+0x202>
	
	//Make sure the system's events are not at max
	if(Event_Count >= MAXEVENT)
	{
		#ifdef DEBUG
		printf("Event_Init: Failed to create Event. The system is at its max event threshold.\n");
     a10:	88 e1       	ldi	r24, 0x18	; 24
     a12:	94 e0       	ldi	r25, 0x04	; 4
     a14:	2c d4       	rcall	.+2136   	; 0x126e <puts>
		#endif
		err = MAX_EVENT_ERR;
     a16:	88 e0       	ldi	r24, 0x08	; 8
     a18:	80 93 c6 1c 	sts	0x1CC6, r24
     a1c:	4d cf       	rjmp	.-358    	; 0x8b8 <OS_Start+0x9c>
		return;
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
		if(Event[i].id == 0) break;
     a1e:	fc 01       	movw	r30, r24
     a20:	ee 0f       	add	r30, r30
     a22:	ff 1f       	adc	r31, r31
     a24:	e8 0f       	add	r30, r24
     a26:	f9 1f       	adc	r31, r25
     a28:	ee 0f       	add	r30, r30
     a2a:	ff 1f       	adc	r31, r31
     a2c:	e0 55       	subi	r30, 0x50	; 80
     a2e:	f4 4f       	sbci	r31, 0xF4	; 244
     a30:	20 81       	ld	r18, Z
     a32:	31 81       	ldd	r19, Z+1	; 0x01
     a34:	23 2b       	or	r18, r19
     a36:	39 f0       	breq	.+14     	; 0xa46 <OS_Start+0x22a>
		err = MAX_EVENT_ERR;
		return;
	}
	
	//Find an uninitialized Event slot
	for(i=0; i<MAXEVENT; i++)
     a38:	01 96       	adiw	r24, 0x01	; 1
     a3a:	88 30       	cpi	r24, 0x08	; 8
     a3c:	91 05       	cpc	r25, r1
     a3e:	79 f7       	brne	.-34     	; 0xa1e <OS_Start+0x202>
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <OS_Start+0x22a>
		if(Event[i].id == 0) break;
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
	
	//Assign a new unique ID to the event. Note that the smallest valid Event ID is 1.
	Event[i].id = ++Last_EventID;
     a46:	20 91 c4 1c 	lds	r18, 0x1CC4
     a4a:	30 91 c5 1c 	lds	r19, 0x1CC5
     a4e:	2f 5f       	subi	r18, 0xFF	; 255
     a50:	3f 4f       	sbci	r19, 0xFF	; 255
     a52:	30 93 c5 1c 	sts	0x1CC5, r19
     a56:	20 93 c4 1c 	sts	0x1CC4, r18
     a5a:	fc 01       	movw	r30, r24
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	df 01       	movw	r26, r30
     a62:	a8 0f       	add	r26, r24
     a64:	b9 1f       	adc	r27, r25
     a66:	aa 0f       	add	r26, r26
     a68:	bb 1f       	adc	r27, r27
     a6a:	a0 55       	subi	r26, 0x50	; 80
     a6c:	b4 4f       	sbci	r27, 0xF4	; 244
     a6e:	11 96       	adiw	r26, 0x01	; 1
     a70:	3c 93       	st	X, r19
     a72:	2e 93       	st	-X, r18
	Event[i].owner = 0;
     a74:	fd 01       	movw	r30, r26
     a76:	13 82       	std	Z+3, r1	; 0x03
     a78:	12 82       	std	Z+2, r1	; 0x02
	++Event_Count;
     a7a:	80 91 d2 08 	lds	r24, 0x08D2
     a7e:	90 91 d3 08 	lds	r25, 0x08D3
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	90 93 d3 08 	sts	0x08D3, r25
     a88:	80 93 d2 08 	sts	0x08D2, r24
	err = NO_ERR;
     a8c:	10 92 c6 1c 	sts	0x1CC6, r1
	
	#ifdef DEBUG
	printf("Event_Init: Created Event %d!\n", Last_EventID);
     a90:	80 91 c4 1c 	lds	r24, 0x1CC4
     a94:	90 91 c5 1c 	lds	r25, 0x1CC5
     a98:	9f 93       	push	r25
     a9a:	8f 93       	push	r24
     a9c:	ff 92       	push	r15
     a9e:	ef 92       	push	r14
     aa0:	d3 d3       	rcall	.+1958   	; 0x1248 <printf>
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	06 cf       	rjmp	.-500    	; 0x8b8 <OS_Start+0x9c>
	#endif
}

static void Kernel_Wait_Event(void)
{
	EVENT_TYPE* e = findEventByEventID(Cp->request_arg);
     aac:	d9 01       	movw	r26, r18
     aae:	16 96       	adiw	r26, 0x06	; 6
     ab0:	8d 91       	ld	r24, X+
     ab2:	9c 91       	ld	r25, X
     ab4:	17 97       	sbiw	r26, 0x07	; 7
     ab6:	b5 dc       	rcall	.-1686   	; 0x422 <findEventByEventID>
     ab8:	fc 01       	movw	r30, r24
	
	if(e == NULL)
     aba:	89 2b       	or	r24, r25
     abc:	21 f4       	brne	.+8      	; 0xac6 <OS_Start+0x2aa>
	{
		#ifdef DEBUG
		printf("Kernel_Wait_Event: Error finding requested event!\n");
     abe:	85 e8       	ldi	r24, 0x85	; 133
     ac0:	94 e0       	ldi	r25, 0x04	; 4
     ac2:	d5 d3       	rcall	.+1962   	; 0x126e <puts>
     ac4:	3e c0       	rjmp	.+124    	; 0xb42 <OS_Start+0x326>
		#endif
		return;
	}
	
	//Ensure no one else is waiting for this same event
	if(e->owner > 0 && e->owner != Cp->pid)
     ac6:	82 81       	ldd	r24, Z+2	; 0x02
     ac8:	93 81       	ldd	r25, Z+3	; 0x03
     aca:	00 97       	sbiw	r24, 0x00	; 0
     acc:	c1 f0       	breq	.+48     	; 0xafe <OS_Start+0x2e2>
     ace:	a0 91 c9 1c 	lds	r26, 0x1CC9
     ad2:	b0 91 ca 1c 	lds	r27, 0x1CCA
     ad6:	2d 91       	ld	r18, X+
     ad8:	3c 91       	ld	r19, X
     ada:	82 17       	cp	r24, r18
     adc:	93 07       	cpc	r25, r19
     ade:	79 f0       	breq	.+30     	; 0xafe <OS_Start+0x2e2>
	{
		#ifdef DEBUG
			printf("Kernel_Wait_Event: The requested event is already being waited by PID %d\n", e->owner);
     ae0:	9f 93       	push	r25
     ae2:	8f 93       	push	r24
     ae4:	a7 eb       	ldi	r26, 0xB7	; 183
     ae6:	b4 e0       	ldi	r27, 0x04	; 4
     ae8:	bf 93       	push	r27
     aea:	af 93       	push	r26
     aec:	ad d3       	rcall	.+1882   	; 0x1248 <printf>
		#endif
		err = EVENT_NOT_FOUND_ERR;
     aee:	89 e0       	ldi	r24, 0x09	; 9
     af0:	80 93 c6 1c 	sts	0x1CC6, r24
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	22 c0       	rjmp	.+68     	; 0xb42 <OS_Start+0x326>
		return;
	}
	
	//Has this event been signaled already? If yes, "consume" event and keep executing the same task
	if(e->count > 0)
     afe:	84 81       	ldd	r24, Z+4	; 0x04
     b00:	95 81       	ldd	r25, Z+5	; 0x05
     b02:	89 2b       	or	r24, r25
     b04:	81 f0       	breq	.+32     	; 0xb26 <OS_Start+0x30a>
	{
		e->owner = 0;
     b06:	13 82       	std	Z+3, r1	; 0x03
     b08:	12 82       	std	Z+2, r1	; 0x02
		e->count = 0;
     b0a:	15 82       	std	Z+5, r1	; 0x05
     b0c:	14 82       	std	Z+4, r1	; 0x04
		e->id = 0;
     b0e:	11 82       	std	Z+1, r1	; 0x01
     b10:	10 82       	st	Z, r1
		--Event_Count;	
     b12:	80 91 d2 08 	lds	r24, 0x08D2
     b16:	90 91 d3 08 	lds	r25, 0x08D3
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	90 93 d3 08 	sts	0x08D3, r25
     b20:	80 93 d2 08 	sts	0x08D2, r24
     b24:	0e c0       	rjmp	.+28     	; 0xb42 <OS_Start+0x326>
		return;
	}
	
	//Set the owner of the requested event to the current task and put it into the WAIT EVENT state
	e->owner = Cp->pid;
     b26:	a0 91 c9 1c 	lds	r26, 0x1CC9
     b2a:	b0 91 ca 1c 	lds	r27, 0x1CCA
     b2e:	8d 91       	ld	r24, X+
     b30:	9c 91       	ld	r25, X
     b32:	11 97       	sbiw	r26, 0x01	; 1
     b34:	93 83       	std	Z+3, r25	; 0x03
     b36:	82 83       	std	Z+2, r24	; 0x02
	Cp->state = WAIT_EVENT;
     b38:	85 e0       	ldi	r24, 0x05	; 5
     b3a:	13 96       	adiw	r26, 0x03	; 3
     b3c:	8c 93       	st	X, r24
	err = NO_ERR;
     b3e:	10 92 c6 1c 	sts	0x1CC6, r1
			Kernel_Create_Event();
			break;
			
			case WAIT_E:
			Kernel_Wait_Event();	
			if(Cp->state != RUNNING) Dispatch();	//Don't dispatch to a different task if the event is already siganlled
     b42:	e0 91 c9 1c 	lds	r30, 0x1CC9
     b46:	f0 91 ca 1c 	lds	r31, 0x1CCA
     b4a:	83 81       	ldd	r24, Z+3	; 0x03
     b4c:	82 30       	cpi	r24, 0x02	; 2
     b4e:	09 f4       	brne	.+2      	; 0xb52 <OS_Start+0x336>
     b50:	b3 ce       	rjmp	.-666    	; 0x8b8 <OS_Start+0x9c>
     b52:	a0 db       	rcall	.-2240   	; 0x294 <Dispatch>
     b54:	b1 ce       	rjmp	.-670    	; 0x8b8 <OS_Start+0x9c>
	err = NO_ERR;
}

static void Kernel_Signal_Event(void)
{
	EVENT_TYPE* e = findEventByEventID(Cp->request_arg);
     b56:	d9 01       	movw	r26, r18
     b58:	16 96       	adiw	r26, 0x06	; 6
     b5a:	8d 91       	ld	r24, X+
     b5c:	9c 91       	ld	r25, X
     b5e:	17 97       	sbiw	r26, 0x07	; 7
     b60:	60 dc       	rcall	.-1856   	; 0x422 <findEventByEventID>
     b62:	8c 01       	movw	r16, r24
	PD *e_owner;
	
	if(e == NULL)
     b64:	00 97       	sbiw	r24, 0x00	; 0
     b66:	21 f4       	brne	.+8      	; 0xb70 <OS_Start+0x354>
	{
		#ifdef DEBUG
		printf("Kernel_Signal_Event: Error finding requested event!\n");
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	95 e0       	ldi	r25, 0x05	; 5
     b6c:	80 d3       	rcall	.+1792   	; 0x126e <puts>
     b6e:	a4 ce       	rjmp	.-696    	; 0x8b8 <OS_Start+0x9c>
		#endif
		return;
	}
	
	//Increment the event counter if needed 
	if(MAX_EVENT_SIG_MISS == 0 || e->count < MAX_EVENT_SIG_MISS)
     b70:	fc 01       	movw	r30, r24
     b72:	84 81       	ldd	r24, Z+4	; 0x04
     b74:	95 81       	ldd	r25, Z+5	; 0x05
     b76:	89 2b       	or	r24, r25
     b78:	11 f4       	brne	.+4      	; 0xb7e <OS_Start+0x362>
		e->count++;
     b7a:	64 82       	std	Z+4, r6	; 0x04
     b7c:	55 82       	std	Z+5, r5	; 0x05
	
	//If the event is unowned, return
	if(e->owner == 0)
     b7e:	d8 01       	movw	r26, r16
     b80:	12 96       	adiw	r26, 0x02	; 2
     b82:	8d 91       	ld	r24, X+
     b84:	9c 91       	ld	r25, X
     b86:	13 97       	sbiw	r26, 0x03	; 3
     b88:	00 97       	sbiw	r24, 0x00	; 0
     b8a:	39 f4       	brne	.+14     	; 0xb9a <OS_Start+0x37e>
	{
		#ifdef DEBUG
		printf("Kernel_Signal_Event: *WARNING* The requested event is not being waited by anyone!\n");
     b8c:	85 e3       	ldi	r24, 0x35	; 53
     b8e:	95 e0       	ldi	r25, 0x05	; 5
     b90:	6e d3       	rcall	.+1756   	; 0x126e <puts>
		#endif
		err = SIGNAL_UNOWNED_EVENT_ERR;
     b92:	bb 81       	ldd	r27, Y+3	; 0x03
     b94:	b0 93 c6 1c 	sts	0x1CC6, r27
     b98:	8f ce       	rjmp	.-738    	; 0x8b8 <OS_Start+0x9c>
		return;
	}
	
	//Fetch the owner's PD and ensure it's still valid
	e_owner = findProcessByPID(e->owner);
     b9a:	0d dc       	rcall	.-2022   	; 0x3b6 <findProcessByPID>
	if(e_owner == NULL)
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	39 f4       	brne	.+14     	; 0xbae <OS_Start+0x392>
	{
		#ifdef DEBUG
		printf("Kernel_Signal_Event: Event owner's PID not found in global process list!\n");
     ba0:	87 e8       	ldi	r24, 0x87	; 135
     ba2:	95 e0       	ldi	r25, 0x05	; 5
     ba4:	64 d3       	rcall	.+1736   	; 0x126e <puts>
		#endif
		err = PID_NOT_FOUND_ERR;
     ba6:	85 e0       	ldi	r24, 0x05	; 5
     ba8:	80 93 c6 1c 	sts	0x1CC6, r24
     bac:	85 ce       	rjmp	.-758    	; 0x8b8 <OS_Start+0x9c>
		return;
	}
	
	//Wake up the owner of the event by setting its state to READY if it's active. The event is "consumed"
	if(e_owner->state == WAIT_EVENT)
     bae:	fc 01       	movw	r30, r24
     bb0:	23 81       	ldd	r18, Z+3	; 0x03
     bb2:	25 30       	cpi	r18, 0x05	; 5
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <OS_Start+0x39c>
     bb6:	80 ce       	rjmp	.-768    	; 0x8b8 <OS_Start+0x9c>
	{
		e->owner = 0;
     bb8:	d8 01       	movw	r26, r16
     bba:	13 96       	adiw	r26, 0x03	; 3
     bbc:	1c 92       	st	X, r1
     bbe:	1e 92       	st	-X, r1
     bc0:	12 97       	sbiw	r26, 0x02	; 2
		e->count = 0;
     bc2:	15 96       	adiw	r26, 0x05	; 5
     bc4:	1c 92       	st	X, r1
     bc6:	1e 92       	st	-X, r1
     bc8:	14 97       	sbiw	r26, 0x04	; 4
		e->id = 0;
     bca:	1d 92       	st	X+, r1
     bcc:	1c 92       	st	X, r1
		--Event_Count;
     bce:	20 91 d2 08 	lds	r18, 0x08D2
     bd2:	30 91 d3 08 	lds	r19, 0x08D3
     bd6:	21 50       	subi	r18, 0x01	; 1
     bd8:	31 09       	sbc	r19, r1
     bda:	30 93 d3 08 	sts	0x08D3, r19
     bde:	20 93 d2 08 	sts	0x08D2, r18
		e_owner->state = READY;
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	23 83       	std	Z+3, r18	; 0x03
     be6:	68 ce       	rjmp	.-816    	; 0x8b8 <OS_Start+0x9c>
static void Kernel_Create_Mutex(void)
{
	int i;
	
	//Make sure the system's mutexes are not at max
	if(Mutex_Count >= MAXMUTEX)
     be8:	80 91 d0 08 	lds	r24, 0x08D0
     bec:	90 91 d1 08 	lds	r25, 0x08D1
     bf0:	08 97       	sbiw	r24, 0x08	; 8
     bf2:	48 f4       	brcc	.+18     	; 0xc06 <OS_Start+0x3ea>
		return;
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
	if(Mutex[i].id == 0) break;
     bf4:	e8 ed       	ldi	r30, 0xD8	; 216
     bf6:	f8 e0       	ldi	r31, 0x08	; 8
     bf8:	80 81       	ld	r24, Z
     bfa:	91 81       	ldd	r25, Z+1	; 0x01
     bfc:	89 2b       	or	r24, r25
     bfe:	d9 f0       	breq	.+54     	; 0xc36 <OS_Start+0x41a>
     c00:	46 2d       	mov	r20, r6
     c02:	55 2d       	mov	r21, r5
     c04:	07 c0       	rjmp	.+14     	; 0xc14 <OS_Start+0x3f8>
	
	//Make sure the system's mutexes are not at max
	if(Mutex_Count >= MAXMUTEX)
	{
		#ifdef DEBUG
		printf("Kernel_Create_Mutex: Failed to create Mutex. The system is at its max mutex threshold.\n");
     c06:	80 ed       	ldi	r24, 0xD0	; 208
     c08:	95 e0       	ldi	r25, 0x05	; 5
     c0a:	31 d3       	rcall	.+1634   	; 0x126e <puts>
		#endif
		err = MAX_MUTEX_ERR;
     c0c:	8c e0       	ldi	r24, 0x0C	; 12
     c0e:	80 93 c6 1c 	sts	0x1CC6, r24
     c12:	52 ce       	rjmp	.-860    	; 0x8b8 <OS_Start+0x9c>
		return;
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
	if(Mutex[i].id == 0) break;
     c14:	74 9e       	mul	r7, r20
     c16:	f0 01       	movw	r30, r0
     c18:	75 9e       	mul	r7, r21
     c1a:	f0 0d       	add	r31, r0
     c1c:	11 24       	eor	r1, r1
     c1e:	e8 52       	subi	r30, 0x28	; 40
     c20:	f7 4f       	sbci	r31, 0xF7	; 247
     c22:	80 81       	ld	r24, Z
     c24:	91 81       	ldd	r25, Z+1	; 0x01
     c26:	89 2b       	or	r24, r25
     c28:	41 f0       	breq	.+16     	; 0xc3a <OS_Start+0x41e>
		err = MAX_MUTEX_ERR;
		return;
	}
	
	//Find an uninitialized Mutex slot
	for(i=0; i<MAXMUTEX; i++)
     c2a:	4f 5f       	subi	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	48 30       	cpi	r20, 0x08	; 8
     c30:	51 05       	cpc	r21, r1
     c32:	81 f7       	brne	.-32     	; 0xc14 <OS_Start+0x3f8>
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <OS_Start+0x41e>
	if(Mutex[i].id == 0) break;
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e0       	ldi	r21, 0x00	; 0
	
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
     c3a:	80 91 cb 1c 	lds	r24, 0x1CCB
     c3e:	90 91 cc 1c 	lds	r25, 0x1CCC
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	90 93 cc 1c 	sts	0x1CCC, r25
     c48:	80 93 cb 1c 	sts	0x1CCB, r24
     c4c:	74 9e       	mul	r7, r20
     c4e:	f0 01       	movw	r30, r0
     c50:	75 9e       	mul	r7, r21
     c52:	f0 0d       	add	r31, r0
     c54:	11 24       	eor	r1, r1
     c56:	e8 52       	subi	r30, 0x28	; 40
     c58:	f7 4f       	sbci	r31, 0xF7	; 247
     c5a:	91 83       	std	Z+1, r25	; 0x01
     c5c:	80 83       	st	Z, r24
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
     c5e:	13 82       	std	Z+3, r1	; 0x03
     c60:	12 82       	std	Z+2, r1	; 0x02
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
     c66:	74 9e       	mul	r7, r20
     c68:	90 01       	movw	r18, r0
     c6a:	75 9e       	mul	r7, r21
     c6c:	30 0d       	add	r19, r0
     c6e:	11 24       	eor	r1, r1
     c70:	bf 01       	movw	r22, r30
     c72:	fb 01       	movw	r30, r22
     c74:	e8 0f       	add	r30, r24
     c76:	f9 1f       	adc	r31, r25
     c78:	c6 a2       	std	Z+38, r12	; 0x26
		Mutex[i].blocked_stack[j] = -1;
     c7a:	fc 01       	movw	r30, r24
     c7c:	33 96       	adiw	r30, 0x03	; 3
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	e2 0f       	add	r30, r18
     c84:	f3 1f       	adc	r31, r19
     c86:	e8 52       	subi	r30, 0x28	; 40
     c88:	f7 4f       	sbci	r31, 0xF7	; 247
     c8a:	91 82       	std	Z+1, r9	; 0x01
     c8c:	80 82       	st	Z, r8
		Mutex[i].order[j] = 0;
     c8e:	fc 01       	movw	r30, r24
     c90:	7b 96       	adiw	r30, 0x1b	; 27
     c92:	ee 0f       	add	r30, r30
     c94:	ff 1f       	adc	r31, r31
     c96:	e2 0f       	add	r30, r18
     c98:	f3 1f       	adc	r31, r19
     c9a:	e8 52       	subi	r30, 0x28	; 40
     c9c:	f7 4f       	sbci	r31, 0xF7	; 247
     c9e:	11 82       	std	Z+1, r1	; 0x01
     ca0:	10 82       	st	Z, r1
	
	//Assign a new unique ID to the mutex. Note that the smallest valid mutex ID is 1.
	Mutex[i].id = ++Last_MutexID;
	Mutex[i].owner = 0;		// note when mutex's owner is 0, it is free
	// init priority stack
	for (int j=0; j<MAXTHREAD; j++) {
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	80 31       	cpi	r24, 0x10	; 16
     ca6:	91 05       	cpc	r25, r1
     ca8:	21 f7       	brne	.-56     	; 0xc72 <OS_Start+0x456>
		Mutex[i].priority_stack[j] = LOWEST_PRIORITY+1;
		Mutex[i].blocked_stack[j] = -1;
		Mutex[i].order[j] = 0;
	}
	Mutex[i].num_of_process = 0;
     caa:	74 9e       	mul	r7, r20
     cac:	c0 01       	movw	r24, r0
     cae:	75 9e       	mul	r7, r21
     cb0:	90 0d       	add	r25, r0
     cb2:	11 24       	eor	r1, r1
     cb4:	88 52       	subi	r24, 0x28	; 40
     cb6:	97 4f       	sbci	r25, 0xF7	; 247
     cb8:	fc 01       	movw	r30, r24
     cba:	ea 5a       	subi	r30, 0xAA	; 170
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	11 82       	std	Z+1, r1	; 0x01
     cc0:	10 82       	st	Z, r1
	Mutex[i].total_num = 0;
     cc2:	32 96       	adiw	r30, 0x02	; 2
     cc4:	11 82       	std	Z+1, r1	; 0x01
     cc6:	10 82       	st	Z, r1
	++Mutex_Count;
     cc8:	80 91 d0 08 	lds	r24, 0x08D0
     ccc:	90 91 d1 08 	lds	r25, 0x08D1
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	90 93 d1 08 	sts	0x08D1, r25
     cd6:	80 93 d0 08 	sts	0x08D0, r24
	err = NO_ERR;
     cda:	10 92 c6 1c 	sts	0x1CC6, r1
	
	#ifdef DEBUG
	printf("Kernel_Create_Mutex: Created Mutex %d!\n", Last_MutexID);
     cde:	80 91 cb 1c 	lds	r24, 0x1CCB
     ce2:	90 91 cc 1c 	lds	r25, 0x1CCC
     ce6:	9f 93       	push	r25
     ce8:	8f 93       	push	r24
     cea:	3f 92       	push	r3
     cec:	2f 92       	push	r2
     cee:	ac d2       	rcall	.+1368   	; 0x1248 <printf>
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	df cd       	rjmp	.-1090   	; 0x8b8 <OS_Start+0x9c>

static void Dispatch();

static void Kernel_Lock_Mutex(void)
{
	MUTEX_TYPE* m = findMutexByEventID(Cp->request_arg);
     cfa:	d9 01       	movw	r26, r18
     cfc:	16 96       	adiw	r26, 0x06	; 6
     cfe:	8d 91       	ld	r24, X+
     d00:	9c 91       	ld	r25, X
     d02:	17 97       	sbiw	r26, 0x07	; 7
     d04:	c9 db       	rcall	.-2158   	; 0x498 <findMutexByEventID>
     d06:	8c 01       	movw	r16, r24
	PD *m_owner = findProcessByPID(m->owner);
     d08:	fc 01       	movw	r30, r24
     d0a:	82 81       	ldd	r24, Z+2	; 0x02
     d0c:	93 81       	ldd	r25, Z+3	; 0x03
     d0e:	53 db       	rcall	.-2394   	; 0x3b6 <findProcessByPID>
	
	if(m == NULL)
     d10:	01 15       	cp	r16, r1
     d12:	11 05       	cpc	r17, r1
     d14:	21 f4       	brne	.+8      	; 0xd1e <OS_Start+0x502>
	{
		#ifdef DEBUG
		printf("Kernel_Lock_Mutex: Error finding requested mutex!\n");
     d16:	8f e4       	ldi	r24, 0x4F	; 79
     d18:	96 e0       	ldi	r25, 0x06	; 6
     d1a:	a9 d2       	rcall	.+1362   	; 0x126e <puts>
     d1c:	cd cd       	rjmp	.-1126   	; 0x8b8 <OS_Start+0x9c>
		#endif
		return;
	}
	
	// if mutex is free
	if(m->owner == 0)
     d1e:	d8 01       	movw	r26, r16
     d20:	12 96       	adiw	r26, 0x02	; 2
     d22:	2d 91       	ld	r18, X+
     d24:	3c 91       	ld	r19, X
     d26:	13 97       	sbiw	r26, 0x03	; 3
     d28:	21 15       	cp	r18, r1
     d2a:	31 05       	cpc	r19, r1
     d2c:	a9 f4       	brne	.+42     	; 0xd58 <OS_Start+0x53c>
	{
		m->owner = Cp->pid;
     d2e:	e0 91 c9 1c 	lds	r30, 0x1CC9
     d32:	f0 91 ca 1c 	lds	r31, 0x1CCA
     d36:	80 81       	ld	r24, Z
     d38:	91 81       	ldd	r25, Z+1	; 0x01
     d3a:	13 96       	adiw	r26, 0x03	; 3
     d3c:	9c 93       	st	X, r25
     d3e:	8e 93       	st	-X, r24
     d40:	12 97       	sbiw	r26, 0x02	; 2
		m->count = 1;
     d42:	14 96       	adiw	r26, 0x04	; 4
     d44:	6c 92       	st	X, r6
     d46:	14 97       	sbiw	r26, 0x04	; 4
     d48:	15 96       	adiw	r26, 0x05	; 5
     d4a:	5c 92       	st	X, r5
		m->own_pri = Cp->pri;				// keep track of the original priority of the owner
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	f8 01       	movw	r30, r16
     d50:	e6 5a       	subi	r30, 0xA6	; 166
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	80 83       	st	Z, r24
     d56:	b0 cd       	rjmp	.-1184   	; 0x8b8 <OS_Start+0x9c>
		return;
	} else if (m->owner == Cp->pid) {
     d58:	a0 91 c9 1c 	lds	r26, 0x1CC9
     d5c:	b0 91 ca 1c 	lds	r27, 0x1CCA
     d60:	4d 91       	ld	r20, X+
     d62:	5c 91       	ld	r21, X
     d64:	11 97       	sbiw	r26, 0x01	; 1
     d66:	24 17       	cp	r18, r20
     d68:	35 07       	cpc	r19, r21
     d6a:	39 f4       	brne	.+14     	; 0xd7a <OS_Start+0x55e>
		// if it has locked by the current process
		++(m->count);
     d6c:	f8 01       	movw	r30, r16
     d6e:	84 81       	ldd	r24, Z+4	; 0x04
     d70:	95 81       	ldd	r25, Z+5	; 0x05
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	95 83       	std	Z+5, r25	; 0x05
     d76:	84 83       	std	Z+4, r24	; 0x04
     d78:	9f cd       	rjmp	.-1218   	; 0x8b8 <OS_Start+0x9c>
		return;
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
     d7a:	26 e0       	ldi	r18, 0x06	; 6
     d7c:	13 96       	adiw	r26, 0x03	; 3
     d7e:	2c 93       	st	X, r18
     d80:	13 97       	sbiw	r26, 0x03	; 3
		//enqueue cp to stack
		++(m->num_of_process);
     d82:	f8 01       	movw	r30, r16
     d84:	ea 5a       	subi	r30, 0xAA	; 170
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	20 81       	ld	r18, Z
     d8a:	31 81       	ldd	r19, Z+1	; 0x01
     d8c:	2f 5f       	subi	r18, 0xFF	; 255
     d8e:	3f 4f       	sbci	r19, 0xFF	; 255
     d90:	31 83       	std	Z+1, r19	; 0x01
     d92:	20 83       	st	Z, r18
		++(m->total_num);
     d94:	32 96       	adiw	r30, 0x02	; 2
     d96:	60 81       	ld	r22, Z
     d98:	71 81       	ldd	r23, Z+1	; 0x01
     d9a:	6f 5f       	subi	r22, 0xFF	; 255
     d9c:	7f 4f       	sbci	r23, 0xFF	; 255
     d9e:	71 83       	std	Z+1, r23	; 0x01
     da0:	60 83       	st	Z, r22
		for (int i=0; i<MAXTHREAD; i++) {
			if (m->blocked_stack[i] == -1){
     da2:	f8 01       	movw	r30, r16
     da4:	26 81       	ldd	r18, Z+6	; 0x06
     da6:	37 81       	ldd	r19, Z+7	; 0x07
     da8:	2f 3f       	cpi	r18, 0xFF	; 255
     daa:	3f 4f       	sbci	r19, 0xFF	; 255
     dac:	61 f0       	breq	.+24     	; 0xdc6 <OS_Start+0x5aa>
     dae:	f8 01       	movw	r30, r16
     db0:	38 96       	adiw	r30, 0x08	; 8
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
     db2:	26 2d       	mov	r18, r6
     db4:	35 2d       	mov	r19, r5
     db6:	5b 01       	movw	r10, r22
			if (m->blocked_stack[i] == -1){
     db8:	41 91       	ld	r20, Z+
     dba:	51 91       	ld	r21, Z+
     dbc:	4f 3f       	cpi	r20, 0xFF	; 255
     dbe:	5f 4f       	sbci	r21, 0xFF	; 255
     dc0:	c1 f4       	brne	.+48     	; 0xdf2 <OS_Start+0x5d6>
     dc2:	b5 01       	movw	r22, r10
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <OS_Start+0x5ae>
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
			if (m->blocked_stack[i] == -1){
				m->blocked_stack[i] = Cp->pid;
     dca:	4d 91       	ld	r20, X+
     dcc:	5c 91       	ld	r21, X
     dce:	11 97       	sbiw	r26, 0x01	; 1
     dd0:	f9 01       	movw	r30, r18
     dd2:	ee 0f       	add	r30, r30
     dd4:	ff 1f       	adc	r31, r31
     dd6:	e0 0f       	add	r30, r16
     dd8:	f1 1f       	adc	r31, r17
     dda:	57 83       	std	Z+7, r21	; 0x07
     ddc:	46 83       	std	Z+6, r20	; 0x06
				m->order[i] = m->total_num;
     dde:	77 ab       	std	Z+55, r23	; 0x37
     de0:	66 ab       	std	Z+54, r22	; 0x36
				m->priority_stack[i] = Cp->pri;
     de2:	12 96       	adiw	r26, 0x02	; 2
     de4:	4c 91       	ld	r20, X
     de6:	12 97       	sbiw	r26, 0x02	; 2
     de8:	f8 01       	movw	r30, r16
     dea:	e2 0f       	add	r30, r18
     dec:	f3 1f       	adc	r31, r19
     dee:	46 a3       	std	Z+38, r20	; 0x26
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <OS_Start+0x5e0>
	} else {
		Cp->state = WAIT_MUTEX;								//put cp into state wait mutex
		//enqueue cp to stack
		++(m->num_of_process);
		++(m->total_num);
		for (int i=0; i<MAXTHREAD; i++) {
     df2:	2f 5f       	subi	r18, 0xFF	; 255
     df4:	3f 4f       	sbci	r19, 0xFF	; 255
     df6:	20 31       	cpi	r18, 0x10	; 16
     df8:	31 05       	cpc	r19, r1
     dfa:	f1 f6       	brne	.-68     	; 0xdb8 <OS_Start+0x59c>
			}
		}
		// end of enqueue
		
		//if cp's priority is higher than the owner
		if (Cp->pri < m_owner->pri) {
     dfc:	12 96       	adiw	r26, 0x02	; 2
     dfe:	3c 91       	ld	r19, X
     e00:	12 97       	sbiw	r26, 0x02	; 2
     e02:	fc 01       	movw	r30, r24
     e04:	22 81       	ldd	r18, Z+2	; 0x02
     e06:	32 17       	cp	r19, r18
     e08:	18 f4       	brcc	.+6      	; 0xe10 <OS_Start+0x5f4>
			m_owner->pri = Cp->pri;				// the owner gets cp's priority
     e0a:	12 96       	adiw	r26, 0x02	; 2
     e0c:	2c 91       	ld	r18, X
     e0e:	22 83       	std	Z+2, r18	; 0x02
		}
		Dispatch();
     e10:	41 da       	rcall	.-2942   	; 0x294 <Dispatch>
     e12:	52 cd       	rjmp	.-1372   	; 0x8b8 <OS_Start+0x9c>
	}
}

static void Kernel_Unlock_Mutex(void)
{
	MUTEX_TYPE* m = findMutexByEventID(Cp->request_arg);
     e14:	d9 01       	movw	r26, r18
     e16:	16 96       	adiw	r26, 0x06	; 6
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	17 97       	sbiw	r26, 0x07	; 7
     e1e:	3c db       	rcall	.-2440   	; 0x498 <findMutexByEventID>
     e20:	9d 83       	std	Y+5, r25	; 0x05
     e22:	8c 83       	std	Y+4, r24	; 0x04
	PD *m_owner = findProcessByPID(m->owner);
     e24:	fc 01       	movw	r30, r24
     e26:	82 81       	ldd	r24, Z+2	; 0x02
     e28:	93 81       	ldd	r25, Z+3	; 0x03
     e2a:	c5 da       	rcall	.-2678   	; 0x3b6 <findProcessByPID>
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
	
	if(m == NULL)
     e30:	8c 81       	ldd	r24, Y+4	; 0x04
     e32:	9d 81       	ldd	r25, Y+5	; 0x05
     e34:	89 2b       	or	r24, r25
     e36:	21 f4       	brne	.+8      	; 0xe40 <OS_Start+0x624>
	{
		#ifdef DEBUG
		printf("Kernel_Unlock_Mutex: Error finding requested mutex!\n");
     e38:	81 e8       	ldi	r24, 0x81	; 129
     e3a:	96 e0       	ldi	r25, 0x06	; 6
     e3c:	18 d2       	rcall	.+1072   	; 0x126e <puts>
     e3e:	3c cd       	rjmp	.-1416   	; 0x8b8 <OS_Start+0x9c>
		#endif
		return;
	}
	
	if(m->owner != Cp->pid){
     e40:	e0 91 c9 1c 	lds	r30, 0x1CC9
     e44:	f0 91 ca 1c 	lds	r31, 0x1CCA
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	ac 81       	ldd	r26, Y+4	; 0x04
     e4e:	bd 81       	ldd	r27, Y+5	; 0x05
     e50:	12 96       	adiw	r26, 0x02	; 2
     e52:	2d 91       	ld	r18, X+
     e54:	3c 91       	ld	r19, X
     e56:	13 97       	sbiw	r26, 0x03	; 3
     e58:	28 17       	cp	r18, r24
     e5a:	39 07       	cpc	r19, r25
     e5c:	21 f0       	breq	.+8      	; 0xe66 <OS_Start+0x64a>
		#ifdef DEBUG
		printf("Kernel_Unlock_Mutex: The owner is not the current process\n");
     e5e:	85 eb       	ldi	r24, 0xB5	; 181
     e60:	96 e0       	ldi	r25, 0x06	; 6
     e62:	05 d2       	rcall	.+1034   	; 0x126e <puts>
     e64:	29 cd       	rjmp	.-1454   	; 0x8b8 <OS_Start+0x9c>
		#endif
		return;
	} else if (m->count > 1) {
     e66:	ec 81       	ldd	r30, Y+4	; 0x04
     e68:	fd 81       	ldd	r31, Y+5	; 0x05
     e6a:	84 81       	ldd	r24, Z+4	; 0x04
     e6c:	95 81       	ldd	r25, Z+5	; 0x05
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	91 05       	cpc	r25, r1
     e72:	20 f0       	brcs	.+8      	; 0xe7c <OS_Start+0x660>
		// M is locked more than once
		--(m->count);
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	95 83       	std	Z+5, r25	; 0x05
     e78:	84 83       	std	Z+4, r24	; 0x04
     e7a:	1e cd       	rjmp	.-1476   	; 0x8b8 <OS_Start+0x9c>
	} else if (m->num_of_process > 0) {
     e7c:	ec 81       	ldd	r30, Y+4	; 0x04
     e7e:	fd 81       	ldd	r31, Y+5	; 0x05
     e80:	ea 5a       	subi	r30, 0xAA	; 170
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	a0 80       	ld	r10, Z
     e86:	b1 80       	ldd	r11, Z+1	; 0x01
     e88:	a1 14       	cp	r10, r1
     e8a:	b1 04       	cpc	r11, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <OS_Start+0x674>
     e8e:	6f c0       	rjmp	.+222    	; 0xf6e <OS_Start+0x752>
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
		unsigned int temp_order = m->total_num + 1;
     e90:	ec 81       	ldd	r30, Y+4	; 0x04
     e92:	fd 81       	ldd	r31, Y+5	; 0x05
     e94:	e8 5a       	subi	r30, 0xA8	; 168
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	60 81       	ld	r22, Z
     e9a:	71 81       	ldd	r23, Z+1	; 0x01
     e9c:	6f 5f       	subi	r22, 0xFF	; 255
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	2c 81       	ldd	r18, Y+4	; 0x04
     ea2:	3d 81       	ldd	r19, Y+5	; 0x05
     ea4:	2a 5d       	subi	r18, 0xDA	; 218
     ea6:	3f 4f       	sbci	r19, 0xFF	; 255
     ea8:	ec 81       	ldd	r30, Y+4	; 0x04
     eaa:	fd 81       	ldd	r31, Y+5	; 0x05
     eac:	f6 96       	adiw	r30, 0x36	; 54
     eae:	ac 81       	ldd	r26, Y+4	; 0x04
     eb0:	bd 81       	ldd	r27, Y+5	; 0x05
     eb2:	16 96       	adiw	r26, 0x06	; 6
     eb4:	4c 81       	ldd	r20, Y+4	; 0x04
     eb6:	5d 81       	ldd	r21, Y+5	; 0x05
     eb8:	4a 5a       	subi	r20, 0xAA	; 170
     eba:	5f 4f       	sbci	r21, 0xFF	; 255
		// M is locked more than once
		--(m->count);
	} else if (m->num_of_process > 0) {
		// there are tasks waiting on the mutex
		// deque the task with highest priority
		PID p_dequeue = 0;
     ebc:	d1 2c       	mov	r13, r1
     ebe:	00 e0       	ldi	r16, 0x00	; 0
		unsigned int temp_order = m->total_num + 1;
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
     ec0:	1c 2d       	mov	r17, r12
     ec2:	bf 83       	std	Y+7, r27	; 0x07
     ec4:	ae 83       	std	Y+6, r26	; 0x06
     ec6:	c9 01       	movw	r24, r18
     ec8:	2c 81       	ldd	r18, Y+4	; 0x04
     eca:	3d 81       	ldd	r19, Y+5	; 0x05
     ecc:	9d 83       	std	Y+5, r25	; 0x05
     ece:	8c 83       	std	Y+4, r24	; 0x04
		int i;
		for (i=0; i<MAXTHREAD; i++) {
			if (m->priority_stack[i] < temp_pri) {
     ed0:	ac 81       	ldd	r26, Y+4	; 0x04
     ed2:	bd 81       	ldd	r27, Y+5	; 0x05
     ed4:	4d 90       	ld	r4, X+
     ed6:	bd 83       	std	Y+5, r27	; 0x05
     ed8:	ac 83       	std	Y+4, r26	; 0x04
     eda:	41 16       	cp	r4, r17
     edc:	48 f4       	brcc	.+18     	; 0xef0 <OS_Start+0x6d4>
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
     ede:	60 81       	ld	r22, Z
     ee0:	71 81       	ldd	r23, Z+1	; 0x01
				p_dequeue = m->blocked_stack[i];
     ee2:	ae 81       	ldd	r26, Y+6	; 0x06
     ee4:	bf 81       	ldd	r27, Y+7	; 0x07
     ee6:	dc 90       	ld	r13, X
     ee8:	11 96       	adiw	r26, 0x01	; 1
     eea:	0c 91       	ld	r16, X
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
		int i;
		for (i=0; i<MAXTHREAD; i++) {
			if (m->priority_stack[i] < temp_pri) {
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
     eec:	14 2d       	mov	r17, r4
     eee:	10 c0       	rjmp	.+32     	; 0xf10 <OS_Start+0x6f4>
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
     ef0:	41 12       	cpse	r4, r17
     ef2:	0e c0       	rjmp	.+28     	; 0xf10 <OS_Start+0x6f4>
     ef4:	80 81       	ld	r24, Z
     ef6:	91 81       	ldd	r25, Z+1	; 0x01
     ef8:	68 17       	cp	r22, r24
     efa:	79 07       	cpc	r23, r25
     efc:	40 f4       	brcc	.+16     	; 0xf0e <OS_Start+0x6f2>
				// same priority and came into the queue earlier
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
     efe:	ae 81       	ldd	r26, Y+6	; 0x06
     f00:	bf 81       	ldd	r27, Y+7	; 0x07
     f02:	dc 90       	ld	r13, X
     f04:	11 96       	adiw	r26, 0x01	; 1
     f06:	0c 91       	ld	r16, X
     f08:	14 2d       	mov	r17, r4
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
				// same priority and came into the queue earlier
				temp_order = m->order[i];
     f0a:	bc 01       	movw	r22, r24
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <OS_Start+0x6f4>
			if (m->priority_stack[i] < temp_pri) {
				// found a task with higher priority
				temp_pri = m->priority_stack[i];
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			} else if (m->priority_stack[i] == temp_pri && temp_order < m->order[i]) {
     f0e:	14 2d       	mov	r17, r4
     f10:	32 96       	adiw	r30, 0x02	; 2
     f12:	8e 81       	ldd	r24, Y+6	; 0x06
     f14:	9f 81       	ldd	r25, Y+7	; 0x07
     f16:	02 96       	adiw	r24, 0x02	; 2
     f18:	9f 83       	std	Y+7, r25	; 0x07
     f1a:	8e 83       	std	Y+6, r24	; 0x06
		// deque the task with highest priority
		PID p_dequeue = 0;
		unsigned int temp_order = m->total_num + 1;
		PRIORITY temp_pri = LOWEST_PRIORITY + 1;
		int i;
		for (i=0; i<MAXTHREAD; i++) {
     f1c:	e4 17       	cp	r30, r20
     f1e:	f5 07       	cpc	r31, r21
     f20:	b9 f6       	brne	.-82     	; 0xed0 <OS_Start+0x6b4>
     f22:	3d 83       	std	Y+5, r19	; 0x05
     f24:	2c 83       	std	Y+4, r18	; 0x04
				temp_order = m->order[i];
				p_dequeue = m->blocked_stack[i];
			}
		}
		//dequeue index i
		m->blocked_stack[i] = -1;
     f26:	d9 01       	movw	r26, r18
     f28:	97 96       	adiw	r26, 0x27	; 39
     f2a:	9c 92       	st	X, r9
     f2c:	8e 92       	st	-X, r8
     f2e:	96 97       	sbiw	r26, 0x26	; 38
		m->priority_stack[i] = LOWEST_PRIORITY+1;
     f30:	d6 96       	adiw	r26, 0x36	; 54
     f32:	cc 92       	st	X, r12
		m->order[i] = 0;
		--(m->num_of_process);
     f34:	f9 01       	movw	r30, r18
     f36:	ea 5a       	subi	r30, 0xAA	; 170
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	c5 01       	movw	r24, r10
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	80 83       	st	Z, r24
		PD* target_p = findProcessByPID(p_dequeue);
     f42:	8d 2d       	mov	r24, r13
     f44:	90 2f       	mov	r25, r16
     f46:	37 da       	rcall	.-2962   	; 0x3b6 <findProcessByPID>
		m_owner->pri = m->own_pri;		//reset owner's priority
     f48:	ac 81       	ldd	r26, Y+4	; 0x04
     f4a:	bd 81       	ldd	r27, Y+5	; 0x05
     f4c:	a6 5a       	subi	r26, 0xA6	; 166
     f4e:	bf 4f       	sbci	r27, 0xFF	; 255
     f50:	2c 91       	ld	r18, X
     f52:	e9 81       	ldd	r30, Y+1	; 0x01
     f54:	fa 81       	ldd	r31, Y+2	; 0x02
     f56:	22 83       	std	Z+2, r18	; 0x02
		m->owner = p_dequeue;
     f58:	ec 81       	ldd	r30, Y+4	; 0x04
     f5a:	fd 81       	ldd	r31, Y+5	; 0x05
     f5c:	d2 82       	std	Z+2, r13	; 0x02
     f5e:	03 83       	std	Z+3, r16	; 0x03
		m->own_pri = temp_pri;			//keep track of new owner's priority;
     f60:	1c 93       	st	X, r17
		target_p->state = READY;
     f62:	21 e0       	ldi	r18, 0x01	; 1
     f64:	dc 01       	movw	r26, r24
     f66:	13 96       	adiw	r26, 0x03	; 3
     f68:	2c 93       	st	X, r18
		Dispatch();
     f6a:	94 d9       	rcall	.-3288   	; 0x294 <Dispatch>
     f6c:	a5 cc       	rjmp	.-1718   	; 0x8b8 <OS_Start+0x9c>
		return;
	} else {
		m->owner = 0;
     f6e:	ec 81       	ldd	r30, Y+4	; 0x04
     f70:	fd 81       	ldd	r31, Y+5	; 0x05
     f72:	13 82       	std	Z+3, r1	; 0x03
     f74:	12 82       	std	Z+2, r1	; 0x02
		m->count = 0;
     f76:	15 82       	std	Z+5, r1	; 0x05
     f78:	14 82       	std	Z+4, r1	; 0x04
		m_owner->pri = m->own_pri;		//reset owner's priority
     f7a:	e6 5a       	subi	r30, 0xA6	; 166
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	80 81       	ld	r24, Z
     f80:	a9 81       	ldd	r26, Y+1	; 0x01
     f82:	ba 81       	ldd	r27, Y+2	; 0x02
     f84:	12 96       	adiw	r26, 0x02	; 2
     f86:	8c 93       	st	X, r24
     f88:	97 cc       	rjmp	.-1746   	; 0x8b8 <OS_Start+0x9c>
			//Does this need dispatch under any circumstances?
			break;
		   
			case YIELD:
			case NONE:					// NONE could be caused by a timer interrupt
			Cp->state = READY;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	f9 01       	movw	r30, r18
     f8e:	83 83       	std	Z+3, r24	; 0x03
			Dispatch();
     f90:	81 d9       	rcall	.-3326   	; 0x294 <Dispatch>
     f92:	92 cc       	rjmp	.-1756   	; 0x8b8 <OS_Start+0x9c>
			break;
       
			//Invalid request code, just ignore
			default:
				err = INVALID_KERNET_REQUEST_ERR;
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	80 93 c6 1c 	sts	0x1CC6, r24
     f9a:	8e cc       	rjmp	.-1764   	; 0x8b8 <OS_Start+0x9c>
		#endif
		
		Next_Kernel_Request();
		/* NEVER RETURNS!!! */
	}
}
     f9c:	27 96       	adiw	r28, 0x07	; 7
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	df 90       	pop	r13
     fb6:	cf 90       	pop	r12
     fb8:	bf 90       	pop	r11
     fba:	af 90       	pop	r10
     fbc:	9f 90       	pop	r9
     fbe:	8f 90       	pop	r8
     fc0:	7f 90       	pop	r7
     fc2:	6f 90       	pop	r6
     fc4:	5f 90       	pop	r5
     fc6:	4f 90       	pop	r4
     fc8:	3f 90       	pop	r3
     fca:	2f 90       	pop	r2
     fcc:	08 95       	ret

00000fce <Task_Create>:
	}
	Disable_Interrupt();
	
	Cp->request = SIGNAL_E;
	Cp->request_arg = e;
	Enter_Kernel();	
     fce:	20 91 c2 1c 	lds	r18, 0x1CC2
     fd2:	30 91 c3 1c 	lds	r19, 0x1CC3
     fd6:	23 2b       	or	r18, r19
     fd8:	81 f0       	breq	.+32     	; 0xffa <Task_Create+0x2c>
     fda:	f8 94       	cli
     fdc:	e0 91 c9 1c 	lds	r30, 0x1CC9
     fe0:	f0 91 ca 1c 	lds	r31, 0x1CCA
     fe4:	62 83       	std	Z+2, r22	; 0x02
     fe6:	51 87       	std	Z+9, r21	; 0x09
     fe8:	40 87       	std	Z+8, r20	; 0x08
     fea:	21 e0       	ldi	r18, 0x01	; 1
     fec:	25 83       	std	Z+5, r18	; 0x05
     fee:	e4 5f       	subi	r30, 0xF4	; 244
     ff0:	fe 4f       	sbci	r31, 0xFE	; 254
     ff2:	91 83       	std	Z+1, r25	; 0x01
     ff4:	80 83       	st	Z, r24
     ff6:	f9 d8       	rcall	.-3598   	; 0x1ea <Enter_Kernel>
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <Task_Create+0x2e>
     ffa:	02 db       	rcall	.-2556   	; 0x600 <Kernel_Create_Task>
     ffc:	80 91 c6 1c 	lds	r24, 0x1CC6
    1000:	84 30       	cpi	r24, 0x04	; 4
    1002:	a1 f0       	breq	.+40     	; 0x102c <Task_Create+0x5e>
    1004:	80 91 c0 1c 	lds	r24, 0x1CC0
    1008:	90 91 c1 1c 	lds	r25, 0x1CC1
    100c:	9f 93       	push	r25
    100e:	8f 93       	push	r24
    1010:	8f ee       	ldi	r24, 0xEF	; 239
    1012:	96 e0       	ldi	r25, 0x06	; 6
    1014:	9f 93       	push	r25
    1016:	8f 93       	push	r24
    1018:	17 d1       	rcall	.+558    	; 0x1248 <printf>
    101a:	80 91 c0 1c 	lds	r24, 0x1CC0
    101e:	90 91 c1 1c 	lds	r25, 0x1CC1
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	08 95       	ret
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	08 95       	ret

00001032 <Task_Terminate>:
    1032:	80 91 c2 1c 	lds	r24, 0x1CC2
    1036:	90 91 c3 1c 	lds	r25, 0x1CC3
    103a:	89 2b       	or	r24, r25
    103c:	21 f4       	brne	.+8      	; 0x1046 <Task_Terminate+0x14>
    103e:	83 e0       	ldi	r24, 0x03	; 3
    1040:	80 93 c6 1c 	sts	0x1CC6, r24
    1044:	08 95       	ret
    1046:	f8 94       	cli
    1048:	e0 91 c9 1c 	lds	r30, 0x1CC9
    104c:	f0 91 ca 1c 	lds	r31, 0x1CCA
    1050:	83 e0       	ldi	r24, 0x03	; 3
    1052:	85 83       	std	Z+5, r24	; 0x05
    1054:	ca c8       	rjmp	.-3692   	; 0x1ea <Enter_Kernel>
    1056:	08 95       	ret

00001058 <Task_Sleep>:
    1058:	20 91 c2 1c 	lds	r18, 0x1CC2
    105c:	30 91 c3 1c 	lds	r19, 0x1CC3
    1060:	23 2b       	or	r18, r19
    1062:	21 f4       	brne	.+8      	; 0x106c <Task_Sleep+0x14>
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	80 93 c6 1c 	sts	0x1CC6, r24
    106a:	08 95       	ret
    106c:	f8 94       	cli
    106e:	e0 91 c9 1c 	lds	r30, 0x1CC9
    1072:	f0 91 ca 1c 	lds	r31, 0x1CCA
    1076:	26 e0       	ldi	r18, 0x06	; 6
    1078:	25 83       	std	Z+5, r18	; 0x05
    107a:	97 83       	std	Z+7, r25	; 0x07
    107c:	86 83       	std	Z+6, r24	; 0x06
    107e:	b5 c8       	rjmp	.-3734   	; 0x1ea <Enter_Kernel>
    1080:	08 95       	ret

00001082 <Mutex_Init>:
}

MUTEX Mutex_Init(void)
{
	if(!KernelActive){
    1082:	80 91 c2 1c 	lds	r24, 0x1CC2
    1086:	90 91 c3 1c 	lds	r25, 0x1CC3
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	21 f4       	brne	.+8      	; 0x1096 <Mutex_Init+0x14>
		err = KERNEL_INACTIVE_ERR;
    108e:	23 e0       	ldi	r18, 0x03	; 3
    1090:	20 93 c6 1c 	sts	0x1CC6, r18
		return 0;
    1094:	08 95       	ret
	}
	Disable_Interrupt();
    1096:	f8 94       	cli
	
	Cp->request = CREATE_M;
    1098:	e0 91 c9 1c 	lds	r30, 0x1CC9
    109c:	f0 91 ca 1c 	lds	r31, 0x1CCA
    10a0:	8a e0       	ldi	r24, 0x0A	; 10
    10a2:	85 83       	std	Z+5, r24	; 0x05
	Enter_Kernel();
    10a4:	a2 d8       	rcall	.-3772   	; 0x1ea <Enter_Kernel>
	
	//Return zero as Mutex ID if the mutex creation process gave errors. Note that the smallest valid mutex ID is 1
	if (err == MAX_MUTEX_ERR)
    10a6:	80 91 c6 1c 	lds	r24, 0x1CC6
    10aa:	8c 30       	cpi	r24, 0x0C	; 12
    10ac:	a1 f0       	breq	.+40     	; 0x10d6 <Mutex_Init+0x54>
	return 0;
	
	#ifdef DEBUG
	printf("Created Mutex: %d\n", Last_MutexID);
    10ae:	80 91 cb 1c 	lds	r24, 0x1CCB
    10b2:	90 91 cc 1c 	lds	r25, 0x1CCC
    10b6:	9f 93       	push	r25
    10b8:	8f 93       	push	r24
    10ba:	83 e1       	ldi	r24, 0x13	; 19
    10bc:	97 e0       	ldi	r25, 0x07	; 7
    10be:	9f 93       	push	r25
    10c0:	8f 93       	push	r24
    10c2:	c2 d0       	rcall	.+388    	; 0x1248 <printf>
	#endif
	
	return Last_MutexID;
    10c4:	80 91 cb 1c 	lds	r24, 0x1CCB
    10c8:	90 91 cc 1c 	lds	r25, 0x1CCC
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	08 95       	ret
	Cp->request = CREATE_M;
	Enter_Kernel();
	
	//Return zero as Mutex ID if the mutex creation process gave errors. Note that the smallest valid mutex ID is 1
	if (err == MAX_MUTEX_ERR)
	return 0;
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
	#ifdef DEBUG
	printf("Created Mutex: %d\n", Last_MutexID);
	#endif
	
	return Last_MutexID;
}
    10da:	08 95       	ret

000010dc <Mutex_Lock>:

void Mutex_Lock(MUTEX m)
{
	if(!KernelActive){
    10dc:	20 91 c2 1c 	lds	r18, 0x1CC2
    10e0:	30 91 c3 1c 	lds	r19, 0x1CC3
    10e4:	23 2b       	or	r18, r19
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <Mutex_Lock+0x14>
		err = KERNEL_INACTIVE_ERR;
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	80 93 c6 1c 	sts	0x1CC6, r24
		return;
    10ee:	08 95       	ret
	}
	Disable_Interrupt();
    10f0:	f8 94       	cli
	
	Cp->request = LOCK_M;
    10f2:	e0 91 c9 1c 	lds	r30, 0x1CC9
    10f6:	f0 91 ca 1c 	lds	r31, 0x1CCA
    10fa:	2b e0       	ldi	r18, 0x0B	; 11
    10fc:	25 83       	std	Z+5, r18	; 0x05
	Cp->request_arg = m;
    10fe:	97 83       	std	Z+7, r25	; 0x07
    1100:	86 83       	std	Z+6, r24	; 0x06
	Enter_Kernel();
    1102:	73 c8       	rjmp	.-3866   	; 0x1ea <Enter_Kernel>
    1104:	08 95       	ret

00001106 <Mutex_Unlock>:
}

void Mutex_Unlock(MUTEX m)
{
	if(!KernelActive){
    1106:	20 91 c2 1c 	lds	r18, 0x1CC2
    110a:	30 91 c3 1c 	lds	r19, 0x1CC3
    110e:	23 2b       	or	r18, r19
    1110:	21 f4       	brne	.+8      	; 0x111a <Mutex_Unlock+0x14>
		err = KERNEL_INACTIVE_ERR;
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	80 93 c6 1c 	sts	0x1CC6, r24
		return;
    1118:	08 95       	ret
	}
	Disable_Interrupt();
    111a:	f8 94       	cli
	
	Cp->request = UNLOCK_M;
    111c:	e0 91 c9 1c 	lds	r30, 0x1CC9
    1120:	f0 91 ca 1c 	lds	r31, 0x1CCA
    1124:	2c e0       	ldi	r18, 0x0C	; 12
    1126:	25 83       	std	Z+5, r18	; 0x05
	Cp->request_arg = m;
    1128:	97 83       	std	Z+7, r25	; 0x07
    112a:	86 83       	std	Z+6, r24	; 0x06
	Enter_Kernel();
    112c:	5e c8       	rjmp	.-3908   	; 0x1ea <Enter_Kernel>
    112e:	08 95       	ret

00001130 <main>:
/*Don't use main function for application code. Any mandatory kernel initialization should be done here*/
void main() 
{
   //Enable STDIN/OUT to UART redirection for debugging
   #ifdef DEBUG
	uart_init();
    1130:	67 d0       	rcall	.+206    	; 0x1200 <uart_init>
	uart_setredir();
    1132:	77 d0       	rcall	.+238    	; 0x1222 <uart_setredir>
	printf("STDOUT->UART!\n");
    1134:	86 e2       	ldi	r24, 0x26	; 38
    1136:	97 e0       	ldi	r25, 0x07	; 7
    1138:	9a d0       	rcall	.+308    	; 0x126e <puts>
   #endif  
   
   a_main();
    113a:	3c c0       	rjmp	.+120    	; 0x11b4 <a_main>
    113c:	08 95       	ret

0000113e <Task_P2>:
{
	for(;;)
	{
		printf("Hello from 3!\n");
		Task_Sleep(100);
	}
    113e:	84 e3       	ldi	r24, 0x34	; 52
    1140:	97 e0       	ldi	r25, 0x07	; 7
    1142:	95 d0       	rcall	.+298    	; 0x126e <puts>
    1144:	80 91 d1 1c 	lds	r24, 0x1CD1
    1148:	90 91 d2 1c 	lds	r25, 0x1CD2
    114c:	c7 df       	rcall	.-114    	; 0x10dc <Mutex_Lock>
    114e:	8a e5       	ldi	r24, 0x5A	; 90
    1150:	97 e0       	ldi	r25, 0x07	; 7
    1152:	9f 93       	push	r25
    1154:	8f 93       	push	r24
    1156:	78 d0       	rcall	.+240    	; 0x1248 <printf>
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	ff cf       	rjmp	.-2      	; 0x115c <Task_P2+0x1e>

0000115e <Task_P1>:
    115e:	91 df       	rcall	.-222    	; 0x1082 <Mutex_Init>
    1160:	90 93 d2 1c 	sts	0x1CD2, r25
    1164:	80 93 d1 1c 	sts	0x1CD1, r24
    1168:	80 91 cb 1c 	lds	r24, 0x1CCB
    116c:	90 91 cc 1c 	lds	r25, 0x1CCC
    1170:	9f 93       	push	r25
    1172:	8f 93       	push	r24
    1174:	80 e7       	ldi	r24, 0x70	; 112
    1176:	97 e0       	ldi	r25, 0x07	; 7
    1178:	9f 93       	push	r25
    117a:	8f 93       	push	r24
    117c:	65 d0       	rcall	.+202    	; 0x1248 <printf>
    117e:	85 e8       	ldi	r24, 0x85	; 133
    1180:	97 e0       	ldi	r25, 0x07	; 7
    1182:	75 d0       	rcall	.+234    	; 0x126e <puts>
    1184:	80 91 d1 1c 	lds	r24, 0x1CD1
    1188:	90 91 d2 1c 	lds	r25, 0x1CD2
    118c:	a7 df       	rcall	.-178    	; 0x10dc <Mutex_Lock>
    118e:	8b ea       	ldi	r24, 0xAB	; 171
    1190:	97 e0       	ldi	r25, 0x07	; 7
    1192:	6d d0       	rcall	.+218    	; 0x126e <puts>
    1194:	84 e6       	ldi	r24, 0x64	; 100
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	5f df       	rcall	.-322    	; 0x1058 <Task_Sleep>
    119a:	8d eb       	ldi	r24, 0xBD	; 189
    119c:	97 e0       	ldi	r25, 0x07	; 7
    119e:	67 d0       	rcall	.+206    	; 0x126e <puts>
    11a0:	80 91 d1 1c 	lds	r24, 0x1CD1
    11a4:	90 91 d2 1c 	lds	r25, 0x1CD2
    11a8:	ae df       	rcall	.-164    	; 0x1106 <Mutex_Unlock>
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	ff cf       	rjmp	.-2      	; 0x11b2 <Task_P1+0x54>

000011b4 <a_main>:
/*Entry point for application*/
void a_main()
{
	int test_set = 3;				//Which set of tests to run?

	OS_Init();
    11b4:	dc da       	rcall	.-2632   	; 0x76e <OS_Init>
		Task_Create(priority3, 3, 0);
	} else if (test_set == 3)
	{
		//mut = Mutex_Init();
		//evt = Event_Init();
		Task_Create(Task_P1, 1, 0);
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	8f ea       	ldi	r24, 0xAF	; 175
    11be:	98 e0       	ldi	r25, 0x08	; 8
    11c0:	06 df       	rcall	.-500    	; 0xfce <Task_Create>
		Task_Create(Task_P2, 2, 0);
    11c2:	40 e0       	ldi	r20, 0x00	; 0
    11c4:	50 e0       	ldi	r21, 0x00	; 0
    11c6:	62 e0       	ldi	r22, 0x02	; 2
    11c8:	8f e9       	ldi	r24, 0x9F	; 159
    11ca:	98 e0       	ldi	r25, 0x08	; 8
    11cc:	00 df       	rcall	.-512    	; 0xfce <Task_Create>
		//Task_Create(Task_P3, 3, 0);
	}
	
	//mut = Mutex_Init();
	//evt = Event_Init();
	OS_Start();
    11ce:	26 cb       	rjmp	.-2484   	; 0x81c <OS_Start>
    11d0:	08 95       	ret

000011d2 <uart_putchar>:

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
}

void uart_putchar(char c, FILE *stream) {
    11d2:	cf 93       	push	r28
    11d4:	c8 2f       	mov	r28, r24
	if (c == '\n') {
    11d6:	8a 30       	cpi	r24, 0x0A	; 10
    11d8:	11 f4       	brne	.+4      	; 0x11de <uart_putchar+0xc>
		uart_putchar('\r', stream);
    11da:	8d e0       	ldi	r24, 0x0D	; 13
    11dc:	fa df       	rcall	.-12     	; 0x11d2 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
    11de:	e0 ec       	ldi	r30, 0xC0	; 192
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	90 81       	ld	r25, Z
    11e4:	95 ff       	sbrs	r25, 5
    11e6:	fd cf       	rjmp	.-6      	; 0x11e2 <uart_putchar+0x10>
	UDR0 = c;
    11e8:	c0 93 c6 00 	sts	0x00C6, r28
}
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret

000011f0 <uart_getchar>:

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
    11f0:	e0 ec       	ldi	r30, 0xC0	; 192
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	88 23       	and	r24, r24
    11f8:	ec f7       	brge	.-6      	; 0x11f4 <uart_getchar+0x4>
	return UDR0;
    11fa:	80 91 c6 00 	lds	r24, 0x00C6
}
    11fe:	08 95       	ret

00001200 <uart_init>:

FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
    1200:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
    1204:	87 e6       	ldi	r24, 0x67	; 103
    1206:	80 93 c4 00 	sts	0x00C4, r24
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
    120a:	e0 ec       	ldi	r30, 0xC0	; 192
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	8d 7f       	andi	r24, 0xFD	; 253
    1212:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
    1214:	86 e0       	ldi	r24, 0x06	; 6
    1216:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
    121a:	88 e1       	ldi	r24, 0x18	; 24
    121c:	80 93 c1 00 	sts	0x00C1, r24
    1220:	08 95       	ret

00001222 <uart_setredir>:
	return UDR0;
}

void uart_setredir(void)
{
	stdout = &uart_output;
    1222:	e7 ed       	ldi	r30, 0xD7	; 215
    1224:	fc e1       	ldi	r31, 0x1C	; 28
    1226:	8e e0       	ldi	r24, 0x0E	; 14
    1228:	92 e0       	ldi	r25, 0x02	; 2
    122a:	93 83       	std	Z+3, r25	; 0x03
    122c:	82 83       	std	Z+2, r24	; 0x02
	stdin  = &uart_input;
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	92 e0       	ldi	r25, 0x02	; 2
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	80 83       	st	Z, r24
    1236:	08 95       	ret

00001238 <__tablejump2__>:
    1238:	ee 0f       	add	r30, r30
    123a:	ff 1f       	adc	r31, r31
    123c:	88 1f       	adc	r24, r24
    123e:	8b bf       	out	0x3b, r24	; 59
    1240:	07 90       	elpm	r0, Z+
    1242:	f6 91       	elpm	r31, Z
    1244:	e0 2d       	mov	r30, r0
    1246:	19 94       	eijmp

00001248 <printf>:
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	ae 01       	movw	r20, r28
    1252:	4a 5f       	subi	r20, 0xFA	; 250
    1254:	5f 4f       	sbci	r21, 0xFF	; 255
    1256:	fa 01       	movw	r30, r20
    1258:	61 91       	ld	r22, Z+
    125a:	71 91       	ld	r23, Z+
    125c:	af 01       	movw	r20, r30
    125e:	80 91 d9 1c 	lds	r24, 0x1CD9
    1262:	90 91 da 1c 	lds	r25, 0x1CDA
    1266:	33 d0       	rcall	.+102    	; 0x12ce <vfprintf>
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	08 95       	ret

0000126e <puts>:
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	e0 91 d9 1c 	lds	r30, 0x1CD9
    127a:	f0 91 da 1c 	lds	r31, 0x1CDA
    127e:	23 81       	ldd	r18, Z+3	; 0x03
    1280:	21 ff       	sbrs	r18, 1
    1282:	1b c0       	rjmp	.+54     	; 0x12ba <puts+0x4c>
    1284:	8c 01       	movw	r16, r24
    1286:	d0 e0       	ldi	r29, 0x00	; 0
    1288:	c0 e0       	ldi	r28, 0x00	; 0
    128a:	f8 01       	movw	r30, r16
    128c:	81 91       	ld	r24, Z+
    128e:	8f 01       	movw	r16, r30
    1290:	60 91 d9 1c 	lds	r22, 0x1CD9
    1294:	70 91 da 1c 	lds	r23, 0x1CDA
    1298:	db 01       	movw	r26, r22
    129a:	18 96       	adiw	r26, 0x08	; 8
    129c:	ed 91       	ld	r30, X+
    129e:	fc 91       	ld	r31, X
    12a0:	19 97       	sbiw	r26, 0x09	; 9
    12a2:	88 23       	and	r24, r24
    12a4:	31 f0       	breq	.+12     	; 0x12b2 <puts+0x44>
    12a6:	19 95       	eicall
    12a8:	89 2b       	or	r24, r25
    12aa:	79 f3       	breq	.-34     	; 0x128a <puts+0x1c>
    12ac:	df ef       	ldi	r29, 0xFF	; 255
    12ae:	cf ef       	ldi	r28, 0xFF	; 255
    12b0:	ec cf       	rjmp	.-40     	; 0x128a <puts+0x1c>
    12b2:	8a e0       	ldi	r24, 0x0A	; 10
    12b4:	19 95       	eicall
    12b6:	89 2b       	or	r24, r25
    12b8:	19 f0       	breq	.+6      	; 0x12c0 <puts+0x52>
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
    12bc:	9f ef       	ldi	r25, 0xFF	; 255
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <puts+0x56>
    12c0:	8d 2f       	mov	r24, r29
    12c2:	9c 2f       	mov	r25, r28
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	08 95       	ret

000012ce <vfprintf>:
    12ce:	2f 92       	push	r2
    12d0:	3f 92       	push	r3
    12d2:	4f 92       	push	r4
    12d4:	5f 92       	push	r5
    12d6:	6f 92       	push	r6
    12d8:	7f 92       	push	r7
    12da:	8f 92       	push	r8
    12dc:	9f 92       	push	r9
    12de:	af 92       	push	r10
    12e0:	bf 92       	push	r11
    12e2:	cf 92       	push	r12
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	2c 97       	sbiw	r28, 0x0c	; 12
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	7c 01       	movw	r14, r24
    1304:	6b 01       	movw	r12, r22
    1306:	8a 01       	movw	r16, r20
    1308:	fc 01       	movw	r30, r24
    130a:	17 82       	std	Z+7, r1	; 0x07
    130c:	16 82       	std	Z+6, r1	; 0x06
    130e:	83 81       	ldd	r24, Z+3	; 0x03
    1310:	81 ff       	sbrs	r24, 1
    1312:	b0 c1       	rjmp	.+864    	; 0x1674 <vfprintf+0x3a6>
    1314:	ce 01       	movw	r24, r28
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	4c 01       	movw	r8, r24
    131a:	f7 01       	movw	r30, r14
    131c:	93 81       	ldd	r25, Z+3	; 0x03
    131e:	f6 01       	movw	r30, r12
    1320:	93 fd       	sbrc	r25, 3
    1322:	85 91       	lpm	r24, Z+
    1324:	93 ff       	sbrs	r25, 3
    1326:	81 91       	ld	r24, Z+
    1328:	6f 01       	movw	r12, r30
    132a:	88 23       	and	r24, r24
    132c:	09 f4       	brne	.+2      	; 0x1330 <vfprintf+0x62>
    132e:	9e c1       	rjmp	.+828    	; 0x166c <vfprintf+0x39e>
    1330:	85 32       	cpi	r24, 0x25	; 37
    1332:	39 f4       	brne	.+14     	; 0x1342 <vfprintf+0x74>
    1334:	93 fd       	sbrc	r25, 3
    1336:	85 91       	lpm	r24, Z+
    1338:	93 ff       	sbrs	r25, 3
    133a:	81 91       	ld	r24, Z+
    133c:	6f 01       	movw	r12, r30
    133e:	85 32       	cpi	r24, 0x25	; 37
    1340:	21 f4       	brne	.+8      	; 0x134a <vfprintf+0x7c>
    1342:	b7 01       	movw	r22, r14
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	c7 d1       	rcall	.+910    	; 0x16d6 <fputc>
    1348:	e8 cf       	rjmp	.-48     	; 0x131a <vfprintf+0x4c>
    134a:	51 2c       	mov	r5, r1
    134c:	31 2c       	mov	r3, r1
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	20 32       	cpi	r18, 0x20	; 32
    1352:	a0 f4       	brcc	.+40     	; 0x137c <vfprintf+0xae>
    1354:	8b 32       	cpi	r24, 0x2B	; 43
    1356:	69 f0       	breq	.+26     	; 0x1372 <vfprintf+0xa4>
    1358:	30 f4       	brcc	.+12     	; 0x1366 <vfprintf+0x98>
    135a:	80 32       	cpi	r24, 0x20	; 32
    135c:	59 f0       	breq	.+22     	; 0x1374 <vfprintf+0xa6>
    135e:	83 32       	cpi	r24, 0x23	; 35
    1360:	69 f4       	brne	.+26     	; 0x137c <vfprintf+0xae>
    1362:	20 61       	ori	r18, 0x10	; 16
    1364:	2c c0       	rjmp	.+88     	; 0x13be <vfprintf+0xf0>
    1366:	8d 32       	cpi	r24, 0x2D	; 45
    1368:	39 f0       	breq	.+14     	; 0x1378 <vfprintf+0xaa>
    136a:	80 33       	cpi	r24, 0x30	; 48
    136c:	39 f4       	brne	.+14     	; 0x137c <vfprintf+0xae>
    136e:	21 60       	ori	r18, 0x01	; 1
    1370:	26 c0       	rjmp	.+76     	; 0x13be <vfprintf+0xf0>
    1372:	22 60       	ori	r18, 0x02	; 2
    1374:	24 60       	ori	r18, 0x04	; 4
    1376:	23 c0       	rjmp	.+70     	; 0x13be <vfprintf+0xf0>
    1378:	28 60       	ori	r18, 0x08	; 8
    137a:	21 c0       	rjmp	.+66     	; 0x13be <vfprintf+0xf0>
    137c:	27 fd       	sbrc	r18, 7
    137e:	27 c0       	rjmp	.+78     	; 0x13ce <vfprintf+0x100>
    1380:	30 ed       	ldi	r19, 0xD0	; 208
    1382:	38 0f       	add	r19, r24
    1384:	3a 30       	cpi	r19, 0x0A	; 10
    1386:	78 f4       	brcc	.+30     	; 0x13a6 <vfprintf+0xd8>
    1388:	26 ff       	sbrs	r18, 6
    138a:	06 c0       	rjmp	.+12     	; 0x1398 <vfprintf+0xca>
    138c:	fa e0       	ldi	r31, 0x0A	; 10
    138e:	5f 9e       	mul	r5, r31
    1390:	30 0d       	add	r19, r0
    1392:	11 24       	eor	r1, r1
    1394:	53 2e       	mov	r5, r19
    1396:	13 c0       	rjmp	.+38     	; 0x13be <vfprintf+0xf0>
    1398:	8a e0       	ldi	r24, 0x0A	; 10
    139a:	38 9e       	mul	r3, r24
    139c:	30 0d       	add	r19, r0
    139e:	11 24       	eor	r1, r1
    13a0:	33 2e       	mov	r3, r19
    13a2:	20 62       	ori	r18, 0x20	; 32
    13a4:	0c c0       	rjmp	.+24     	; 0x13be <vfprintf+0xf0>
    13a6:	8e 32       	cpi	r24, 0x2E	; 46
    13a8:	21 f4       	brne	.+8      	; 0x13b2 <vfprintf+0xe4>
    13aa:	26 fd       	sbrc	r18, 6
    13ac:	5f c1       	rjmp	.+702    	; 0x166c <vfprintf+0x39e>
    13ae:	20 64       	ori	r18, 0x40	; 64
    13b0:	06 c0       	rjmp	.+12     	; 0x13be <vfprintf+0xf0>
    13b2:	8c 36       	cpi	r24, 0x6C	; 108
    13b4:	11 f4       	brne	.+4      	; 0x13ba <vfprintf+0xec>
    13b6:	20 68       	ori	r18, 0x80	; 128
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <vfprintf+0xf0>
    13ba:	88 36       	cpi	r24, 0x68	; 104
    13bc:	41 f4       	brne	.+16     	; 0x13ce <vfprintf+0x100>
    13be:	f6 01       	movw	r30, r12
    13c0:	93 fd       	sbrc	r25, 3
    13c2:	85 91       	lpm	r24, Z+
    13c4:	93 ff       	sbrs	r25, 3
    13c6:	81 91       	ld	r24, Z+
    13c8:	6f 01       	movw	r12, r30
    13ca:	81 11       	cpse	r24, r1
    13cc:	c1 cf       	rjmp	.-126    	; 0x1350 <vfprintf+0x82>
    13ce:	98 2f       	mov	r25, r24
    13d0:	9f 7d       	andi	r25, 0xDF	; 223
    13d2:	95 54       	subi	r25, 0x45	; 69
    13d4:	93 30       	cpi	r25, 0x03	; 3
    13d6:	28 f4       	brcc	.+10     	; 0x13e2 <vfprintf+0x114>
    13d8:	0c 5f       	subi	r16, 0xFC	; 252
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	ff e3       	ldi	r31, 0x3F	; 63
    13de:	f9 83       	std	Y+1, r31	; 0x01
    13e0:	0d c0       	rjmp	.+26     	; 0x13fc <vfprintf+0x12e>
    13e2:	83 36       	cpi	r24, 0x63	; 99
    13e4:	31 f0       	breq	.+12     	; 0x13f2 <vfprintf+0x124>
    13e6:	83 37       	cpi	r24, 0x73	; 115
    13e8:	71 f0       	breq	.+28     	; 0x1406 <vfprintf+0x138>
    13ea:	83 35       	cpi	r24, 0x53	; 83
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <vfprintf+0x122>
    13ee:	57 c0       	rjmp	.+174    	; 0x149e <vfprintf+0x1d0>
    13f0:	21 c0       	rjmp	.+66     	; 0x1434 <vfprintf+0x166>
    13f2:	f8 01       	movw	r30, r16
    13f4:	80 81       	ld	r24, Z
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	0e 5f       	subi	r16, 0xFE	; 254
    13fa:	1f 4f       	sbci	r17, 0xFF	; 255
    13fc:	44 24       	eor	r4, r4
    13fe:	43 94       	inc	r4
    1400:	51 2c       	mov	r5, r1
    1402:	54 01       	movw	r10, r8
    1404:	14 c0       	rjmp	.+40     	; 0x142e <vfprintf+0x160>
    1406:	38 01       	movw	r6, r16
    1408:	f2 e0       	ldi	r31, 0x02	; 2
    140a:	6f 0e       	add	r6, r31
    140c:	71 1c       	adc	r7, r1
    140e:	f8 01       	movw	r30, r16
    1410:	a0 80       	ld	r10, Z
    1412:	b1 80       	ldd	r11, Z+1	; 0x01
    1414:	26 ff       	sbrs	r18, 6
    1416:	03 c0       	rjmp	.+6      	; 0x141e <vfprintf+0x150>
    1418:	65 2d       	mov	r22, r5
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <vfprintf+0x154>
    141e:	6f ef       	ldi	r22, 0xFF	; 255
    1420:	7f ef       	ldi	r23, 0xFF	; 255
    1422:	c5 01       	movw	r24, r10
    1424:	2c 87       	std	Y+12, r18	; 0x0c
    1426:	4c d1       	rcall	.+664    	; 0x16c0 <strnlen>
    1428:	2c 01       	movw	r4, r24
    142a:	83 01       	movw	r16, r6
    142c:	2c 85       	ldd	r18, Y+12	; 0x0c
    142e:	2f 77       	andi	r18, 0x7F	; 127
    1430:	22 2e       	mov	r2, r18
    1432:	16 c0       	rjmp	.+44     	; 0x1460 <vfprintf+0x192>
    1434:	38 01       	movw	r6, r16
    1436:	f2 e0       	ldi	r31, 0x02	; 2
    1438:	6f 0e       	add	r6, r31
    143a:	71 1c       	adc	r7, r1
    143c:	f8 01       	movw	r30, r16
    143e:	a0 80       	ld	r10, Z
    1440:	b1 80       	ldd	r11, Z+1	; 0x01
    1442:	26 ff       	sbrs	r18, 6
    1444:	03 c0       	rjmp	.+6      	; 0x144c <vfprintf+0x17e>
    1446:	65 2d       	mov	r22, r5
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <vfprintf+0x182>
    144c:	6f ef       	ldi	r22, 0xFF	; 255
    144e:	7f ef       	ldi	r23, 0xFF	; 255
    1450:	c5 01       	movw	r24, r10
    1452:	2c 87       	std	Y+12, r18	; 0x0c
    1454:	2a d1       	rcall	.+596    	; 0x16aa <strnlen_P>
    1456:	2c 01       	movw	r4, r24
    1458:	2c 85       	ldd	r18, Y+12	; 0x0c
    145a:	20 68       	ori	r18, 0x80	; 128
    145c:	22 2e       	mov	r2, r18
    145e:	83 01       	movw	r16, r6
    1460:	23 fc       	sbrc	r2, 3
    1462:	19 c0       	rjmp	.+50     	; 0x1496 <vfprintf+0x1c8>
    1464:	83 2d       	mov	r24, r3
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	48 16       	cp	r4, r24
    146a:	59 06       	cpc	r5, r25
    146c:	a0 f4       	brcc	.+40     	; 0x1496 <vfprintf+0x1c8>
    146e:	b7 01       	movw	r22, r14
    1470:	80 e2       	ldi	r24, 0x20	; 32
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	30 d1       	rcall	.+608    	; 0x16d6 <fputc>
    1476:	3a 94       	dec	r3
    1478:	f5 cf       	rjmp	.-22     	; 0x1464 <vfprintf+0x196>
    147a:	f5 01       	movw	r30, r10
    147c:	27 fc       	sbrc	r2, 7
    147e:	85 91       	lpm	r24, Z+
    1480:	27 fe       	sbrs	r2, 7
    1482:	81 91       	ld	r24, Z+
    1484:	5f 01       	movw	r10, r30
    1486:	b7 01       	movw	r22, r14
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	25 d1       	rcall	.+586    	; 0x16d6 <fputc>
    148c:	31 10       	cpse	r3, r1
    148e:	3a 94       	dec	r3
    1490:	f1 e0       	ldi	r31, 0x01	; 1
    1492:	4f 1a       	sub	r4, r31
    1494:	51 08       	sbc	r5, r1
    1496:	41 14       	cp	r4, r1
    1498:	51 04       	cpc	r5, r1
    149a:	79 f7       	brne	.-34     	; 0x147a <vfprintf+0x1ac>
    149c:	de c0       	rjmp	.+444    	; 0x165a <vfprintf+0x38c>
    149e:	84 36       	cpi	r24, 0x64	; 100
    14a0:	11 f0       	breq	.+4      	; 0x14a6 <vfprintf+0x1d8>
    14a2:	89 36       	cpi	r24, 0x69	; 105
    14a4:	31 f5       	brne	.+76     	; 0x14f2 <vfprintf+0x224>
    14a6:	f8 01       	movw	r30, r16
    14a8:	27 ff       	sbrs	r18, 7
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <vfprintf+0x1ec>
    14ac:	60 81       	ld	r22, Z
    14ae:	71 81       	ldd	r23, Z+1	; 0x01
    14b0:	82 81       	ldd	r24, Z+2	; 0x02
    14b2:	93 81       	ldd	r25, Z+3	; 0x03
    14b4:	0c 5f       	subi	r16, 0xFC	; 252
    14b6:	1f 4f       	sbci	r17, 0xFF	; 255
    14b8:	08 c0       	rjmp	.+16     	; 0x14ca <vfprintf+0x1fc>
    14ba:	60 81       	ld	r22, Z
    14bc:	71 81       	ldd	r23, Z+1	; 0x01
    14be:	07 2e       	mov	r0, r23
    14c0:	00 0c       	add	r0, r0
    14c2:	88 0b       	sbc	r24, r24
    14c4:	99 0b       	sbc	r25, r25
    14c6:	0e 5f       	subi	r16, 0xFE	; 254
    14c8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ca:	2f 76       	andi	r18, 0x6F	; 111
    14cc:	72 2e       	mov	r7, r18
    14ce:	97 ff       	sbrs	r25, 7
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <vfprintf+0x216>
    14d2:	90 95       	com	r25
    14d4:	80 95       	com	r24
    14d6:	70 95       	com	r23
    14d8:	61 95       	neg	r22
    14da:	7f 4f       	sbci	r23, 0xFF	; 255
    14dc:	8f 4f       	sbci	r24, 0xFF	; 255
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	20 68       	ori	r18, 0x80	; 128
    14e2:	72 2e       	mov	r7, r18
    14e4:	2a e0       	ldi	r18, 0x0A	; 10
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	a4 01       	movw	r20, r8
    14ea:	2d d1       	rcall	.+602    	; 0x1746 <__ultoa_invert>
    14ec:	a8 2e       	mov	r10, r24
    14ee:	a8 18       	sub	r10, r8
    14f0:	43 c0       	rjmp	.+134    	; 0x1578 <vfprintf+0x2aa>
    14f2:	85 37       	cpi	r24, 0x75	; 117
    14f4:	29 f4       	brne	.+10     	; 0x1500 <vfprintf+0x232>
    14f6:	2f 7e       	andi	r18, 0xEF	; 239
    14f8:	b2 2e       	mov	r11, r18
    14fa:	2a e0       	ldi	r18, 0x0A	; 10
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	25 c0       	rjmp	.+74     	; 0x154a <vfprintf+0x27c>
    1500:	f2 2f       	mov	r31, r18
    1502:	f9 7f       	andi	r31, 0xF9	; 249
    1504:	bf 2e       	mov	r11, r31
    1506:	8f 36       	cpi	r24, 0x6F	; 111
    1508:	c1 f0       	breq	.+48     	; 0x153a <vfprintf+0x26c>
    150a:	18 f4       	brcc	.+6      	; 0x1512 <vfprintf+0x244>
    150c:	88 35       	cpi	r24, 0x58	; 88
    150e:	79 f0       	breq	.+30     	; 0x152e <vfprintf+0x260>
    1510:	ad c0       	rjmp	.+346    	; 0x166c <vfprintf+0x39e>
    1512:	80 37       	cpi	r24, 0x70	; 112
    1514:	19 f0       	breq	.+6      	; 0x151c <vfprintf+0x24e>
    1516:	88 37       	cpi	r24, 0x78	; 120
    1518:	21 f0       	breq	.+8      	; 0x1522 <vfprintf+0x254>
    151a:	a8 c0       	rjmp	.+336    	; 0x166c <vfprintf+0x39e>
    151c:	2f 2f       	mov	r18, r31
    151e:	20 61       	ori	r18, 0x10	; 16
    1520:	b2 2e       	mov	r11, r18
    1522:	b4 fe       	sbrs	r11, 4
    1524:	0d c0       	rjmp	.+26     	; 0x1540 <vfprintf+0x272>
    1526:	8b 2d       	mov	r24, r11
    1528:	84 60       	ori	r24, 0x04	; 4
    152a:	b8 2e       	mov	r11, r24
    152c:	09 c0       	rjmp	.+18     	; 0x1540 <vfprintf+0x272>
    152e:	24 ff       	sbrs	r18, 4
    1530:	0a c0       	rjmp	.+20     	; 0x1546 <vfprintf+0x278>
    1532:	9f 2f       	mov	r25, r31
    1534:	96 60       	ori	r25, 0x06	; 6
    1536:	b9 2e       	mov	r11, r25
    1538:	06 c0       	rjmp	.+12     	; 0x1546 <vfprintf+0x278>
    153a:	28 e0       	ldi	r18, 0x08	; 8
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	05 c0       	rjmp	.+10     	; 0x154a <vfprintf+0x27c>
    1540:	20 e1       	ldi	r18, 0x10	; 16
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	02 c0       	rjmp	.+4      	; 0x154a <vfprintf+0x27c>
    1546:	20 e1       	ldi	r18, 0x10	; 16
    1548:	32 e0       	ldi	r19, 0x02	; 2
    154a:	f8 01       	movw	r30, r16
    154c:	b7 fe       	sbrs	r11, 7
    154e:	07 c0       	rjmp	.+14     	; 0x155e <vfprintf+0x290>
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	0c 5f       	subi	r16, 0xFC	; 252
    155a:	1f 4f       	sbci	r17, 0xFF	; 255
    155c:	06 c0       	rjmp	.+12     	; 0x156a <vfprintf+0x29c>
    155e:	60 81       	ld	r22, Z
    1560:	71 81       	ldd	r23, Z+1	; 0x01
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 5f       	subi	r16, 0xFE	; 254
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	a4 01       	movw	r20, r8
    156c:	ec d0       	rcall	.+472    	; 0x1746 <__ultoa_invert>
    156e:	a8 2e       	mov	r10, r24
    1570:	a8 18       	sub	r10, r8
    1572:	fb 2d       	mov	r31, r11
    1574:	ff 77       	andi	r31, 0x7F	; 127
    1576:	7f 2e       	mov	r7, r31
    1578:	76 fe       	sbrs	r7, 6
    157a:	0b c0       	rjmp	.+22     	; 0x1592 <vfprintf+0x2c4>
    157c:	37 2d       	mov	r19, r7
    157e:	3e 7f       	andi	r19, 0xFE	; 254
    1580:	a5 14       	cp	r10, r5
    1582:	50 f4       	brcc	.+20     	; 0x1598 <vfprintf+0x2ca>
    1584:	74 fe       	sbrs	r7, 4
    1586:	0a c0       	rjmp	.+20     	; 0x159c <vfprintf+0x2ce>
    1588:	72 fc       	sbrc	r7, 2
    158a:	08 c0       	rjmp	.+16     	; 0x159c <vfprintf+0x2ce>
    158c:	37 2d       	mov	r19, r7
    158e:	3e 7e       	andi	r19, 0xEE	; 238
    1590:	05 c0       	rjmp	.+10     	; 0x159c <vfprintf+0x2ce>
    1592:	ba 2c       	mov	r11, r10
    1594:	37 2d       	mov	r19, r7
    1596:	03 c0       	rjmp	.+6      	; 0x159e <vfprintf+0x2d0>
    1598:	ba 2c       	mov	r11, r10
    159a:	01 c0       	rjmp	.+2      	; 0x159e <vfprintf+0x2d0>
    159c:	b5 2c       	mov	r11, r5
    159e:	34 ff       	sbrs	r19, 4
    15a0:	0d c0       	rjmp	.+26     	; 0x15bc <vfprintf+0x2ee>
    15a2:	fe 01       	movw	r30, r28
    15a4:	ea 0d       	add	r30, r10
    15a6:	f1 1d       	adc	r31, r1
    15a8:	80 81       	ld	r24, Z
    15aa:	80 33       	cpi	r24, 0x30	; 48
    15ac:	11 f4       	brne	.+4      	; 0x15b2 <vfprintf+0x2e4>
    15ae:	39 7e       	andi	r19, 0xE9	; 233
    15b0:	09 c0       	rjmp	.+18     	; 0x15c4 <vfprintf+0x2f6>
    15b2:	32 ff       	sbrs	r19, 2
    15b4:	06 c0       	rjmp	.+12     	; 0x15c2 <vfprintf+0x2f4>
    15b6:	b3 94       	inc	r11
    15b8:	b3 94       	inc	r11
    15ba:	04 c0       	rjmp	.+8      	; 0x15c4 <vfprintf+0x2f6>
    15bc:	83 2f       	mov	r24, r19
    15be:	86 78       	andi	r24, 0x86	; 134
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <vfprintf+0x2f6>
    15c2:	b3 94       	inc	r11
    15c4:	33 fd       	sbrc	r19, 3
    15c6:	12 c0       	rjmp	.+36     	; 0x15ec <vfprintf+0x31e>
    15c8:	30 ff       	sbrs	r19, 0
    15ca:	06 c0       	rjmp	.+12     	; 0x15d8 <vfprintf+0x30a>
    15cc:	5a 2c       	mov	r5, r10
    15ce:	b3 14       	cp	r11, r3
    15d0:	18 f4       	brcc	.+6      	; 0x15d8 <vfprintf+0x30a>
    15d2:	53 0c       	add	r5, r3
    15d4:	5b 18       	sub	r5, r11
    15d6:	b3 2c       	mov	r11, r3
    15d8:	b3 14       	cp	r11, r3
    15da:	60 f4       	brcc	.+24     	; 0x15f4 <vfprintf+0x326>
    15dc:	b7 01       	movw	r22, r14
    15de:	80 e2       	ldi	r24, 0x20	; 32
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	3c 87       	std	Y+12, r19	; 0x0c
    15e4:	78 d0       	rcall	.+240    	; 0x16d6 <fputc>
    15e6:	b3 94       	inc	r11
    15e8:	3c 85       	ldd	r19, Y+12	; 0x0c
    15ea:	f6 cf       	rjmp	.-20     	; 0x15d8 <vfprintf+0x30a>
    15ec:	b3 14       	cp	r11, r3
    15ee:	10 f4       	brcc	.+4      	; 0x15f4 <vfprintf+0x326>
    15f0:	3b 18       	sub	r3, r11
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <vfprintf+0x328>
    15f4:	31 2c       	mov	r3, r1
    15f6:	34 ff       	sbrs	r19, 4
    15f8:	11 c0       	rjmp	.+34     	; 0x161c <vfprintf+0x34e>
    15fa:	b7 01       	movw	r22, r14
    15fc:	80 e3       	ldi	r24, 0x30	; 48
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	3c 87       	std	Y+12, r19	; 0x0c
    1602:	69 d0       	rcall	.+210    	; 0x16d6 <fputc>
    1604:	3c 85       	ldd	r19, Y+12	; 0x0c
    1606:	32 ff       	sbrs	r19, 2
    1608:	16 c0       	rjmp	.+44     	; 0x1636 <vfprintf+0x368>
    160a:	31 fd       	sbrc	r19, 1
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <vfprintf+0x346>
    160e:	88 e7       	ldi	r24, 0x78	; 120
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <vfprintf+0x34a>
    1614:	88 e5       	ldi	r24, 0x58	; 88
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	b7 01       	movw	r22, r14
    161a:	0c c0       	rjmp	.+24     	; 0x1634 <vfprintf+0x366>
    161c:	83 2f       	mov	r24, r19
    161e:	86 78       	andi	r24, 0x86	; 134
    1620:	51 f0       	breq	.+20     	; 0x1636 <vfprintf+0x368>
    1622:	31 ff       	sbrs	r19, 1
    1624:	02 c0       	rjmp	.+4      	; 0x162a <vfprintf+0x35c>
    1626:	8b e2       	ldi	r24, 0x2B	; 43
    1628:	01 c0       	rjmp	.+2      	; 0x162c <vfprintf+0x35e>
    162a:	80 e2       	ldi	r24, 0x20	; 32
    162c:	37 fd       	sbrc	r19, 7
    162e:	8d e2       	ldi	r24, 0x2D	; 45
    1630:	b7 01       	movw	r22, r14
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	50 d0       	rcall	.+160    	; 0x16d6 <fputc>
    1636:	a5 14       	cp	r10, r5
    1638:	30 f4       	brcc	.+12     	; 0x1646 <vfprintf+0x378>
    163a:	b7 01       	movw	r22, r14
    163c:	80 e3       	ldi	r24, 0x30	; 48
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	4a d0       	rcall	.+148    	; 0x16d6 <fputc>
    1642:	5a 94       	dec	r5
    1644:	f8 cf       	rjmp	.-16     	; 0x1636 <vfprintf+0x368>
    1646:	aa 94       	dec	r10
    1648:	f4 01       	movw	r30, r8
    164a:	ea 0d       	add	r30, r10
    164c:	f1 1d       	adc	r31, r1
    164e:	80 81       	ld	r24, Z
    1650:	b7 01       	movw	r22, r14
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	40 d0       	rcall	.+128    	; 0x16d6 <fputc>
    1656:	a1 10       	cpse	r10, r1
    1658:	f6 cf       	rjmp	.-20     	; 0x1646 <vfprintf+0x378>
    165a:	33 20       	and	r3, r3
    165c:	09 f4       	brne	.+2      	; 0x1660 <vfprintf+0x392>
    165e:	5d ce       	rjmp	.-838    	; 0x131a <vfprintf+0x4c>
    1660:	b7 01       	movw	r22, r14
    1662:	80 e2       	ldi	r24, 0x20	; 32
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	37 d0       	rcall	.+110    	; 0x16d6 <fputc>
    1668:	3a 94       	dec	r3
    166a:	f7 cf       	rjmp	.-18     	; 0x165a <vfprintf+0x38c>
    166c:	f7 01       	movw	r30, r14
    166e:	86 81       	ldd	r24, Z+6	; 0x06
    1670:	97 81       	ldd	r25, Z+7	; 0x07
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <vfprintf+0x3aa>
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	9f ef       	ldi	r25, 0xFF	; 255
    1678:	2c 96       	adiw	r28, 0x0c	; 12
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	df 90       	pop	r13
    1692:	cf 90       	pop	r12
    1694:	bf 90       	pop	r11
    1696:	af 90       	pop	r10
    1698:	9f 90       	pop	r9
    169a:	8f 90       	pop	r8
    169c:	7f 90       	pop	r7
    169e:	6f 90       	pop	r6
    16a0:	5f 90       	pop	r5
    16a2:	4f 90       	pop	r4
    16a4:	3f 90       	pop	r3
    16a6:	2f 90       	pop	r2
    16a8:	08 95       	ret

000016aa <strnlen_P>:
    16aa:	fc 01       	movw	r30, r24
    16ac:	05 90       	lpm	r0, Z+
    16ae:	61 50       	subi	r22, 0x01	; 1
    16b0:	70 40       	sbci	r23, 0x00	; 0
    16b2:	01 10       	cpse	r0, r1
    16b4:	d8 f7       	brcc	.-10     	; 0x16ac <strnlen_P+0x2>
    16b6:	80 95       	com	r24
    16b8:	90 95       	com	r25
    16ba:	8e 0f       	add	r24, r30
    16bc:	9f 1f       	adc	r25, r31
    16be:	08 95       	ret

000016c0 <strnlen>:
    16c0:	fc 01       	movw	r30, r24
    16c2:	61 50       	subi	r22, 0x01	; 1
    16c4:	70 40       	sbci	r23, 0x00	; 0
    16c6:	01 90       	ld	r0, Z+
    16c8:	01 10       	cpse	r0, r1
    16ca:	d8 f7       	brcc	.-10     	; 0x16c2 <strnlen+0x2>
    16cc:	80 95       	com	r24
    16ce:	90 95       	com	r25
    16d0:	8e 0f       	add	r24, r30
    16d2:	9f 1f       	adc	r25, r31
    16d4:	08 95       	ret

000016d6 <fputc>:
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	fb 01       	movw	r30, r22
    16e0:	23 81       	ldd	r18, Z+3	; 0x03
    16e2:	21 fd       	sbrc	r18, 1
    16e4:	03 c0       	rjmp	.+6      	; 0x16ec <fputc+0x16>
    16e6:	8f ef       	ldi	r24, 0xFF	; 255
    16e8:	9f ef       	ldi	r25, 0xFF	; 255
    16ea:	28 c0       	rjmp	.+80     	; 0x173c <fputc+0x66>
    16ec:	22 ff       	sbrs	r18, 2
    16ee:	16 c0       	rjmp	.+44     	; 0x171c <fputc+0x46>
    16f0:	46 81       	ldd	r20, Z+6	; 0x06
    16f2:	57 81       	ldd	r21, Z+7	; 0x07
    16f4:	24 81       	ldd	r18, Z+4	; 0x04
    16f6:	35 81       	ldd	r19, Z+5	; 0x05
    16f8:	42 17       	cp	r20, r18
    16fa:	53 07       	cpc	r21, r19
    16fc:	44 f4       	brge	.+16     	; 0x170e <fputc+0x38>
    16fe:	a0 81       	ld	r26, Z
    1700:	b1 81       	ldd	r27, Z+1	; 0x01
    1702:	9d 01       	movw	r18, r26
    1704:	2f 5f       	subi	r18, 0xFF	; 255
    1706:	3f 4f       	sbci	r19, 0xFF	; 255
    1708:	31 83       	std	Z+1, r19	; 0x01
    170a:	20 83       	st	Z, r18
    170c:	8c 93       	st	X, r24
    170e:	26 81       	ldd	r18, Z+6	; 0x06
    1710:	37 81       	ldd	r19, Z+7	; 0x07
    1712:	2f 5f       	subi	r18, 0xFF	; 255
    1714:	3f 4f       	sbci	r19, 0xFF	; 255
    1716:	37 83       	std	Z+7, r19	; 0x07
    1718:	26 83       	std	Z+6, r18	; 0x06
    171a:	10 c0       	rjmp	.+32     	; 0x173c <fputc+0x66>
    171c:	eb 01       	movw	r28, r22
    171e:	09 2f       	mov	r16, r25
    1720:	18 2f       	mov	r17, r24
    1722:	00 84       	ldd	r0, Z+8	; 0x08
    1724:	f1 85       	ldd	r31, Z+9	; 0x09
    1726:	e0 2d       	mov	r30, r0
    1728:	19 95       	eicall
    172a:	89 2b       	or	r24, r25
    172c:	e1 f6       	brne	.-72     	; 0x16e6 <fputc+0x10>
    172e:	8e 81       	ldd	r24, Y+6	; 0x06
    1730:	9f 81       	ldd	r25, Y+7	; 0x07
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	9f 83       	std	Y+7, r25	; 0x07
    1736:	8e 83       	std	Y+6, r24	; 0x06
    1738:	81 2f       	mov	r24, r17
    173a:	90 2f       	mov	r25, r16
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	08 95       	ret

00001746 <__ultoa_invert>:
    1746:	fa 01       	movw	r30, r20
    1748:	aa 27       	eor	r26, r26
    174a:	28 30       	cpi	r18, 0x08	; 8
    174c:	51 f1       	breq	.+84     	; 0x17a2 <__ultoa_invert+0x5c>
    174e:	20 31       	cpi	r18, 0x10	; 16
    1750:	81 f1       	breq	.+96     	; 0x17b2 <__ultoa_invert+0x6c>
    1752:	e8 94       	clt
    1754:	6f 93       	push	r22
    1756:	6e 7f       	andi	r22, 0xFE	; 254
    1758:	6e 5f       	subi	r22, 0xFE	; 254
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	8f 4f       	sbci	r24, 0xFF	; 255
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	af 4f       	sbci	r26, 0xFF	; 255
    1762:	b1 e0       	ldi	r27, 0x01	; 1
    1764:	3e d0       	rcall	.+124    	; 0x17e2 <__ultoa_invert+0x9c>
    1766:	b4 e0       	ldi	r27, 0x04	; 4
    1768:	3c d0       	rcall	.+120    	; 0x17e2 <__ultoa_invert+0x9c>
    176a:	67 0f       	add	r22, r23
    176c:	78 1f       	adc	r23, r24
    176e:	89 1f       	adc	r24, r25
    1770:	9a 1f       	adc	r25, r26
    1772:	a1 1d       	adc	r26, r1
    1774:	68 0f       	add	r22, r24
    1776:	79 1f       	adc	r23, r25
    1778:	8a 1f       	adc	r24, r26
    177a:	91 1d       	adc	r25, r1
    177c:	a1 1d       	adc	r26, r1
    177e:	6a 0f       	add	r22, r26
    1780:	71 1d       	adc	r23, r1
    1782:	81 1d       	adc	r24, r1
    1784:	91 1d       	adc	r25, r1
    1786:	a1 1d       	adc	r26, r1
    1788:	20 d0       	rcall	.+64     	; 0x17ca <__ultoa_invert+0x84>
    178a:	09 f4       	brne	.+2      	; 0x178e <__ultoa_invert+0x48>
    178c:	68 94       	set
    178e:	3f 91       	pop	r19
    1790:	2a e0       	ldi	r18, 0x0A	; 10
    1792:	26 9f       	mul	r18, r22
    1794:	11 24       	eor	r1, r1
    1796:	30 19       	sub	r19, r0
    1798:	30 5d       	subi	r19, 0xD0	; 208
    179a:	31 93       	st	Z+, r19
    179c:	de f6       	brtc	.-74     	; 0x1754 <__ultoa_invert+0xe>
    179e:	cf 01       	movw	r24, r30
    17a0:	08 95       	ret
    17a2:	46 2f       	mov	r20, r22
    17a4:	47 70       	andi	r20, 0x07	; 7
    17a6:	40 5d       	subi	r20, 0xD0	; 208
    17a8:	41 93       	st	Z+, r20
    17aa:	b3 e0       	ldi	r27, 0x03	; 3
    17ac:	0f d0       	rcall	.+30     	; 0x17cc <__ultoa_invert+0x86>
    17ae:	c9 f7       	brne	.-14     	; 0x17a2 <__ultoa_invert+0x5c>
    17b0:	f6 cf       	rjmp	.-20     	; 0x179e <__ultoa_invert+0x58>
    17b2:	46 2f       	mov	r20, r22
    17b4:	4f 70       	andi	r20, 0x0F	; 15
    17b6:	40 5d       	subi	r20, 0xD0	; 208
    17b8:	4a 33       	cpi	r20, 0x3A	; 58
    17ba:	18 f0       	brcs	.+6      	; 0x17c2 <__ultoa_invert+0x7c>
    17bc:	49 5d       	subi	r20, 0xD9	; 217
    17be:	31 fd       	sbrc	r19, 1
    17c0:	40 52       	subi	r20, 0x20	; 32
    17c2:	41 93       	st	Z+, r20
    17c4:	02 d0       	rcall	.+4      	; 0x17ca <__ultoa_invert+0x84>
    17c6:	a9 f7       	brne	.-22     	; 0x17b2 <__ultoa_invert+0x6c>
    17c8:	ea cf       	rjmp	.-44     	; 0x179e <__ultoa_invert+0x58>
    17ca:	b4 e0       	ldi	r27, 0x04	; 4
    17cc:	a6 95       	lsr	r26
    17ce:	97 95       	ror	r25
    17d0:	87 95       	ror	r24
    17d2:	77 95       	ror	r23
    17d4:	67 95       	ror	r22
    17d6:	ba 95       	dec	r27
    17d8:	c9 f7       	brne	.-14     	; 0x17cc <__ultoa_invert+0x86>
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	61 05       	cpc	r22, r1
    17de:	71 05       	cpc	r23, r1
    17e0:	08 95       	ret
    17e2:	9b 01       	movw	r18, r22
    17e4:	ac 01       	movw	r20, r24
    17e6:	0a 2e       	mov	r0, r26
    17e8:	06 94       	lsr	r0
    17ea:	57 95       	ror	r21
    17ec:	47 95       	ror	r20
    17ee:	37 95       	ror	r19
    17f0:	27 95       	ror	r18
    17f2:	ba 95       	dec	r27
    17f4:	c9 f7       	brne	.-14     	; 0x17e8 <__ultoa_invert+0xa2>
    17f6:	62 0f       	add	r22, r18
    17f8:	73 1f       	adc	r23, r19
    17fa:	84 1f       	adc	r24, r20
    17fc:	95 1f       	adc	r25, r21
    17fe:	a0 1d       	adc	r26, r0
    1800:	08 95       	ret

00001802 <_exit>:
    1802:	f8 94       	cli

00001804 <__stop_program>:
    1804:	ff cf       	rjmp	.-2      	; 0x1804 <__stop_program>
